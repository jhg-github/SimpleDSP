
simple_dsp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002420  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  080025b4  080025b4  000125b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027f0  080027f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027f0  080027f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027f0  080027f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027f0  080027f0  000127f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027f4  080027f4  000127f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08002804  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002804  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea1f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002321  00000000  00000000  0002ea5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000957b  00000000  00000000  00030d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000790  00000000  00000000  0003a2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c90  00000000  00000000  0003aa88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001f802  00000000  00000000  0003c718  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ac70  00000000  00000000  0005bf1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000bdf16  00000000  00000000  00066b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00124aa0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001790  00000000  00000000  00124b1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800259c 	.word	0x0800259c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800259c 	.word	0x0800259c

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	2100      	movs	r1, #0
{
 80001d8:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001da:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001dc:	2224      	movs	r2, #36	; 0x24
 80001de:	a807      	add	r0, sp, #28
 80001e0:	f002 f9d4 	bl	800258c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e4:	4621      	mov	r1, r4
 80001e6:	a810      	add	r0, sp, #64	; 0x40
 80001e8:	2258      	movs	r2, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ea:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80001ee:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80001f2:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f4:	f002 f9ca 	bl	800258c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f8:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001fa:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fc:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80001fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000202:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000206:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800020a:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020e:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000210:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000212:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f001 f81e 	bl	8001254 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000218:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021a:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000220:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000222:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000224:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000226:	e9cd 5402 	strd	r5, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022c:	f001 faf8 	bl	8001820 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000230:	2282      	movs	r2, #130	; 0x82
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000232:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000236:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000238:	9413      	str	r4, [sp, #76]	; 0x4c
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 800023a:	9210      	str	r2, [sp, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800023c:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800023e:	f001 fc27 	bl	8001a90 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000242:	b027      	add	sp, #156	; 0x9c
 8000244:	bd30      	pop	{r4, r5, pc}
 8000246:	bf00      	nop

08000248 <main>:
{
 8000248:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800024c:	2400      	movs	r4, #0
{
 800024e:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8000250:	f000 faac 	bl	80007ac <HAL_Init>
  SystemClock_Config();
 8000254:	f7ff ffbe 	bl	80001d4 <SystemClock_Config>
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000258:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000260:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000264:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000268:	4dbf      	ldr	r5, [pc, #764]	; (8000568 <main+0x320>)
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800026a:	f8df b324 	ldr.w	fp, [pc, #804]	; 8000590 <main+0x348>
 800026e:	696b      	ldr	r3, [r5, #20]
 8000270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000274:	616b      	str	r3, [r5, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000276:	696b      	ldr	r3, [r5, #20]
 8000278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800027c:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 800027e:	9b04      	ldr	r3, [sp, #16]
  SET_BIT(RCC->AHBENR, Periphs);
 8000280:	696b      	ldr	r3, [r5, #20]
 8000282:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000286:	616b      	str	r3, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000288:	696b      	ldr	r3, [r5, #20]
 800028a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800028e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8000290:	9b05      	ldr	r3, [sp, #20]
  SET_BIT(RCC->AHBENR, Periphs);
 8000292:	696b      	ldr	r3, [r5, #20]
 8000294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000298:	616b      	str	r3, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800029a:	696b      	ldr	r3, [r5, #20]
 800029c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002a0:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 80002a2:	9b06      	ldr	r3, [sp, #24]
  SET_BIT(RCC->AHBENR, Periphs);
 80002a4:	696b      	ldr	r3, [r5, #20]
 80002a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002aa:	616b      	str	r3, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002ac:	696b      	ldr	r3, [r5, #20]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80002ae:	f04f 4a90 	mov.w	sl, #1207959552	; 0x48000000
 80002b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002b6:	9307      	str	r3, [sp, #28]
 80002b8:	2620      	movs	r6, #32
  (void)tmpreg;
 80002ba:	9b07      	ldr	r3, [sp, #28]
 80002bc:	f8ca 6028 	str.w	r6, [sl, #40]	; 0x28
 80002c0:	f8db 2014 	ldr.w	r2, [fp, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002c4:	23f0      	movs	r3, #240	; 0xf0
 80002c6:	fa93 f3a3 	rbit	r3, r3
 80002ca:	2702      	movs	r7, #2
 80002cc:	fab3 f383 	clz	r3, r3
 80002d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80002d4:	fa07 f303 	lsl.w	r3, r7, r3
 80002d8:	4313      	orrs	r3, r2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002da:	48a4      	ldr	r0, [pc, #656]	; (800056c <main+0x324>)
 80002dc:	f8cb 3014 	str.w	r3, [fp, #20]
 80002e0:	68c3      	ldr	r3, [r0, #12]
 80002e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e6:	fa91 f2a1 	rbit	r2, r1
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	f04f 0e03 	mov.w	lr, #3
 80002f2:	0052      	lsls	r2, r2, #1
 80002f4:	fa0e f202 	lsl.w	r2, lr, r2
 80002f8:	ea23 0202 	bic.w	r2, r3, r2
 80002fc:	fa91 fca1 	rbit	ip, r1
 8000300:	60c2      	str	r2, [r0, #12]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000302:	6803      	ldr	r3, [r0, #0]
 8000304:	fa91 f2a1 	rbit	r2, r1
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	0052      	lsls	r2, r2, #1
 800030e:	fa0e f202 	lsl.w	r2, lr, r2
 8000312:	ea23 0202 	bic.w	r2, r3, r2
 8000316:	fa91 fca1 	rbit	ip, r1
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
  EXTI_InitStruct.LineCommand = ENABLE;
 800031a:	f04f 0901 	mov.w	r9, #1
 800031e:	6002      	str	r2, [r0, #0]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
  LL_EXTI_Init(&EXTI_InitStruct);
 8000320:	eb0d 0006 	add.w	r0, sp, r6
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000324:	9108      	str	r1, [sp, #32]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000326:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
  EXTI_InitStruct.LineCommand = ENABLE;
 800032a:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
  LL_EXTI_Init(&EXTI_InitStruct);
 800032e:	f001 ff39 	bl	80021a4 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000332:	2303      	movs	r3, #3
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000334:	a90c      	add	r1, sp, #48	; 0x30
 8000336:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000338:	e9cd 690c 	strd	r6, r9, [sp, #48]	; 0x30
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800033c:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000340:	9410      	str	r4, [sp, #64]	; 0x40
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000342:	f001 ffd9 	bl	80022f8 <LL_GPIO_Init>
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8000346:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 800034e:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 8000352:	940b      	str	r4, [sp, #44]	; 0x2c
 8000354:	9408      	str	r4, [sp, #32]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000356:	69ea      	ldr	r2, [r5, #28]
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000358:	4e85      	ldr	r6, [pc, #532]	; (8000570 <main+0x328>)
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 800035a:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8000594 <main+0x34c>
  hadc1.Instance = ADC1;
 800035e:	4f85      	ldr	r7, [pc, #532]	; (8000574 <main+0x32c>)
 8000360:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000364:	61ea      	str	r2, [r5, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000366:	69ea      	ldr	r2, [r5, #28]
 8000368:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800036c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800036e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHBENR, Periphs);
 8000370:	696a      	ldr	r2, [r5, #20]
 8000372:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000376:	616a      	str	r2, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000378:	696a      	ldr	r2, [r5, #20]
 800037a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800037e:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000380:	2303      	movs	r3, #3
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000382:	2210      	movs	r2, #16
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000384:	a90c      	add	r1, sp, #48	; 0x30
 8000386:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000388:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800038a:	920c      	str	r2, [sp, #48]	; 0x30
  (void)tmpreg;
 800038c:	9b03      	ldr	r3, [sp, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038e:	f001 ffb3 	bl	80022f8 <LL_GPIO_Init>
 8000392:	6832      	ldr	r2, [r6, #0]
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000394:	4978      	ldr	r1, [pc, #480]	; (8000578 <main+0x330>)
 8000396:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800039a:	f022 0210 	bic.w	r2, r2, #16
 800039e:	f042 0210 	orr.w	r2, r2, #16
 80003a2:	6032      	str	r2, [r6, #0]
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80003a4:	6832      	ldr	r2, [r6, #0]
 80003a6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80003aa:	6032      	str	r2, [r6, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80003ac:	6832      	ldr	r2, [r6, #0]
 80003ae:	f042 0220 	orr.w	r2, r2, #32
 80003b2:	6032      	str	r2, [r6, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80003b4:	6832      	ldr	r2, [r6, #0]
 80003b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80003ba:	6032      	str	r2, [r6, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80003bc:	6832      	ldr	r2, [r6, #0]
 80003be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003c2:	6032      	str	r2, [r6, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80003c4:	6832      	ldr	r2, [r6, #0]
 80003c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80003ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80003ce:	6032      	str	r2, [r6, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80003d0:	6832      	ldr	r2, [r6, #0]
 80003d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80003d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80003da:	6032      	str	r2, [r6, #0]
  MODIFY_REG(SYSCFG->CFGR1, (Remap & 0x00FF0000U) >> 8U, (Remap & 0x0000FF00U));
 80003dc:	f8db 2000 	ldr.w	r2, [fp]
 80003e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80003e4:	f8cb 2000 	str.w	r2, [fp]
 80003e8:	4640      	mov	r0, r8
 80003ea:	aa08      	add	r2, sp, #32
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 80003ec:	e9cd 4408 	strd	r4, r4, [sp, #32]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 80003f0:	940b      	str	r4, [sp, #44]	; 0x2c
  LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 80003f2:	f001 feab 	bl	800214c <LL_DAC_Init>
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_EnableTrigger(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 80003f6:	f8d8 1000 	ldr.w	r1, [r8]
  huart2.Instance = USART2;
 80003fa:	4a60      	ldr	r2, [pc, #384]	; (800057c <main+0x334>)
 80003fc:	4b60      	ldr	r3, [pc, #384]	; (8000580 <main+0x338>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003fe:	6094      	str	r4, [r2, #8]
 8000400:	f041 0104 	orr.w	r1, r1, #4
  huart2.Init.BaudRate = 38400;
 8000404:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 8000408:	f8c8 1000 	str.w	r1, [r8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800040c:	210c      	movs	r1, #12
  huart2.Init.BaudRate = 38400;
 800040e:	6050      	str	r0, [r2, #4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000410:	4610      	mov	r0, r2
  huart2.Instance = USART2;
 8000412:	6013      	str	r3, [r2, #0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000414:	6151      	str	r1, [r2, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000416:	e9c2 4403 	strd	r4, r4, [r2, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800041a:	e9c2 4406 	strd	r4, r4, [r2, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800041e:	e9c2 4408 	strd	r4, r4, [r2, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000422:	f001 fcdb 	bl	8001ddc <HAL_UART_Init>
  SET_BIT(RCC->AHBENR, Periphs);
 8000426:	696a      	ldr	r2, [r5, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000428:	607c      	str	r4, [r7, #4]
 800042a:	ea42 0209 	orr.w	r2, r2, r9
 800042e:	616a      	str	r2, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000430:	696a      	ldr	r2, [r5, #20]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000432:	60bc      	str	r4, [r7, #8]
 8000434:	ea02 0209 	and.w	r2, r2, r9
 8000438:	9201      	str	r2, [sp, #4]
  hadc1.Instance = ADC1;
 800043a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800043e:	2204      	movs	r2, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000440:	4638      	mov	r0, r7
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000442:	617a      	str	r2, [r7, #20]
  (void)tmpreg;
 8000444:	9b01      	ldr	r3, [sp, #4]
  hadc1.Instance = ADC1;
 8000446:	6039      	str	r1, [r7, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000448:	613c      	str	r4, [r7, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800044a:	767c      	strb	r4, [r7, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800044c:	f887 4020 	strb.w	r4, [r7, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000450:	62fc      	str	r4, [r7, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000452:	60fc      	str	r4, [r7, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000454:	f887 4030 	strb.w	r4, [r7, #48]	; 0x30
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000458:	763c      	strb	r4, [r7, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800045a:	637c      	str	r4, [r7, #52]	; 0x34
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800045c:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 1;
 8000460:	f8c7 901c 	str.w	r9, [r7, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000464:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8000468:	9408      	str	r4, [sp, #32]
  ADC_ChannelConfTypeDef sConfig = {0};
 800046a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800046e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000472:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000476:	f000 f9cf 	bl	8000818 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800047a:	a908      	add	r1, sp, #32
 800047c:	4638      	mov	r0, r7
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800047e:	9408      	str	r4, [sp, #32]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000480:	f000 fd06 	bl	8000e90 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000484:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000486:	4638      	mov	r0, r7
 8000488:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800048a:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800048c:	e9cd 990c 	strd	r9, r9, [sp, #48]	; 0x30
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000490:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfig.Offset = 0;
 8000492:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000496:	f000 fb51 	bl	8000b3c <HAL_ADC_ConfigChannel>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800049a:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 800049e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 80004a2:	9410      	str	r4, [sp, #64]	; 0x40
  SET_BIT(RCC->APB1ENR, Periphs);
 80004a4:	69eb      	ldr	r3, [r5, #28]
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 80004a6:	4f37      	ldr	r7, [pc, #220]	; (8000584 <main+0x33c>)
 80004a8:	f043 0310 	orr.w	r3, r3, #16
 80004ac:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80004ae:	69eb      	ldr	r3, [r5, #28]
 80004b0:	f003 0310 	and.w	r3, r3, #16
 80004b4:	9308      	str	r3, [sp, #32]
 80004b6:	a90c      	add	r1, sp, #48	; 0x30
  TIM_InitStruct.Autoreload = 1499;
 80004b8:	f240 53db 	movw	r3, #1499	; 0x5db
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 80004bc:	4638      	mov	r0, r7
  (void)tmpreg;
 80004be:	9a08      	ldr	r2, [sp, #32]
  TIM_InitStruct.Autoreload = 1499;
 80004c0:	930e      	str	r3, [sp, #56]	; 0x38
  LL_TIM_Init(TIM6, &TIM_InitStruct);
 80004c2:	f001 ffc5 	bl	8002450 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80004c6:	683b      	ldr	r3, [r7, #0]
  DMA1_Channel3->CMAR  = ( uint32_t )&sine_table;
 80004c8:	492f      	ldr	r1, [pc, #188]	; (8000588 <main+0x340>)
  DMA1_Channel3->CPAR  = ( uint32_t )&( DAC1->DHR12R1 );
 80004ca:	4a30      	ldr	r2, [pc, #192]	; (800058c <main+0x344>)
 80004cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004d0:	603b      	str	r3, [r7, #0]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004d8:	f043 0320 	orr.w	r3, r3, #32
 80004dc:	607b      	str	r3, [r7, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004e4:	60bb      	str	r3, [r7, #8]
  RCC->AHBENR   |= ( RCC_AHBENR_GPIOAEN |
 80004e6:	696b      	ldr	r3, [r5, #20]
 80004e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ec:	ea43 0309 	orr.w	r3, r3, r9
 80004f0:	616b      	str	r3, [r5, #20]
  RCC->APB1ENR  |= ( RCC_APB1ENR_DAC1EN |
 80004f2:	69eb      	ldr	r3, [r5, #28]
 80004f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80004f8:	f043 0310 	orr.w	r3, r3, #16
 80004fc:	61eb      	str	r3, [r5, #28]
  RCC->APB2ENR  |= RCC_APB2ENR_SYSCFGEN;
 80004fe:	69ab      	ldr	r3, [r5, #24]
 8000500:	ea43 0309 	orr.w	r3, r3, r9
 8000504:	61ab      	str	r3, [r5, #24]
  GPIOA->MODER    &= ~( 0x3 << ( 4 * 2 ) );
 8000506:	f8da 3000 	ldr.w	r3, [sl]
 800050a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800050e:	f8ca 3000 	str.w	r3, [sl]
  GPIOA->MODER    |=  ( 0x3 << ( 4 * 2 ) );
 8000512:	f8da 3000 	ldr.w	r3, [sl]
 8000516:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800051a:	f8ca 3000 	str.w	r3, [sl]
  SYSCFG->CFGR1 |=  ( SYSCFG_CFGR1_TIM6DAC1Ch1_DMA_RMP );
 800051e:	f8db 3000 	ldr.w	r3, [fp]
 8000522:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000526:	f8cb 3000 	str.w	r3, [fp]
  DMA1_Channel3->CCR &= ~( DMA_CCR_MEM2MEM |
 800052a:	6833      	ldr	r3, [r6, #0]
 800052c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000530:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8000534:	6033      	str	r3, [r6, #0]
  DMA1_Channel3->CCR |=  ( ( 0x2 << DMA_CCR_PL_Pos ) |
 8000536:	6833      	ldr	r3, [r6, #0]
 8000538:	f443 5316 	orr.w	r3, r3, #9600	; 0x2580
 800053c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  DMA1_Channel3->CNDTR = ( uint16_t )sine_table_size;
 8000540:	f44f 7080 	mov.w	r0, #256	; 0x100
  DMA1_Channel3->CCR |=  ( ( 0x2 << DMA_CCR_PL_Pos ) |
 8000544:	6033      	str	r3, [r6, #0]
  DMA1_Channel3->CMAR  = ( uint32_t )&sine_table;
 8000546:	60f1      	str	r1, [r6, #12]
  DMA1_Channel3->CPAR  = ( uint32_t )&( DAC1->DHR12R1 );
 8000548:	60b2      	str	r2, [r6, #8]
  DMA1_Channel3->CNDTR = ( uint16_t )sine_table_size;
 800054a:	6070      	str	r0, [r6, #4]
  DMA1_Channel3->CCR |= ( DMA_CCR_EN );
 800054c:	6833      	ldr	r3, [r6, #0]
 800054e:	ea43 0309 	orr.w	r3, r3, r9
 8000552:	6033      	str	r3, [r6, #0]
  TIM6->PSC  =  ( 0x0000 );
 8000554:	62bc      	str	r4, [r7, #40]	; 0x28
  TIM6->CR2 &= ~( TIM_CR2_MMS );
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800055c:	607b      	str	r3, [r7, #4]
  TIM6->CR2 |=  ( 0x2 << TIM_CR2_MMS_Pos );
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f043 0320 	orr.w	r3, r3, #32
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	e017      	b.n	8000598 <main+0x350>
 8000568:	40021000 	.word	0x40021000
 800056c:	48000800 	.word	0x48000800
 8000570:	40020030 	.word	0x40020030
 8000574:	20000028 	.word	0x20000028
 8000578:	02100001 	.word	0x02100001
 800057c:	20000078 	.word	0x20000078
 8000580:	40004400 	.word	0x40004400
 8000584:	40001000 	.word	0x40001000
 8000588:	080025b4 	.word	0x080025b4
 800058c:	40007408 	.word	0x40007408
 8000590:	40010000 	.word	0x40010000
 8000594:	40007400 	.word	0x40007400
  TIM6->CR1 |=  ( TIM_CR1_CEN );
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	ea43 0309 	orr.w	r3, r3, r9
 800059e:	603b      	str	r3, [r7, #0]
  DAC1->CR  &= ~( DAC_CR_TSEL1 );
 80005a0:	f8d8 3000 	ldr.w	r3, [r8]
 80005a4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80005a8:	f8c8 3000 	str.w	r3, [r8]
  DAC1->CR  |=  ( DAC_CR_DMAEN1 );
 80005ac:	f8d8 3000 	ldr.w	r3, [r8]
 80005b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005b4:	f8c8 3000 	str.w	r3, [r8]
  DAC1->CR  |=  ( DAC_CR_EN1 );
 80005b8:	f8d8 3000 	ldr.w	r3, [r8]
 80005bc:	ea43 0309 	orr.w	r3, r3, r9
 80005c0:	f8c8 3000 	str.w	r3, [r8]
  HAL_Delay(1);
 80005c4:	4648      	mov	r0, r9
 80005c6:	f000 f915 	bl	80007f4 <HAL_Delay>
  DAC1->CR  |=  ( DAC_CR_TEN1 );
 80005ca:	f8d8 3000 	ldr.w	r3, [r8]
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	f8c8 3000 	str.w	r3, [r8]
 80005d6:	e7fe      	b.n	80005d6 <main+0x38e>

080005d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <HAL_MspInit+0x2c>)
 80005da:	699a      	ldr	r2, [r3, #24]
 80005dc:	f042 0201 	orr.w	r2, r2, #1
 80005e0:	619a      	str	r2, [r3, #24]
 80005e2:	699a      	ldr	r2, [r3, #24]
{
 80005e4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	f002 0201 	and.w	r2, r2, #1
 80005ea:	9200      	str	r2, [sp, #0]
 80005ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	69da      	ldr	r2, [r3, #28]
 80005f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005f4:	61da      	str	r2, [r3, #28]
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000600:	b002      	add	sp, #8
 8000602:	4770      	bx	lr
 8000604:	40021000 	.word	0x40021000

08000608 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000608:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800060a:	6802      	ldr	r2, [r0, #0]
{
 800060c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8000610:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000618:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800061c:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 800061e:	d001      	beq.n	8000624 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000620:	b008      	add	sp, #32
 8000622:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000624:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000628:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC12_CLK_ENABLE();
 800062e:	695a      	ldr	r2, [r3, #20]
 8000630:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000634:	615a      	str	r2, [r3, #20]
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800063c:	9201      	str	r2, [sp, #4]
 800063e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	695a      	ldr	r2, [r3, #20]
 8000642:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800064e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000650:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000652:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000658:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065e:	f000 fd07 	bl	8001070 <HAL_GPIO_Init>
}
 8000662:	b008      	add	sp, #32
 8000664:	bd10      	pop	{r4, pc}
 8000666:	bf00      	nop

08000668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000668:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800066a:	6801      	ldr	r1, [r0, #0]
 800066c:	4a17      	ldr	r2, [pc, #92]	; (80006cc <HAL_UART_MspInit+0x64>)
{
 800066e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8000672:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000678:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800067c:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 800067e:	d001      	beq.n	8000684 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000680:	b009      	add	sp, #36	; 0x24
 8000682:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000684:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000688:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800068e:	69da      	ldr	r2, [r3, #28]
 8000690:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000694:	61da      	str	r2, [r3, #28]
 8000696:	69da      	ldr	r2, [r3, #28]
 8000698:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800069c:	9201      	str	r2, [sp, #4]
 800069e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	695a      	ldr	r2, [r3, #20]
 80006a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80006a6:	615a      	str	r2, [r3, #20]
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006b2:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006b4:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006bc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	f000 fcd5 	bl	8001070 <HAL_GPIO_Init>
}
 80006c6:	b009      	add	sp, #36	; 0x24
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	bf00      	nop
 80006cc:	40004400 	.word	0x40004400

080006d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop

080006d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d4:	e7fe      	b.n	80006d4 <HardFault_Handler>
 80006d6:	bf00      	nop

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	e7fe      	b.n	80006d8 <MemManage_Handler>
 80006da:	bf00      	nop

080006dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006dc:	e7fe      	b.n	80006dc <BusFault_Handler>
 80006de:	bf00      	nop

080006e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e0:	e7fe      	b.n	80006e0 <UsageFault_Handler>
 80006e2:	bf00      	nop

080006e4 <SVC_Handler>:
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop

080006e8 <DebugMon_Handler>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <PendSV_Handler>:
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop

080006f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f0:	f000 b86e 	b.w	80007d0 <HAL_IncTick>

080006f4 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <SystemInit+0x18>)
 80006f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000706:	6099      	str	r1, [r3, #8]
#endif
}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000748 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000714:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000716:	e003      	b.n	8000720 <LoopCopyDataInit>

08000718 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800071a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800071c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800071e:	3104      	adds	r1, #4

08000720 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000724:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000726:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000728:	d3f6      	bcc.n	8000718 <CopyDataInit>
	ldr	r2, =_sbss
 800072a:	4a0b      	ldr	r2, [pc, #44]	; (8000758 <LoopForever+0x12>)
	b	LoopFillZerobss
 800072c:	e002      	b.n	8000734 <LoopFillZerobss>

0800072e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800072e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000730:	f842 3b04 	str.w	r3, [r2], #4

08000734 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <LoopForever+0x16>)
	cmp	r2, r3
 8000736:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000738:	d3f9      	bcc.n	800072e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800073a:	f7ff ffdb 	bl	80006f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800073e:	f001 ff01 	bl	8002544 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000742:	f7ff fd81 	bl	8000248 <main>

08000746 <LoopForever>:

LoopForever:
    b LoopForever
 8000746:	e7fe      	b.n	8000746 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000748:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800074c:	080027f8 	.word	0x080027f8
	ldr	r0, =_sdata
 8000750:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000754:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000758:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800075c:	200000fc 	.word	0x200000fc

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>
	...

08000764 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <HAL_InitTick+0x3c>)
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <HAL_InitTick+0x40>)
 800076a:	7812      	ldrb	r2, [r2, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
{
 800076e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000770:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000774:	fbb0 f0f2 	udiv	r0, r0, r2
 8000778:	fbb3 f0f0 	udiv	r0, r3, r0
 800077c:	f000 fc5e 	bl	800103c <HAL_SYSTICK_Config>
 8000780:	b908      	cbnz	r0, 8000786 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000782:	2d0f      	cmp	r5, #15
 8000784:	d901      	bls.n	800078a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000786:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000788:	bd38      	pop	{r3, r4, r5, pc}
 800078a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078c:	4602      	mov	r2, r0
 800078e:	4629      	mov	r1, r5
 8000790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000794:	f000 fc1c 	bl	8000fd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_InitTick+0x44>)
 800079a:	4620      	mov	r0, r4
 800079c:	601d      	str	r5, [r3, #0]
}
 800079e:	bd38      	pop	{r3, r4, r5, pc}
 80007a0:	20000004 	.word	0x20000004
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000008 	.word	0x20000008

080007ac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ac:	4a07      	ldr	r2, [pc, #28]	; (80007cc <HAL_Init+0x20>)
{
 80007ae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b0:	6813      	ldr	r3, [r2, #0]
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007b8:	2003      	movs	r0, #3
 80007ba:	f000 fbf7 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff ffd0 	bl	8000764 <HAL_InitTick>
  HAL_MspInit();
 80007c4:	f7ff ff08 	bl	80005d8 <HAL_MspInit>
}
 80007c8:	2000      	movs	r0, #0
 80007ca:	bd08      	pop	{r3, pc}
 80007cc:	40022000 	.word	0x40022000

080007d0 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80007d0:	4a03      	ldr	r2, [pc, #12]	; (80007e0 <HAL_IncTick+0x10>)
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <HAL_IncTick+0x14>)
 80007d4:	6811      	ldr	r1, [r2, #0]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	440b      	add	r3, r1
 80007da:	6013      	str	r3, [r2, #0]
}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	200000f8 	.word	0x200000f8
 80007e4:	20000004 	.word	0x20000004

080007e8 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80007e8:	4b01      	ldr	r3, [pc, #4]	; (80007f0 <HAL_GetTick+0x8>)
 80007ea:	6818      	ldr	r0, [r3, #0]
}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	200000f8 	.word	0x200000f8

080007f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f4:	b538      	push	{r3, r4, r5, lr}
 80007f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80007f8:	f7ff fff6 	bl	80007e8 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007fc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80007fe:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000800:	d002      	beq.n	8000808 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <HAL_Delay+0x20>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000808:	f7ff ffee 	bl	80007e8 <HAL_GetTick>
 800080c:	1b40      	subs	r0, r0, r5
 800080e:	42a0      	cmp	r0, r4
 8000810:	d3fa      	bcc.n	8000808 <HAL_Delay+0x14>
  {
  }
}
 8000812:	bd38      	pop	{r3, r4, r5, pc}
 8000814:	20000004 	.word	0x20000004

08000818 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0U;
 800081c:	2300      	movs	r3, #0
 800081e:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000820:	2800      	cmp	r0, #0
 8000822:	f000 809d 	beq.w	8000960 <HAL_ADC_Init+0x148>
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000826:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000828:	f013 0310 	ands.w	r3, r3, #16
 800082c:	4604      	mov	r4, r0
 800082e:	d118      	bne.n	8000862 <HAL_ADC_Init+0x4a>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000830:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000832:	2d00      	cmp	r5, #0
 8000834:	f000 8097 	beq.w	8000966 <HAL_ADC_Init+0x14e>
 8000838:	6801      	ldr	r1, [r0, #0]
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800083a:	688a      	ldr	r2, [r1, #8]
 800083c:	00d2      	lsls	r2, r2, #3
 800083e:	f140 8083 	bpl.w	8000948 <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000842:	688a      	ldr	r2, [r1, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000844:	0096      	lsls	r6, r2, #2
 8000846:	d47f      	bmi.n	8000948 <HAL_ADC_Init+0x130>
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000848:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800084a:	06d0      	lsls	r0, r2, #27
 800084c:	f140 8099 	bpl.w	8000982 <HAL_ADC_Init+0x16a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000850:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000852:	f023 0312 	bic.w	r3, r3, #18
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	6423      	str	r3, [r4, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800085c:	2001      	movs	r0, #1
  }
  
  
  /* Return function status */
  return tmp_hal_status;
}
 800085e:	b002      	add	sp, #8
 8000860:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000862:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000864:	06dd      	lsls	r5, r3, #27
 8000866:	d4f3      	bmi.n	8000850 <HAL_ADC_Init+0x38>
 8000868:	6801      	ldr	r1, [r0, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800086a:	688b      	ldr	r3, [r1, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800086c:	f013 0304 	ands.w	r3, r3, #4
 8000870:	d1ee      	bne.n	8000850 <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 8000872:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000874:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000878:	f042 0202 	orr.w	r2, r2, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800087c:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8000880:	6422      	str	r2, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000882:	f000 80ea 	beq.w	8000a5a <HAL_ADC_Init+0x242>
 8000886:	4aa5      	ldr	r2, [pc, #660]	; (8000b1c <HAL_ADC_Init+0x304>)
 8000888:	4291      	cmp	r1, r2
 800088a:	d07e      	beq.n	800098a <HAL_ADC_Init+0x172>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800088c:	48a4      	ldr	r0, [pc, #656]	; (8000b20 <HAL_ADC_Init+0x308>)
 800088e:	4281      	cmp	r1, r0
 8000890:	f000 80e6 	beq.w	8000a60 <HAL_ADC_Init+0x248>
 8000894:	4aa3      	ldr	r2, [pc, #652]	; (8000b24 <HAL_ADC_Init+0x30c>)
 8000896:	4291      	cmp	r1, r2
 8000898:	f000 80e3 	beq.w	8000a62 <HAL_ADC_Init+0x24a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800089c:	688a      	ldr	r2, [r1, #8]
 800089e:	f002 0203 	and.w	r2, r2, #3
 80008a2:	2a01      	cmp	r2, #1
 80008a4:	f000 8134 	beq.w	8000b10 <HAL_ADC_Init+0x2f8>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80008a8:	4d9f      	ldr	r5, [pc, #636]	; (8000b28 <HAL_ADC_Init+0x310>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 80008aa:	68aa      	ldr	r2, [r5, #8]
 80008ac:	6860      	ldr	r0, [r4, #4]
 80008ae:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80008b2:	4302      	orrs	r2, r0
 80008b4:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80008b6:	e9d4 5202 	ldrd	r5, r2, [r4, #8]
 80008ba:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80008bc:	7e60      	ldrb	r0, [r4, #25]
 80008be:	432a      	orrs	r2, r5
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008c0:	f894 5020 	ldrb.w	r5, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80008c4:	2e01      	cmp	r6, #1
 80008c6:	bf18      	it	ne
 80008c8:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 80008cc:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008d0:	2d01      	cmp	r5, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80008d2:	ea43 0302 	orr.w	r3, r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008d6:	f000 8096 	beq.w	8000a06 <HAL_ADC_Init+0x1ee>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80008da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80008dc:	2a01      	cmp	r2, #1
 80008de:	d00d      	beq.n	80008fc <HAL_ADC_Init+0xe4>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80008e0:	488f      	ldr	r0, [pc, #572]	; (8000b20 <HAL_ADC_Init+0x308>)
 80008e2:	4281      	cmp	r1, r0
 80008e4:	f000 80a4 	beq.w	8000a30 <HAL_ADC_Init+0x218>
 80008e8:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80008ec:	4281      	cmp	r1, r0
 80008ee:	f000 809f 	beq.w	8000a30 <HAL_ADC_Init+0x218>
 80008f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80008f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80008f8:	4303      	orrs	r3, r0
 80008fa:	4313      	orrs	r3, r2
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80008fc:	688a      	ldr	r2, [r1, #8]
 80008fe:	f012 0f0c 	tst.w	r2, #12
 8000902:	d10c      	bne.n	800091e <HAL_ADC_Init+0x106>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000904:	68c8      	ldr	r0, [r1, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000906:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800090a:	7e25      	ldrb	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800090c:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000910:	0052      	lsls	r2, r2, #1
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000912:	f020 0002 	bic.w	r0, r0, #2
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000916:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800091a:	60c8      	str	r0, [r1, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800091c:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR,
 800091e:	68cd      	ldr	r5, [r1, #12]
 8000920:	4a82      	ldr	r2, [pc, #520]	; (8000b2c <HAL_ADC_Init+0x314>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000922:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8000924:	402a      	ands	r2, r5
 8000926:	4313      	orrs	r3, r2
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000928:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 800092a:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800092c:	d073      	beq.n	8000a16 <HAL_ADC_Init+0x1fe>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800092e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000930:	f023 030f 	bic.w	r3, r3, #15
 8000934:	630b      	str	r3, [r1, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000936:	2000      	movs	r0, #0
 8000938:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800093a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800093c:	f023 0303 	bic.w	r3, r3, #3
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6423      	str	r3, [r4, #64]	; 0x40
 8000946:	e78a      	b.n	800085e <HAL_ADC_Init+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8000948:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800094a:	f023 0312 	bic.w	r3, r3, #18
 800094e:	f043 0310 	orr.w	r3, r3, #16
 8000952:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000954:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800095c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800095e:	e777      	b.n	8000850 <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 8000960:	2001      	movs	r0, #1
}
 8000962:	b002      	add	sp, #8
 8000964:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8000966:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->InjectionConfig.ContextQueue = 0U;
 8000968:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      hadc->Lock = HAL_UNLOCKED;
 800096c:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8000970:	f7ff fe4a 	bl	8000608 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000974:	6821      	ldr	r1, [r4, #0]
 8000976:	688a      	ldr	r2, [r1, #8]
 8000978:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800097c:	d016      	beq.n	80009ac <HAL_ADC_Init+0x194>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800097e:	462b      	mov	r3, r5
 8000980:	e75b      	b.n	800083a <HAL_ADC_Init+0x22>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000982:	2b00      	cmp	r3, #0
 8000984:	f47f af64 	bne.w	8000850 <HAL_ADC_Init+0x38>
 8000988:	e76f      	b.n	800086a <HAL_ADC_Init+0x52>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800098a:	4d69      	ldr	r5, [pc, #420]	; (8000b30 <HAL_ADC_Init+0x318>)
 800098c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000990:	688a      	ldr	r2, [r1, #8]
 8000992:	f002 0203 	and.w	r2, r2, #3
 8000996:	2a01      	cmp	r2, #1
 8000998:	d045      	beq.n	8000a26 <HAL_ADC_Init+0x20e>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800099a:	6882      	ldr	r2, [r0, #8]
 800099c:	f002 0203 	and.w	r2, r2, #3
 80009a0:	2a01      	cmp	r2, #1
 80009a2:	d182      	bne.n	80008aa <HAL_ADC_Init+0x92>
 80009a4:	6802      	ldr	r2, [r0, #0]
 80009a6:	07d2      	lsls	r2, r2, #31
 80009a8:	d485      	bmi.n	80008b6 <HAL_ADC_Init+0x9e>
 80009aa:	e77e      	b.n	80008aa <HAL_ADC_Init+0x92>
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80009ac:	6888      	ldr	r0, [r1, #8]
 80009ae:	f000 0003 	and.w	r0, r0, #3
 80009b2:	2801      	cmp	r0, #1
 80009b4:	d062      	beq.n	8000a7c <HAL_ADC_Init+0x264>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009b8:	06dd      	lsls	r5, r3, #27
 80009ba:	d473      	bmi.n	8000aa4 <HAL_ADC_Init+0x28c>
          ADC_STATE_CLR_SET(hadc->State,
 80009bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009be:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <HAL_ADC_Init+0x31c>)
 80009c0:	485d      	ldr	r0, [pc, #372]	; (8000b38 <HAL_ADC_Init+0x320>)
 80009c2:	681b      	ldr	r3, [r3, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80009c4:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80009c8:	f022 0202 	bic.w	r2, r2, #2
 80009cc:	f042 0202 	orr.w	r2, r2, #2
 80009d0:	6422      	str	r2, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80009d2:	688a      	ldr	r2, [r1, #8]
 80009d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80009d8:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009da:	fba0 2303 	umull	r2, r3, r0, r3
 80009de:	0c9b      	lsrs	r3, r3, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80009e0:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80009e6:	005b      	lsls	r3, r3, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80009e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009ec:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009ee:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80009f0:	9b01      	ldr	r3, [sp, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f43f af21 	beq.w	800083a <HAL_ADC_Init+0x22>
            wait_loop_index--;
 80009f8:	9b01      	ldr	r3, [sp, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80009fe:	9b01      	ldr	r3, [sp, #4]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1f9      	bne.n	80009f8 <HAL_ADC_Init+0x1e0>
 8000a04:	e719      	b.n	800083a <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a06:	bb70      	cbnz	r0, 8000a66 <HAL_ADC_Init+0x24e>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000a08:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a0a:	3a01      	subs	r2, #1
 8000a0c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a14:	e761      	b.n	80008da <HAL_ADC_Init+0xc2>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000a16:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8000a18:	69e3      	ldr	r3, [r4, #28]
 8000a1a:	f022 020f 	bic.w	r2, r2, #15
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	4313      	orrs	r3, r2
 8000a22:	630b      	str	r3, [r1, #48]	; 0x30
 8000a24:	e787      	b.n	8000936 <HAL_ADC_Init+0x11e>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000a26:	680a      	ldr	r2, [r1, #0]
 8000a28:	07d6      	lsls	r6, r2, #31
 8000a2a:	f53f af44 	bmi.w	80008b6 <HAL_ADC_Init+0x9e>
 8000a2e:	e7b4      	b.n	800099a <HAL_ADC_Init+0x182>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000a30:	f5b2 7f30 	cmp.w	r2, #704	; 0x2c0
 8000a34:	d038      	beq.n	8000aa8 <HAL_ADC_Init+0x290>
 8000a36:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000a3a:	d051      	beq.n	8000ae0 <HAL_ADC_Init+0x2c8>
 8000a3c:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
 8000a40:	d051      	beq.n	8000ae6 <HAL_ADC_Init+0x2ce>
 8000a42:	f5b2 5f8a 	cmp.w	r2, #4416	; 0x1140
 8000a46:	d051      	beq.n	8000aec <HAL_ADC_Init+0x2d4>
 8000a48:	f5b2 5f84 	cmp.w	r2, #4224	; 0x1080
 8000a4c:	d051      	beq.n	8000af2 <HAL_ADC_Init+0x2da>
 8000a4e:	f5b2 5f86 	cmp.w	r2, #4288	; 0x10c0
 8000a52:	bf08      	it	eq
 8000a54:	f44f 72c0 	moveq.w	r2, #384	; 0x180
 8000a58:	e74d      	b.n	80008f6 <HAL_ADC_Init+0xde>
 8000a5a:	4830      	ldr	r0, [pc, #192]	; (8000b1c <HAL_ADC_Init+0x304>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a5c:	4d34      	ldr	r5, [pc, #208]	; (8000b30 <HAL_ADC_Init+0x318>)
 8000a5e:	e797      	b.n	8000990 <HAL_ADC_Init+0x178>
 8000a60:	4830      	ldr	r0, [pc, #192]	; (8000b24 <HAL_ADC_Init+0x30c>)
 8000a62:	4d31      	ldr	r5, [pc, #196]	; (8000b28 <HAL_ADC_Init+0x310>)
 8000a64:	e794      	b.n	8000990 <HAL_ADC_Init+0x178>
        ADC_STATE_CLR_SET(hadc->State,
 8000a66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000a68:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8000a6c:	f042 0220 	orr.w	r2, r2, #32
 8000a70:	6422      	str	r2, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a72:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000a74:	f042 0201 	orr.w	r2, r2, #1
 8000a78:	6462      	str	r2, [r4, #68]	; 0x44
 8000a7a:	e72e      	b.n	80008da <HAL_ADC_Init+0xc2>
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000a7c:	680b      	ldr	r3, [r1, #0]
 8000a7e:	f013 0301 	ands.w	r3, r3, #1
 8000a82:	d028      	beq.n	8000ad6 <HAL_ADC_Init+0x2be>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000a84:	688b      	ldr	r3, [r1, #8]
 8000a86:	f003 030d 	and.w	r3, r3, #13
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d00f      	beq.n	8000aae <HAL_ADC_Init+0x296>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a90:	f043 0310 	orr.w	r3, r3, #16
 8000a94:	6423      	str	r3, [r4, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6463      	str	r3, [r4, #68]	; 0x44
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      
      return HAL_ERROR;
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	e6ca      	b.n	800083a <HAL_ADC_Init+0x22>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	e6c8      	b.n	800083a <HAL_ADC_Init+0x22>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000aa8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000aac:	e723      	b.n	80008f6 <HAL_ADC_Init+0xde>
      __HAL_ADC_DISABLE(hadc);
 8000aae:	688b      	ldr	r3, [r1, #8]
 8000ab0:	2203      	movs	r2, #3
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	608b      	str	r3, [r1, #8]
 8000ab8:	600a      	str	r2, [r1, #0]
    tickstart = HAL_GetTick();
 8000aba:	f7ff fe95 	bl	80007e8 <HAL_GetTick>
 8000abe:	4605      	mov	r5, r0
 8000ac0:	e004      	b.n	8000acc <HAL_ADC_Init+0x2b4>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ac2:	f7ff fe91 	bl	80007e8 <HAL_GetTick>
 8000ac6:	1b40      	subs	r0, r0, r5
 8000ac8:	2802      	cmp	r0, #2
 8000aca:	d815      	bhi.n	8000af8 <HAL_ADC_Init+0x2e0>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000acc:	6821      	ldr	r1, [r4, #0]
 8000ace:	688b      	ldr	r3, [r1, #8]
 8000ad0:	f013 0301 	ands.w	r3, r3, #1
 8000ad4:	d1f5      	bne.n	8000ac2 <HAL_ADC_Init+0x2aa>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ad6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ad8:	06d0      	lsls	r0, r2, #27
 8000ada:	f53f aeae 	bmi.w	800083a <HAL_ADC_Init+0x22>
 8000ade:	e76d      	b.n	80009bc <HAL_ADC_Init+0x1a4>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000ae0:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8000ae4:	e707      	b.n	80008f6 <HAL_ADC_Init+0xde>
 8000ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aea:	e704      	b.n	80008f6 <HAL_ADC_Init+0xde>
 8000aec:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000af0:	e701      	b.n	80008f6 <HAL_ADC_Init+0xde>
 8000af2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000af6:	e6fe      	b.n	80008f6 <HAL_ADC_Init+0xde>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000af8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000afa:	6821      	ldr	r1, [r4, #0]
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6463      	str	r3, [r4, #68]	; 0x44
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e694      	b.n	800083a <HAL_ADC_Init+0x22>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b10:	680a      	ldr	r2, [r1, #0]
 8000b12:	07d2      	lsls	r2, r2, #31
 8000b14:	f53f aecf 	bmi.w	80008b6 <HAL_ADC_Init+0x9e>
 8000b18:	e6c6      	b.n	80008a8 <HAL_ADC_Init+0x90>
 8000b1a:	bf00      	nop
 8000b1c:	50000100 	.word	0x50000100
 8000b20:	50000400 	.word	0x50000400
 8000b24:	50000500 	.word	0x50000500
 8000b28:	50000700 	.word	0x50000700
 8000b2c:	fff0c007 	.word	0xfff0c007
 8000b30:	50000300 	.word	0x50000300
 8000b34:	20000000 	.word	0x20000000
 8000b38:	431bde83 	.word	0x431bde83

08000b3c <HAL_ADC_ConfigChannel>:
{
 8000b3c:	b4f0      	push	{r4, r5, r6, r7}
 8000b3e:	4602      	mov	r2, r0
 8000b40:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 8000b42:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
  __IO uint32_t wait_loop_index = 0U;
 8000b46:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8000b48:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8000b4a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8000b4c:	f000 80de 	beq.w	8000d0c <HAL_ADC_ConfigChannel+0x1d0>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b50:	6813      	ldr	r3, [r2, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000b52:	68cc      	ldr	r4, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b54:	689d      	ldr	r5, [r3, #8]
  __HAL_LOCK(hadc);
 8000b56:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b58:	076d      	lsls	r5, r5, #29
  __HAL_LOCK(hadc);
 8000b5a:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b5e:	d437      	bmi.n	8000bd0 <HAL_ADC_ConfigChannel+0x94>
 8000b60:	e9d1 5600 	ldrd	r5, r6, [r1]
 8000b64:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    if (sConfig->Rank < 5U)
 8000b68:	2e04      	cmp	r6, #4
 8000b6a:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8000b6e:	f200 80a3 	bhi.w	8000cb8 <HAL_ADC_ConfigChannel+0x17c>
      MODIFY_REG(hadc->Instance->SQR1,
 8000b72:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8000b74:	271f      	movs	r7, #31
 8000b76:	4087      	lsls	r7, r0
 8000b78:	ea26 0607 	bic.w	r6, r6, r7
 8000b7c:	fa05 f000 	lsl.w	r0, r5, r0
 8000b80:	4330      	orrs	r0, r6
 8000b82:	6318      	str	r0, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000b84:	6898      	ldr	r0, [r3, #8]
 8000b86:	f010 0f0c 	tst.w	r0, #12
 8000b8a:	d14f      	bne.n	8000c2c <HAL_ADC_ConfigChannel+0xf0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b8c:	2d09      	cmp	r5, #9
 8000b8e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8000b92:	6888      	ldr	r0, [r1, #8]
 8000b94:	f200 809f 	bhi.w	8000cd6 <HAL_ADC_ConfigChannel+0x19a>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b98:	695f      	ldr	r7, [r3, #20]
 8000b9a:	f04f 0c07 	mov.w	ip, #7
 8000b9e:	fa0c fc06 	lsl.w	ip, ip, r6
 8000ba2:	40b0      	lsls	r0, r6
 8000ba4:	ea27 060c 	bic.w	r6, r7, ip
 8000ba8:	4330      	orrs	r0, r6
 8000baa:	6158      	str	r0, [r3, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000bac:	e9d1 6704 	ldrd	r6, r7, [r1, #16]
 8000bb0:	68d8      	ldr	r0, [r3, #12]
 8000bb2:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8000bb6:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 8000bb8:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000bba:	fa07 f000 	lsl.w	r0, r7, r0
 8000bbe:	06af      	lsls	r7, r5, #26
    switch (sConfig->OffsetNumber)
 8000bc0:	2e03      	cmp	r6, #3
 8000bc2:	d80f      	bhi.n	8000be4 <HAL_ADC_ConfigChannel+0xa8>
 8000bc4:	e8df f016 	tbh	[pc, r6, lsl #1]
 8000bc8:	00f200fd 	.word	0x00f200fd
 8000bcc:	00dc00e7 	.word	0x00dc00e7
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bd0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000bd2:	f043 0320 	orr.w	r3, r3, #32
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8000bde:	b002      	add	sp, #8
 8000be0:	bcf0      	pop	{r4, r5, r6, r7}
 8000be2:	4770      	bx	lr
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000be4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000be6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000bea:	42b8      	cmp	r0, r7
 8000bec:	d103      	bne.n	8000bf6 <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000bee:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8000bf0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	6618      	str	r0, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000bf6:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8000bf8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000bfc:	42b8      	cmp	r0, r7
 8000bfe:	d103      	bne.n	8000c08 <HAL_ADC_ConfigChannel+0xcc>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000c00:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8000c02:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000c06:	6658      	str	r0, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c08:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000c0a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000c0e:	42b8      	cmp	r0, r7
 8000c10:	d103      	bne.n	8000c1a <HAL_ADC_ConfigChannel+0xde>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000c12:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8000c14:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000c18:	6698      	str	r0, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000c1a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000c1c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8000c20:	42b8      	cmp	r0, r7
 8000c22:	d103      	bne.n	8000c2c <HAL_ADC_ConfigChannel+0xf0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000c24:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000c26:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8000c2a:	66d8      	str	r0, [r3, #108]	; 0x6c
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c2c:	6898      	ldr	r0, [r3, #8]
 8000c2e:	f000 0003 	and.w	r0, r0, #3
 8000c32:	2801      	cmp	r0, #1
 8000c34:	d06e      	beq.n	8000d14 <HAL_ADC_ConfigChannel+0x1d8>
 8000c36:	2001      	movs	r0, #1
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000c38:	2c01      	cmp	r4, #1
 8000c3a:	fa00 f005 	lsl.w	r0, r0, r5
 8000c3e:	d06d      	beq.n	8000d1c <HAL_ADC_ConfigChannel+0x1e0>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000c40:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000c44:	ea21 0000 	bic.w	r0, r1, r0
 8000c48:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c50:	d07d      	beq.n	8000d4e <HAL_ADC_ConfigChannel+0x212>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <HAL_ADC_ConfigChannel+0x334>)
 8000c54:	4987      	ldr	r1, [pc, #540]	; (8000e74 <HAL_ADC_ConfigChannel+0x338>)
 8000c56:	4888      	ldr	r0, [pc, #544]	; (8000e78 <HAL_ADC_ConfigChannel+0x33c>)
 8000c58:	42a3      	cmp	r3, r4
 8000c5a:	bf08      	it	eq
 8000c5c:	4601      	moveq	r1, r0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000c5e:	2d10      	cmp	r5, #16
 8000c60:	d071      	beq.n	8000d46 <HAL_ADC_ConfigChannel+0x20a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000c62:	2d11      	cmp	r5, #17
 8000c64:	d04e      	beq.n	8000d04 <HAL_ADC_ConfigChannel+0x1c8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000c66:	2d12      	cmp	r5, #18
 8000c68:	d124      	bne.n	8000cb4 <HAL_ADC_ConfigChannel+0x178>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000c6a:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000c6c:	0240      	lsls	r0, r0, #9
 8000c6e:	d421      	bmi.n	8000cb4 <HAL_ADC_ConfigChannel+0x178>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c74:	f000 80e4 	beq.w	8000e40 <HAL_ADC_ConfigChannel+0x304>
 8000c78:	487d      	ldr	r0, [pc, #500]	; (8000e70 <HAL_ADC_ConfigChannel+0x334>)
 8000c7a:	4283      	cmp	r3, r0
 8000c7c:	f000 80ec 	beq.w	8000e58 <HAL_ADC_ConfigChannel+0x31c>
 8000c80:	4c7e      	ldr	r4, [pc, #504]	; (8000e7c <HAL_ADC_ConfigChannel+0x340>)
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	f000 80a8 	beq.w	8000dd8 <HAL_ADC_ConfigChannel+0x29c>
 8000c88:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8000c8c:	4283      	cmp	r3, r0
 8000c8e:	f000 80a4 	beq.w	8000dda <HAL_ADC_ConfigChannel+0x29e>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000c92:	6898      	ldr	r0, [r3, #8]
 8000c94:	f000 0003 	and.w	r0, r0, #3
 8000c98:	2801      	cmp	r0, #1
 8000c9a:	f000 80e4 	beq.w	8000e66 <HAL_ADC_ConfigChannel+0x32a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000c9e:	2d10      	cmp	r5, #16
 8000ca0:	d008      	beq.n	8000cb4 <HAL_ADC_ConfigChannel+0x178>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000ca2:	2d11      	cmp	r5, #17
 8000ca4:	f000 80ce 	beq.w	8000e44 <HAL_ADC_ConfigChannel+0x308>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000ca8:	2d12      	cmp	r5, #18
 8000caa:	d103      	bne.n	8000cb4 <HAL_ADC_ConfigChannel+0x178>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000cac:	688b      	ldr	r3, [r1, #8]
 8000cae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cb2:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	e78f      	b.n	8000bd8 <HAL_ADC_ConfigChannel+0x9c>
    else if (sConfig->Rank < 10U)
 8000cb8:	2e09      	cmp	r6, #9
 8000cba:	d918      	bls.n	8000cee <HAL_ADC_ConfigChannel+0x1b2>
    else if (sConfig->Rank < 15U)
 8000cbc:	2e0e      	cmp	r6, #14
 8000cbe:	d854      	bhi.n	8000d6a <HAL_ADC_ConfigChannel+0x22e>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cc0:	383c      	subs	r0, #60	; 0x3c
 8000cc2:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8000cc4:	271f      	movs	r7, #31
 8000cc6:	4087      	lsls	r7, r0
 8000cc8:	ea26 0607 	bic.w	r6, r6, r7
 8000ccc:	fa05 f000 	lsl.w	r0, r5, r0
 8000cd0:	4330      	orrs	r0, r6
 8000cd2:	6398      	str	r0, [r3, #56]	; 0x38
 8000cd4:	e756      	b.n	8000b84 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000cd6:	3e1e      	subs	r6, #30
 8000cd8:	699f      	ldr	r7, [r3, #24]
 8000cda:	f04f 0c07 	mov.w	ip, #7
 8000cde:	fa0c fc06 	lsl.w	ip, ip, r6
 8000ce2:	40b0      	lsls	r0, r6
 8000ce4:	ea27 060c 	bic.w	r6, r7, ip
 8000ce8:	4330      	orrs	r0, r6
 8000cea:	6198      	str	r0, [r3, #24]
 8000cec:	e75e      	b.n	8000bac <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->SQR2,
 8000cee:	381e      	subs	r0, #30
 8000cf0:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8000cf2:	271f      	movs	r7, #31
 8000cf4:	4087      	lsls	r7, r0
 8000cf6:	ea26 0607 	bic.w	r6, r6, r7
 8000cfa:	fa05 f000 	lsl.w	r0, r5, r0
 8000cfe:	4330      	orrs	r0, r6
 8000d00:	6358      	str	r0, [r3, #52]	; 0x34
 8000d02:	e73f      	b.n	8000b84 <HAL_ADC_ConfigChannel+0x48>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000d04:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000d06:	01c4      	lsls	r4, r0, #7
 8000d08:	d5b2      	bpl.n	8000c70 <HAL_ADC_ConfigChannel+0x134>
 8000d0a:	e7d3      	b.n	8000cb4 <HAL_ADC_ConfigChannel+0x178>
  __HAL_LOCK(hadc);
 8000d0c:	2002      	movs	r0, #2
}
 8000d0e:	b002      	add	sp, #8
 8000d10:	bcf0      	pop	{r4, r5, r6, r7}
 8000d12:	4770      	bx	lr
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d14:	6818      	ldr	r0, [r3, #0]
 8000d16:	07c7      	lsls	r7, r0, #31
 8000d18:	d58d      	bpl.n	8000c36 <HAL_ADC_ConfigChannel+0xfa>
 8000d1a:	e7cb      	b.n	8000cb4 <HAL_ADC_ConfigChannel+0x178>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000d1c:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
 8000d20:	688e      	ldr	r6, [r1, #8]
 8000d22:	4320      	orrs	r0, r4
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d24:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000d26:	f8c3 00b0 	str.w	r0, [r3, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d2a:	d912      	bls.n	8000d52 <HAL_ADC_ConfigChannel+0x216>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000d2c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8000d30:	391b      	subs	r1, #27
 8000d32:	6998      	ldr	r0, [r3, #24]
 8000d34:	2407      	movs	r4, #7
 8000d36:	408c      	lsls	r4, r1
 8000d38:	ea20 0004 	bic.w	r0, r0, r4
 8000d3c:	fa06 f101 	lsl.w	r1, r6, r1
 8000d40:	4301      	orrs	r1, r0
 8000d42:	6199      	str	r1, [r3, #24]
 8000d44:	e782      	b.n	8000c4c <HAL_ADC_ConfigChannel+0x110>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000d46:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000d48:	0206      	lsls	r6, r0, #8
 8000d4a:	d591      	bpl.n	8000c70 <HAL_ADC_ConfigChannel+0x134>
 8000d4c:	e7b2      	b.n	8000cb4 <HAL_ADC_ConfigChannel+0x178>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d4e:	494a      	ldr	r1, [pc, #296]	; (8000e78 <HAL_ADC_ConfigChannel+0x33c>)
 8000d50:	e785      	b.n	8000c5e <HAL_ADC_ConfigChannel+0x122>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000d52:	1c68      	adds	r0, r5, #1
 8000d54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000d58:	6959      	ldr	r1, [r3, #20]
 8000d5a:	2407      	movs	r4, #7
 8000d5c:	4084      	lsls	r4, r0
 8000d5e:	4086      	lsls	r6, r0
 8000d60:	ea21 0104 	bic.w	r1, r1, r4
 8000d64:	4331      	orrs	r1, r6
 8000d66:	6159      	str	r1, [r3, #20]
 8000d68:	e770      	b.n	8000c4c <HAL_ADC_ConfigChannel+0x110>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000d6a:	385a      	subs	r0, #90	; 0x5a
 8000d6c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8000d6e:	271f      	movs	r7, #31
 8000d70:	4087      	lsls	r7, r0
 8000d72:	ea26 0607 	bic.w	r6, r6, r7
 8000d76:	fa05 f000 	lsl.w	r0, r5, r0
 8000d7a:	4330      	orrs	r0, r6
 8000d7c:	63d8      	str	r0, [r3, #60]	; 0x3c
 8000d7e:	e701      	b.n	8000b84 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000d80:	f8d3 c06c 	ldr.w	ip, [r3, #108]	; 0x6c
 8000d84:	4e3e      	ldr	r6, [pc, #248]	; (8000e80 <HAL_ADC_ConfigChannel+0x344>)
 8000d86:	ea0c 0606 	and.w	r6, ip, r6
 8000d8a:	4337      	orrs	r7, r6
 8000d8c:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8000d90:	4338      	orrs	r0, r7
 8000d92:	66d8      	str	r0, [r3, #108]	; 0x6c
      break;
 8000d94:	e74a      	b.n	8000c2c <HAL_ADC_ConfigChannel+0xf0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000d96:	f8d3 c068 	ldr.w	ip, [r3, #104]	; 0x68
 8000d9a:	4e39      	ldr	r6, [pc, #228]	; (8000e80 <HAL_ADC_ConfigChannel+0x344>)
 8000d9c:	ea0c 0606 	and.w	r6, ip, r6
 8000da0:	4337      	orrs	r7, r6
 8000da2:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8000da6:	4338      	orrs	r0, r7
 8000da8:	6698      	str	r0, [r3, #104]	; 0x68
      break;
 8000daa:	e73f      	b.n	8000c2c <HAL_ADC_ConfigChannel+0xf0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000dac:	f8d3 c064 	ldr.w	ip, [r3, #100]	; 0x64
 8000db0:	4e33      	ldr	r6, [pc, #204]	; (8000e80 <HAL_ADC_ConfigChannel+0x344>)
 8000db2:	ea0c 0606 	and.w	r6, ip, r6
 8000db6:	4337      	orrs	r7, r6
 8000db8:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8000dbc:	4338      	orrs	r0, r7
 8000dbe:	6658      	str	r0, [r3, #100]	; 0x64
      break;
 8000dc0:	e734      	b.n	8000c2c <HAL_ADC_ConfigChannel+0xf0>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000dc2:	f8d3 c060 	ldr.w	ip, [r3, #96]	; 0x60
 8000dc6:	4e2e      	ldr	r6, [pc, #184]	; (8000e80 <HAL_ADC_ConfigChannel+0x344>)
 8000dc8:	ea0c 0606 	and.w	r6, ip, r6
 8000dcc:	4337      	orrs	r7, r6
 8000dce:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8000dd2:	4338      	orrs	r0, r7
 8000dd4:	6618      	str	r0, [r3, #96]	; 0x60
      break;
 8000dd6:	e729      	b.n	8000c2c <HAL_ADC_ConfigChannel+0xf0>
 8000dd8:	4c2a      	ldr	r4, [pc, #168]	; (8000e84 <HAL_ADC_ConfigChannel+0x348>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000dda:	6898      	ldr	r0, [r3, #8]
 8000ddc:	f000 0003 	and.w	r0, r0, #3
 8000de0:	2801      	cmp	r0, #1
 8000de2:	d024      	beq.n	8000e2e <HAL_ADC_ConfigChannel+0x2f2>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000de4:	68a0      	ldr	r0, [r4, #8]
 8000de6:	f000 0003 	and.w	r0, r0, #3
 8000dea:	2801      	cmp	r0, #1
 8000dec:	d037      	beq.n	8000e5e <HAL_ADC_ConfigChannel+0x322>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000dee:	2d10      	cmp	r5, #16
 8000df0:	f47f af57 	bne.w	8000ca2 <HAL_ADC_ConfigChannel+0x166>
 8000df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <HAL_ADC_ConfigChannel+0x178>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <HAL_ADC_ConfigChannel+0x34c>)
 8000dfe:	4c23      	ldr	r4, [pc, #140]	; (8000e8c <HAL_ADC_ConfigChannel+0x350>)
 8000e00:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000e02:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e04:	fba4 4303 	umull	r4, r3, r4, r3
 8000e08:	0c9b      	lsrs	r3, r3, #18
 8000e0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e0e:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e16:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000e18:	9b01      	ldr	r3, [sp, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f43f af4a 	beq.w	8000cb4 <HAL_ADC_ConfigChannel+0x178>
            wait_loop_index--;
 8000e20:	9b01      	ldr	r3, [sp, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000e26:	9b01      	ldr	r3, [sp, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1f9      	bne.n	8000e20 <HAL_ADC_ConfigChannel+0x2e4>
 8000e2c:	e742      	b.n	8000cb4 <HAL_ADC_ConfigChannel+0x178>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	07c6      	lsls	r6, r0, #31
 8000e32:	d5d7      	bpl.n	8000de4 <HAL_ADC_ConfigChannel+0x2a8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e34:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000e36:	f043 0320 	orr.w	r3, r3, #32
 8000e3a:	6413      	str	r3, [r2, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	e6cb      	b.n	8000bd8 <HAL_ADC_ConfigChannel+0x9c>
 8000e40:	4c0b      	ldr	r4, [pc, #44]	; (8000e70 <HAL_ADC_ConfigChannel+0x334>)
 8000e42:	e7ca      	b.n	8000dda <HAL_ADC_ConfigChannel+0x29e>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e48:	f47f af34 	bne.w	8000cb4 <HAL_ADC_ConfigChannel+0x178>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000e4c:	688b      	ldr	r3, [r1, #8]
 8000e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e52:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e54:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000e56:	e6bf      	b.n	8000bd8 <HAL_ADC_ConfigChannel+0x9c>
 8000e58:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8000e5c:	e7bd      	b.n	8000dda <HAL_ADC_ConfigChannel+0x29e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e5e:	6820      	ldr	r0, [r4, #0]
 8000e60:	07c0      	lsls	r0, r0, #31
 8000e62:	d4e7      	bmi.n	8000e34 <HAL_ADC_ConfigChannel+0x2f8>
 8000e64:	e7c3      	b.n	8000dee <HAL_ADC_ConfigChannel+0x2b2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000e66:	6818      	ldr	r0, [r3, #0]
 8000e68:	07c7      	lsls	r7, r0, #31
 8000e6a:	d4e3      	bmi.n	8000e34 <HAL_ADC_ConfigChannel+0x2f8>
 8000e6c:	e717      	b.n	8000c9e <HAL_ADC_ConfigChannel+0x162>
 8000e6e:	bf00      	nop
 8000e70:	50000100 	.word	0x50000100
 8000e74:	50000700 	.word	0x50000700
 8000e78:	50000300 	.word	0x50000300
 8000e7c:	50000400 	.word	0x50000400
 8000e80:	83fff000 	.word	0x83fff000
 8000e84:	50000500 	.word	0x50000500
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	431bde83 	.word	0x431bde83

08000e90 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e90:	6802      	ldr	r2, [r0, #0]
 8000e92:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 8000e96:	4603      	mov	r3, r0
 8000e98:	b4f0      	push	{r4, r5, r6, r7}
 8000e9a:	4840      	ldr	r0, [pc, #256]	; (8000f9c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e9c:	d00d      	beq.n	8000eba <HAL_ADCEx_MultiModeConfigChannel+0x2a>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	d009      	beq.n	8000eb6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8000ea2:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8000ea6:	4282      	cmp	r2, r0
 8000ea8:	d048      	beq.n	8000f3c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8000eaa:	4c3d      	ldr	r4, [pc, #244]	; (8000fa0 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8000eac:	42a2      	cmp	r2, r4
 8000eae:	d004      	beq.n	8000eba <HAL_ADCEx_MultiModeConfigChannel+0x2a>
    return HAL_ERROR;
 8000eb0:	2001      	movs	r0, #1
} 
 8000eb2:	bcf0      	pop	{r4, r5, r6, r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8000eba:	f893 403c 	ldrb.w	r4, [r3, #60]	; 0x3c
 8000ebe:	2c01      	cmp	r4, #1
 8000ec0:	d041      	beq.n	8000f46 <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000ec2:	6894      	ldr	r4, [r2, #8]
  __HAL_LOCK(hadc);
 8000ec4:	2501      	movs	r5, #1
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000ec6:	0764      	lsls	r4, r4, #29
  __HAL_LOCK(hadc);
 8000ec8:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000ecc:	d509      	bpl.n	8000ee2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ed0:	f042 0220 	orr.w	r2, r2, #32
 8000ed4:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 8000ed6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
} 
 8000ede:	bcf0      	pop	{r4, r5, r6, r7}
 8000ee0:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000ee2:	6884      	ldr	r4, [r0, #8]
 8000ee4:	0767      	lsls	r7, r4, #29
 8000ee6:	d4f2      	bmi.n	8000ece <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ee8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8000eec:	d054      	beq.n	8000f98 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8000eee:	4e2b      	ldr	r6, [pc, #172]	; (8000f9c <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8000ef0:	4c2c      	ldr	r4, [pc, #176]	; (8000fa4 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8000ef2:	4d2d      	ldr	r5, [pc, #180]	; (8000fa8 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8000ef4:	42b2      	cmp	r2, r6
 8000ef6:	bf08      	it	eq
 8000ef8:	462c      	moveq	r4, r5
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000efa:	680d      	ldr	r5, [r1, #0]
 8000efc:	b335      	cbz	r5, 8000f4c <HAL_ADCEx_MultiModeConfigChannel+0xbc>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000efe:	68a7      	ldr	r7, [r4, #8]
 8000f00:	f893 c030 	ldrb.w	ip, [r3, #48]	; 0x30
 8000f04:	684e      	ldr	r6, [r1, #4]
 8000f06:	f427 4760 	bic.w	r7, r7, #57344	; 0xe000
 8000f0a:	ea46 364c 	orr.w	r6, r6, ip, lsl #13
 8000f0e:	433e      	orrs	r6, r7
 8000f10:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000f12:	6896      	ldr	r6, [r2, #8]
 8000f14:	f006 0603 	and.w	r6, r6, #3
 8000f18:	2e01      	cmp	r6, #1
 8000f1a:	d031      	beq.n	8000f80 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000f1c:	6882      	ldr	r2, [r0, #8]
 8000f1e:	f002 0203 	and.w	r2, r2, #3
 8000f22:	2a01      	cmp	r2, #1
 8000f24:	d030      	beq.n	8000f88 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000f26:	68a2      	ldr	r2, [r4, #8]
 8000f28:	6889      	ldr	r1, [r1, #8]
 8000f2a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000f2e:	430d      	orrs	r5, r1
 8000f30:	f022 020f 	bic.w	r2, r2, #15
 8000f34:	4315      	orrs	r5, r2
 8000f36:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f38:	2000      	movs	r0, #0
 8000f3a:	e7cd      	b.n	8000ed8 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8000f3c:	f893 403c 	ldrb.w	r4, [r3, #60]	; 0x3c
 8000f40:	4817      	ldr	r0, [pc, #92]	; (8000fa0 <HAL_ADCEx_MultiModeConfigChannel+0x110>)
 8000f42:	2c01      	cmp	r4, #1
 8000f44:	d1bd      	bne.n	8000ec2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8000f46:	2002      	movs	r0, #2
} 
 8000f48:	bcf0      	pop	{r4, r5, r6, r7}
 8000f4a:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000f4c:	68a1      	ldr	r1, [r4, #8]
 8000f4e:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8000f52:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000f54:	6891      	ldr	r1, [r2, #8]
 8000f56:	f001 0103 	and.w	r1, r1, #3
 8000f5a:	2901      	cmp	r1, #1
 8000f5c:	d00c      	beq.n	8000f78 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000f5e:	6882      	ldr	r2, [r0, #8]
 8000f60:	f002 0203 	and.w	r2, r2, #3
 8000f64:	2a01      	cmp	r2, #1
 8000f66:	d013      	beq.n	8000f90 <HAL_ADCEx_MultiModeConfigChannel+0x100>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000f68:	68a2      	ldr	r2, [r4, #8]
 8000f6a:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000f6e:	f022 020f 	bic.w	r2, r2, #15
 8000f72:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f74:	2000      	movs	r0, #0
 8000f76:	e7af      	b.n	8000ed8 <HAL_ADCEx_MultiModeConfigChannel+0x48>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	07d1      	lsls	r1, r2, #31
 8000f7c:	d4dc      	bmi.n	8000f38 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8000f7e:	e7ee      	b.n	8000f5e <HAL_ADCEx_MultiModeConfigChannel+0xce>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	07d6      	lsls	r6, r2, #31
 8000f84:	d5ca      	bpl.n	8000f1c <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8000f86:	e7d7      	b.n	8000f38 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000f88:	6802      	ldr	r2, [r0, #0]
 8000f8a:	07d0      	lsls	r0, r2, #31
 8000f8c:	d4d4      	bmi.n	8000f38 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8000f8e:	e7ca      	b.n	8000f26 <HAL_ADCEx_MultiModeConfigChannel+0x96>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000f90:	6802      	ldr	r2, [r0, #0]
 8000f92:	07d2      	lsls	r2, r2, #31
 8000f94:	d4d0      	bmi.n	8000f38 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8000f96:	e7e7      	b.n	8000f68 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f98:	4c03      	ldr	r4, [pc, #12]	; (8000fa8 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8000f9a:	e7ae      	b.n	8000efa <HAL_ADCEx_MultiModeConfigChannel+0x6a>
 8000f9c:	50000100 	.word	0x50000100
 8000fa0:	50000500 	.word	0x50000500
 8000fa4:	50000700 	.word	0x50000700
 8000fa8:	50000300 	.word	0x50000300

08000fac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000fb4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb6:	0200      	lsls	r0, r0, #8
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000fc4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fc6:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <HAL_NVIC_SetPriority+0x64>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fda:	f1c3 0507 	rsb	r5, r3, #7
 8000fde:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	bf28      	it	cs
 8000fe6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe8:	2c06      	cmp	r4, #6
 8000fea:	d919      	bls.n	8001020 <HAL_NVIC_SetPriority+0x50>
 8000fec:	3b03      	subs	r3, #3
 8000fee:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000ff2:	409c      	lsls	r4, r3
 8000ff4:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ffc:	40aa      	lsls	r2, r5
 8000ffe:	ea21 0102 	bic.w	r1, r1, r2
 8001002:	fa01 f203 	lsl.w	r2, r1, r3
 8001006:	4322      	orrs	r2, r4
 8001008:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800100a:	2800      	cmp	r0, #0
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	db0a      	blt.n	8001026 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001014:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001018:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800101c:	bc30      	pop	{r4, r5}
 800101e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001020:	2400      	movs	r4, #0
 8001022:	4623      	mov	r3, r4
 8001024:	e7e8      	b.n	8000ff8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <HAL_NVIC_SetPriority+0x68>)
 8001028:	f000 000f 	and.w	r0, r0, #15
 800102c:	4403      	add	r3, r0
 800102e:	761a      	strb	r2, [r3, #24]
 8001030:	bc30      	pop	{r4, r5}
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00
 8001038:	e000ecfc 	.word	0xe000ecfc

0800103c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	3801      	subs	r0, #1
 800103e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001042:	d20e      	bcs.n	8001062 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001046:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	4c08      	ldr	r4, [pc, #32]	; (800106c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	20f0      	movs	r0, #240	; 0xf0
 800104e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001052:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001054:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001056:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800105c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001060:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2001      	movs	r0, #1
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001070:	f8d1 c000 	ldr.w	ip, [r1]
 8001074:	f1bc 0f00 	cmp.w	ip, #0
 8001078:	f000 80d0 	beq.w	800121c <HAL_GPIO_Init+0x1ac>
{
 800107c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001080:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8001250 <HAL_GPIO_Init+0x1e0>
{
 8001084:	b083      	sub	sp, #12
 8001086:	4688      	mov	r8, r1
  uint32_t position = 0x00u;
 8001088:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800108a:	f04f 0901 	mov.w	r9, #1
 800108e:	fa09 f205 	lsl.w	r2, r9, r5
    if (iocurrent != 0x00u)
 8001092:	ea12 060c 	ands.w	r6, r2, ip
 8001096:	d077      	beq.n	8001188 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001098:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800109c:	f021 0a10 	bic.w	sl, r1, #16
 80010a0:	f1ba 0f02 	cmp.w	sl, #2
 80010a4:	d078      	beq.n	8001198 <HAL_GPIO_Init+0x128>
 80010a6:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010a8:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 80010aa:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010ae:	40bb      	lsls	r3, r7
 80010b0:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b2:	f001 0403 	and.w	r4, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010b6:	ea03 0b0b 	and.w	fp, r3, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ba:	40bc      	lsls	r4, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c0:	ea44 040b 	orr.w	r4, r4, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c4:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 80010c8:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ca:	f240 8086 	bls.w	80011da <HAL_GPIO_Init+0x16a>
      temp = GPIOx->PUPDR;
 80010ce:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010d0:	f8d8 2008 	ldr.w	r2, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010d4:	4023      	ands	r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010d6:	40ba      	lsls	r2, r7
 80010d8:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010da:	00cf      	lsls	r7, r1, #3
      GPIOx->PUPDR = temp;
 80010dc:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010de:	d553      	bpl.n	8001188 <HAL_GPIO_Init+0x118>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e0:	4a54      	ldr	r2, [pc, #336]	; (8001234 <HAL_GPIO_Init+0x1c4>)
 80010e2:	6993      	ldr	r3, [r2, #24]
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6193      	str	r3, [r2, #24]
 80010ea:	6993      	ldr	r3, [r2, #24]
 80010ec:	f025 0403 	bic.w	r4, r5, #3
 80010f0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 80010fc:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010fe:	f005 0203 	and.w	r2, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001104:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001106:	0092      	lsls	r2, r2, #2
 8001108:	230f      	movs	r3, #15
 800110a:	4093      	lsls	r3, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800110c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001110:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001114:	d016      	beq.n	8001144 <HAL_GPIO_Init+0xd4>
 8001116:	4f48      	ldr	r7, [pc, #288]	; (8001238 <HAL_GPIO_Init+0x1c8>)
 8001118:	42b8      	cmp	r0, r7
 800111a:	d076      	beq.n	800120a <HAL_GPIO_Init+0x19a>
 800111c:	4f47      	ldr	r7, [pc, #284]	; (800123c <HAL_GPIO_Init+0x1cc>)
 800111e:	42b8      	cmp	r0, r7
 8001120:	d06e      	beq.n	8001200 <HAL_GPIO_Init+0x190>
 8001122:	4f47      	ldr	r7, [pc, #284]	; (8001240 <HAL_GPIO_Init+0x1d0>)
 8001124:	42b8      	cmp	r0, r7
 8001126:	d07a      	beq.n	800121e <HAL_GPIO_Init+0x1ae>
 8001128:	4f46      	ldr	r7, [pc, #280]	; (8001244 <HAL_GPIO_Init+0x1d4>)
 800112a:	42b8      	cmp	r0, r7
 800112c:	d07c      	beq.n	8001228 <HAL_GPIO_Init+0x1b8>
 800112e:	4f46      	ldr	r7, [pc, #280]	; (8001248 <HAL_GPIO_Init+0x1d8>)
 8001130:	42b8      	cmp	r0, r7
 8001132:	d06e      	beq.n	8001212 <HAL_GPIO_Init+0x1a2>
 8001134:	4f45      	ldr	r7, [pc, #276]	; (800124c <HAL_GPIO_Init+0x1dc>)
 8001136:	42b8      	cmp	r0, r7
 8001138:	bf0c      	ite	eq
 800113a:	2706      	moveq	r7, #6
 800113c:	2707      	movne	r7, #7
 800113e:	fa07 f202 	lsl.w	r2, r7, r2
 8001142:	4313      	orrs	r3, r2
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001144:	60a3      	str	r3, [r4, #8]
        temp = EXTI->IMR;
 8001146:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~(iocurrent);
 800114a:	43f2      	mvns	r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800114c:	03cc      	lsls	r4, r1, #15
        temp &= ~(iocurrent);
 800114e:	bf54      	ite	pl
 8001150:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001152:	4333      	orrmi	r3, r6
        }
        EXTI->IMR = temp;
 8001154:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001158:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800115c:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 800115e:	bf54      	ite	pl
 8001160:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001162:	4333      	orrmi	r3, r6
        }
        EXTI->EMR = temp;
 8001164:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001168:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800116c:	02cc      	lsls	r4, r1, #11
        temp &= ~(iocurrent);
 800116e:	bf54      	ite	pl
 8001170:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001172:	4333      	orrmi	r3, r6
        }
        EXTI->RTSR = temp;
 8001174:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001178:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800117c:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 800117e:	bf54      	ite	pl
 8001180:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001182:	4333      	orrmi	r3, r6
        }
        EXTI->FTSR = temp;
 8001184:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }

    position++;
 8001188:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118a:	fa3c f305 	lsrs.w	r3, ip, r5
 800118e:	f47f af7e 	bne.w	800108e <HAL_GPIO_Init+0x1e>
  }
}
 8001192:	b003      	add	sp, #12
 8001194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3u];
 8001198:	08ef      	lsrs	r7, r5, #3
 800119a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800119e:	f005 0407 	and.w	r4, r5, #7
        temp = GPIOx->AFR[position >> 3u];
 80011a2:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011a4:	00a4      	lsls	r4, r4, #2
 80011a6:	f04f 0b0f 	mov.w	fp, #15
 80011aa:	fa0b fb04 	lsl.w	fp, fp, r4
 80011ae:	ea23 0a0b 	bic.w	sl, r3, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011b2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80011b6:	40a3      	lsls	r3, r4
 80011b8:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 80011bc:	623b      	str	r3, [r7, #32]
 80011be:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011c0:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 80011c2:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011c6:	40bb      	lsls	r3, r7
 80011c8:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ca:	f001 0403 	and.w	r4, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011ce:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d2:	40bc      	lsls	r4, r7
 80011d4:	ea44 040a 	orr.w	r4, r4, sl
      GPIOx->MODER = temp;
 80011d8:	6004      	str	r4, [r0, #0]
        temp = GPIOx->OSPEEDR;
 80011da:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011dc:	ea03 0a04 	and.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e0:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80011e4:	40bc      	lsls	r4, r7
 80011e6:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OSPEEDR = temp;
 80011ea:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80011ec:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011f0:	f3c1 1400 	ubfx	r4, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f4:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011f8:	40ac      	lsls	r4, r5
 80011fa:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 80011fc:	6044      	str	r4, [r0, #4]
 80011fe:	e766      	b.n	80010ce <HAL_GPIO_Init+0x5e>
 8001200:	2702      	movs	r7, #2
 8001202:	fa07 f202 	lsl.w	r2, r7, r2
 8001206:	4313      	orrs	r3, r2
 8001208:	e79c      	b.n	8001144 <HAL_GPIO_Init+0xd4>
 800120a:	fa09 f202 	lsl.w	r2, r9, r2
 800120e:	4313      	orrs	r3, r2
 8001210:	e798      	b.n	8001144 <HAL_GPIO_Init+0xd4>
 8001212:	2705      	movs	r7, #5
 8001214:	fa07 f202 	lsl.w	r2, r7, r2
 8001218:	4313      	orrs	r3, r2
 800121a:	e793      	b.n	8001144 <HAL_GPIO_Init+0xd4>
 800121c:	4770      	bx	lr
 800121e:	2703      	movs	r7, #3
 8001220:	fa07 f202 	lsl.w	r2, r7, r2
 8001224:	4313      	orrs	r3, r2
 8001226:	e78d      	b.n	8001144 <HAL_GPIO_Init+0xd4>
 8001228:	2704      	movs	r7, #4
 800122a:	fa07 f202 	lsl.w	r2, r7, r2
 800122e:	4313      	orrs	r3, r2
 8001230:	e788      	b.n	8001144 <HAL_GPIO_Init+0xd4>
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	48000400 	.word	0x48000400
 800123c:	48000800 	.word	0x48000800
 8001240:	48000c00 	.word	0x48000c00
 8001244:	48001000 	.word	0x48001000
 8001248:	48001400 	.word	0x48001400
 800124c:	48001800 	.word	0x48001800
 8001250:	40010400 	.word	0x40010400

08001254 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001254:	2800      	cmp	r0, #0
 8001256:	f000 81d6 	beq.w	8001606 <HAL_RCC_OscConfig+0x3b2>
{
 800125a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125e:	6803      	ldr	r3, [r0, #0]
 8001260:	07df      	lsls	r7, r3, #31
{
 8001262:	b083      	sub	sp, #12
 8001264:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001266:	d542      	bpl.n	80012ee <HAL_RCC_OscConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001268:	49c1      	ldr	r1, [pc, #772]	; (8001570 <HAL_RCC_OscConfig+0x31c>)
 800126a:	684a      	ldr	r2, [r1, #4]
 800126c:	f002 020c 	and.w	r2, r2, #12
 8001270:	2a04      	cmp	r2, #4
 8001272:	f000 8166 	beq.w	8001542 <HAL_RCC_OscConfig+0x2ee>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001276:	684a      	ldr	r2, [r1, #4]
 8001278:	f002 020c 	and.w	r2, r2, #12
 800127c:	2a08      	cmp	r2, #8
 800127e:	f000 8159 	beq.w	8001534 <HAL_RCC_OscConfig+0x2e0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001282:	6863      	ldr	r3, [r4, #4]
 8001284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001288:	d010      	beq.n	80012ac <HAL_RCC_OscConfig+0x58>
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8198 	beq.w	80015c0 <HAL_RCC_OscConfig+0x36c>
 8001290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001294:	f000 823a 	beq.w	800170c <HAL_RCC_OscConfig+0x4b8>
 8001298:	4bb5      	ldr	r3, [pc, #724]	; (8001570 <HAL_RCC_OscConfig+0x31c>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e004      	b.n	80012b6 <HAL_RCC_OscConfig+0x62>
 80012ac:	4ab0      	ldr	r2, [pc, #704]	; (8001570 <HAL_RCC_OscConfig+0x31c>)
 80012ae:	6813      	ldr	r3, [r2, #0]
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b6:	f7ff fa97 	bl	80007e8 <HAL_GetTick>
 80012ba:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 80012be:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c0:	4eab      	ldr	r6, [pc, #684]	; (8001570 <HAL_RCC_OscConfig+0x31c>)
 80012c2:	2501      	movs	r5, #1
 80012c4:	e005      	b.n	80012d2 <HAL_RCC_OscConfig+0x7e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c6:	f7ff fa8f 	bl	80007e8 <HAL_GetTick>
 80012ca:	1bc0      	subs	r0, r0, r7
 80012cc:	2864      	cmp	r0, #100	; 0x64
 80012ce:	f200 8165 	bhi.w	800159c <HAL_RCC_OscConfig+0x348>
 80012d2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	6832      	ldr	r2, [r6, #0]
 80012d8:	fa98 f3a8 	rbit	r3, r8
 80012dc:	fab3 f383 	clz	r3, r3
 80012e0:	f003 031f 	and.w	r3, r3, #31
 80012e4:	fa05 f303 	lsl.w	r3, r5, r3
 80012e8:	4213      	tst	r3, r2
 80012ea:	d0ec      	beq.n	80012c6 <HAL_RCC_OscConfig+0x72>
 80012ec:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ee:	079e      	lsls	r6, r3, #30
 80012f0:	d459      	bmi.n	80013a6 <HAL_RCC_OscConfig+0x152>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f2:	071d      	lsls	r5, r3, #28
 80012f4:	d52c      	bpl.n	8001350 <HAL_RCC_OscConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f6:	6962      	ldr	r2, [r4, #20]
 80012f8:	2a00      	cmp	r2, #0
 80012fa:	f000 80f4 	beq.w	80014e6 <HAL_RCC_OscConfig+0x292>
 80012fe:	2201      	movs	r2, #1
 8001300:	fa92 f1a2 	rbit	r1, r2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001304:	4b9b      	ldr	r3, [pc, #620]	; (8001574 <HAL_RCC_OscConfig+0x320>)
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	4e9a      	ldr	r6, [pc, #616]	; (8001570 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_ENABLE();
 8001308:	fab1 f181 	clz	r1, r1
 800130c:	440b      	add	r3, r1
 800130e:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001310:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8001312:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001314:	f7ff fa68 	bl	80007e8 <HAL_GetTick>
 8001318:	f04f 0802 	mov.w	r8, #2
 800131c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	e005      	b.n	800132c <HAL_RCC_OscConfig+0xd8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff fa62 	bl	80007e8 <HAL_GetTick>
 8001324:	1bc0      	subs	r0, r0, r7
 8001326:	2802      	cmp	r0, #2
 8001328:	f200 8138 	bhi.w	800159c <HAL_RCC_OscConfig+0x348>
 800132c:	fa98 f3a8 	rbit	r3, r8
 8001330:	fa98 f3a8 	rbit	r3, r8
 8001334:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001338:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800133a:	fa98 f3a8 	rbit	r3, r8
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	f003 031f 	and.w	r3, r3, #31
 8001346:	fa05 f303 	lsl.w	r3, r5, r3
 800134a:	4213      	tst	r3, r2
 800134c:	d0e8      	beq.n	8001320 <HAL_RCC_OscConfig+0xcc>
 800134e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001350:	0758      	lsls	r0, r3, #29
 8001352:	d573      	bpl.n	800143c <HAL_RCC_OscConfig+0x1e8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001354:	4b86      	ldr	r3, [pc, #536]	; (8001570 <HAL_RCC_OscConfig+0x31c>)
 8001356:	69da      	ldr	r2, [r3, #28]
 8001358:	00d1      	lsls	r1, r2, #3
 800135a:	f100 8156 	bmi.w	800160a <HAL_RCC_OscConfig+0x3b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	69da      	ldr	r2, [r3, #28]
 8001360:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001364:	61da      	str	r2, [r3, #28]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136c:	9301      	str	r3, [sp, #4]
 800136e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001370:	f04f 0801 	mov.w	r8, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	4d80      	ldr	r5, [pc, #512]	; (8001578 <HAL_RCC_OscConfig+0x324>)
 8001376:	682a      	ldr	r2, [r5, #0]
 8001378:	05d2      	lsls	r2, r2, #23
 800137a:	f140 80ff 	bpl.w	800157c <HAL_RCC_OscConfig+0x328>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137e:	68a3      	ldr	r3, [r4, #8]
 8001380:	2b01      	cmp	r3, #1
 8001382:	f000 8198 	beq.w	80016b6 <HAL_RCC_OscConfig+0x462>
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 8142 	beq.w	8001610 <HAL_RCC_OscConfig+0x3bc>
 800138c:	2b05      	cmp	r3, #5
 800138e:	4b78      	ldr	r3, [pc, #480]	; (8001570 <HAL_RCC_OscConfig+0x31c>)
 8001390:	6a1a      	ldr	r2, [r3, #32]
 8001392:	f000 81c8 	beq.w	8001726 <HAL_RCC_OscConfig+0x4d2>
 8001396:	f022 0201 	bic.w	r2, r2, #1
 800139a:	621a      	str	r2, [r3, #32]
 800139c:	6a1a      	ldr	r2, [r3, #32]
 800139e:	f022 0204 	bic.w	r2, r2, #4
 80013a2:	621a      	str	r2, [r3, #32]
 80013a4:	e18c      	b.n	80016c0 <HAL_RCC_OscConfig+0x46c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013a6:	4a72      	ldr	r2, [pc, #456]	; (8001570 <HAL_RCC_OscConfig+0x31c>)
 80013a8:	6851      	ldr	r1, [r2, #4]
 80013aa:	f011 0f0c 	tst.w	r1, #12
 80013ae:	f000 8083 	beq.w	80014b8 <HAL_RCC_OscConfig+0x264>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013b2:	6851      	ldr	r1, [r2, #4]
 80013b4:	f001 010c 	and.w	r1, r1, #12
 80013b8:	2908      	cmp	r1, #8
 80013ba:	d077      	beq.n	80014ac <HAL_RCC_OscConfig+0x258>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013bc:	68e2      	ldr	r2, [r4, #12]
 80013be:	2a00      	cmp	r2, #0
 80013c0:	f000 8153 	beq.w	800166a <HAL_RCC_OscConfig+0x416>
 80013c4:	2201      	movs	r2, #1
 80013c6:	fa92 f3a2 	rbit	r3, r2
        __HAL_RCC_HSI_ENABLE();
 80013ca:	fab3 f383 	clz	r3, r3
 80013ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013d6:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d8:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 80013da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013dc:	f7ff fa04 	bl	80007e8 <HAL_GetTick>
 80013e0:	f04f 0802 	mov.w	r8, #2
 80013e4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e6:	4d62      	ldr	r5, [pc, #392]	; (8001570 <HAL_RCC_OscConfig+0x31c>)
 80013e8:	e005      	b.n	80013f6 <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ea:	f7ff f9fd 	bl	80007e8 <HAL_GetTick>
 80013ee:	1bc0      	subs	r0, r0, r7
 80013f0:	2802      	cmp	r0, #2
 80013f2:	f200 80d3 	bhi.w	800159c <HAL_RCC_OscConfig+0x348>
 80013f6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fa:	682a      	ldr	r2, [r5, #0]
 80013fc:	fa98 f3a8 	rbit	r3, r8
 8001400:	fab3 f383 	clz	r3, r3
 8001404:	f003 031f 	and.w	r3, r3, #31
 8001408:	fa06 f303 	lsl.w	r3, r6, r3
 800140c:	4213      	tst	r3, r2
 800140e:	d0ec      	beq.n	80013ea <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	6829      	ldr	r1, [r5, #0]
 8001412:	22f8      	movs	r2, #248	; 0xf8
 8001414:	fa92 f2a2 	rbit	r2, r2
 8001418:	6923      	ldr	r3, [r4, #16]
 800141a:	fab2 f282 	clz	r2, r2
 800141e:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8001422:	4093      	lsls	r3, r2
 8001424:	430b      	orrs	r3, r1
 8001426:	602b      	str	r3, [r5, #0]
 8001428:	6823      	ldr	r3, [r4, #0]
 800142a:	e762      	b.n	80012f2 <HAL_RCC_OscConfig+0x9e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800142c:	f1b8 0f00 	cmp.w	r8, #0
 8001430:	d004      	beq.n	800143c <HAL_RCC_OscConfig+0x1e8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001432:	4a4f      	ldr	r2, [pc, #316]	; (8001570 <HAL_RCC_OscConfig+0x31c>)
 8001434:	69d3      	ldr	r3, [r2, #28]
 8001436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800143a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800143c:	69a0      	ldr	r0, [r4, #24]
 800143e:	b388      	cbz	r0, 80014a4 <HAL_RCC_OscConfig+0x250>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001440:	4d4b      	ldr	r5, [pc, #300]	; (8001570 <HAL_RCC_OscConfig+0x31c>)
 8001442:	686b      	ldr	r3, [r5, #4]
 8001444:	f003 030c 	and.w	r3, r3, #12
 8001448:	2b08      	cmp	r3, #8
 800144a:	f000 8174 	beq.w	8001736 <HAL_RCC_OscConfig+0x4e2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800144e:	2802      	cmp	r0, #2
 8001450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001454:	f000 8187 	beq.w	8001766 <HAL_RCC_OscConfig+0x512>
 8001458:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145c:	fab3 f383 	clz	r3, r3
 8001460:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001464:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff f9bb 	bl	80007e8 <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001472:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001474:	4607      	mov	r7, r0
 8001476:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147a:	2601      	movs	r6, #1
 800147c:	e005      	b.n	800148a <HAL_RCC_OscConfig+0x236>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff f9b3 	bl	80007e8 <HAL_GetTick>
 8001482:	1bc0      	subs	r0, r0, r7
 8001484:	2802      	cmp	r0, #2
 8001486:	f200 8089 	bhi.w	800159c <HAL_RCC_OscConfig+0x348>
 800148a:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148e:	6822      	ldr	r2, [r4, #0]
 8001490:	fa95 f3a5 	rbit	r3, r5
 8001494:	fab3 f383 	clz	r3, r3
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	fa06 f303 	lsl.w	r3, r6, r3
 80014a0:	4213      	tst	r3, r2
 80014a2:	d1ec      	bne.n	800147e <HAL_RCC_OscConfig+0x22a>
        }
      }
    }
  }

  return HAL_OK;
 80014a4:	2000      	movs	r0, #0
}
 80014a6:	b003      	add	sp, #12
 80014a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014ac:	6852      	ldr	r2, [r2, #4]
 80014ae:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 80014b2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80014b6:	d181      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
 80014b8:	2202      	movs	r2, #2
 80014ba:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	492c      	ldr	r1, [pc, #176]	; (8001570 <HAL_RCC_OscConfig+0x31c>)
 80014c0:	6808      	ldr	r0, [r1, #0]
 80014c2:	fa92 f2a2 	rbit	r2, r2
 80014c6:	fab2 f282 	clz	r2, r2
 80014ca:	f002 021f 	and.w	r2, r2, #31
 80014ce:	2101      	movs	r1, #1
 80014d0:	fa01 f202 	lsl.w	r2, r1, r2
 80014d4:	4202      	tst	r2, r0
 80014d6:	d065      	beq.n	80015a4 <HAL_RCC_OscConfig+0x350>
 80014d8:	68e2      	ldr	r2, [r4, #12]
 80014da:	428a      	cmp	r2, r1
 80014dc:	d062      	beq.n	80015a4 <HAL_RCC_OscConfig+0x350>
        return HAL_ERROR;
 80014de:	2001      	movs	r0, #1
}
 80014e0:	b003      	add	sp, #12
 80014e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014e6:	2501      	movs	r5, #1
 80014e8:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <HAL_RCC_OscConfig+0x320>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ee:	4e20      	ldr	r6, [pc, #128]	; (8001570 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_DISABLE();
 80014f0:	fab1 f181 	clz	r1, r1
 80014f4:	440b      	add	r3, r1
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	f04f 0802 	mov.w	r8, #2
 80014fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80014fe:	f7ff f973 	bl	80007e8 <HAL_GetTick>
 8001502:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	e004      	b.n	8001510 <HAL_RCC_OscConfig+0x2bc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff f96f 	bl	80007e8 <HAL_GetTick>
 800150a:	1bc0      	subs	r0, r0, r7
 800150c:	2802      	cmp	r0, #2
 800150e:	d845      	bhi.n	800159c <HAL_RCC_OscConfig+0x348>
 8001510:	fa98 f3a8 	rbit	r3, r8
 8001514:	fa98 f3a8 	rbit	r3, r8
 8001518:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800151e:	fa98 f3a8 	rbit	r3, r8
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	f003 031f 	and.w	r3, r3, #31
 800152a:	fa05 f303 	lsl.w	r3, r5, r3
 800152e:	4213      	tst	r3, r2
 8001530:	d1e9      	bne.n	8001506 <HAL_RCC_OscConfig+0x2b2>
 8001532:	e70c      	b.n	800134e <HAL_RCC_OscConfig+0xfa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001534:	684a      	ldr	r2, [r1, #4]
 8001536:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 800153a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800153e:	f47f aea0 	bne.w	8001282 <HAL_RCC_OscConfig+0x2e>
 8001542:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001546:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154a:	4909      	ldr	r1, [pc, #36]	; (8001570 <HAL_RCC_OscConfig+0x31c>)
 800154c:	6808      	ldr	r0, [r1, #0]
 800154e:	fa92 f2a2 	rbit	r2, r2
 8001552:	fab2 f282 	clz	r2, r2
 8001556:	f002 021f 	and.w	r2, r2, #31
 800155a:	2101      	movs	r1, #1
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	4202      	tst	r2, r0
 8001562:	f43f aec4 	beq.w	80012ee <HAL_RCC_OscConfig+0x9a>
 8001566:	6862      	ldr	r2, [r4, #4]
 8001568:	2a00      	cmp	r2, #0
 800156a:	f47f aec0 	bne.w	80012ee <HAL_RCC_OscConfig+0x9a>
 800156e:	e7b6      	b.n	80014de <HAL_RCC_OscConfig+0x28a>
 8001570:	40021000 	.word	0x40021000
 8001574:	10908120 	.word	0x10908120
 8001578:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800157c:	682a      	ldr	r2, [r5, #0]
 800157e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001582:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8001584:	f7ff f930 	bl	80007e8 <HAL_GetTick>
 8001588:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158a:	682b      	ldr	r3, [r5, #0]
 800158c:	05db      	lsls	r3, r3, #23
 800158e:	f53f aef6 	bmi.w	800137e <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001592:	f7ff f929 	bl	80007e8 <HAL_GetTick>
 8001596:	1b80      	subs	r0, r0, r6
 8001598:	2864      	cmp	r0, #100	; 0x64
 800159a:	d9f6      	bls.n	800158a <HAL_RCC_OscConfig+0x336>
            return HAL_TIMEOUT;
 800159c:	2003      	movs	r0, #3
}
 800159e:	b003      	add	sp, #12
 80015a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4d9d      	ldr	r5, [pc, #628]	; (800181c <HAL_RCC_OscConfig+0x5c8>)
 80015a6:	21f8      	movs	r1, #248	; 0xf8
 80015a8:	6828      	ldr	r0, [r5, #0]
 80015aa:	fa91 f1a1 	rbit	r1, r1
 80015ae:	6922      	ldr	r2, [r4, #16]
 80015b0:	fab1 f181 	clz	r1, r1
 80015b4:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 80015b8:	408a      	lsls	r2, r1
 80015ba:	4302      	orrs	r2, r0
 80015bc:	602a      	str	r2, [r5, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	e698      	b.n	80012f2 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c0:	4d96      	ldr	r5, [pc, #600]	; (800181c <HAL_RCC_OscConfig+0x5c8>)
 80015c2:	682b      	ldr	r3, [r5, #0]
 80015c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c8:	602b      	str	r3, [r5, #0]
 80015ca:	682b      	ldr	r3, [r5, #0]
 80015cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80015d2:	f7ff f909 	bl	80007e8 <HAL_GetTick>
 80015d6:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 80015da:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015dc:	2601      	movs	r6, #1
 80015de:	e004      	b.n	80015ea <HAL_RCC_OscConfig+0x396>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff f902 	bl	80007e8 <HAL_GetTick>
 80015e4:	1bc0      	subs	r0, r0, r7
 80015e6:	2864      	cmp	r0, #100	; 0x64
 80015e8:	d8d8      	bhi.n	800159c <HAL_RCC_OscConfig+0x348>
 80015ea:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	682a      	ldr	r2, [r5, #0]
 80015f0:	fa98 f3a8 	rbit	r3, r8
 80015f4:	fab3 f383 	clz	r3, r3
 80015f8:	f003 031f 	and.w	r3, r3, #31
 80015fc:	fa06 f303 	lsl.w	r3, r6, r3
 8001600:	4213      	tst	r3, r2
 8001602:	d1ed      	bne.n	80015e0 <HAL_RCC_OscConfig+0x38c>
 8001604:	e672      	b.n	80012ec <HAL_RCC_OscConfig+0x98>
    return HAL_ERROR;
 8001606:	2001      	movs	r0, #1
}
 8001608:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 800160a:	f04f 0800 	mov.w	r8, #0
 800160e:	e6b1      	b.n	8001374 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001610:	4d82      	ldr	r5, [pc, #520]	; (800181c <HAL_RCC_OscConfig+0x5c8>)
 8001612:	6a2b      	ldr	r3, [r5, #32]
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	622b      	str	r3, [r5, #32]
 800161a:	6a2b      	ldr	r3, [r5, #32]
 800161c:	f023 0304 	bic.w	r3, r3, #4
 8001620:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8001622:	f7ff f8e1 	bl	80007e8 <HAL_GetTick>
 8001626:	f04f 0902 	mov.w	r9, #2
 800162a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162c:	2601      	movs	r6, #1
 800162e:	e014      	b.n	800165a <HAL_RCC_OscConfig+0x406>
 8001630:	fa99 f3a9 	rbit	r3, r9
 8001634:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001636:	fa99 f3a9 	rbit	r3, r9
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	f003 031f 	and.w	r3, r3, #31
 8001642:	fa06 f303 	lsl.w	r3, r6, r3
 8001646:	4213      	tst	r3, r2
 8001648:	f43f aef0 	beq.w	800142c <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164c:	f7ff f8cc 	bl	80007e8 <HAL_GetTick>
 8001650:	f241 3388 	movw	r3, #5000	; 0x1388
 8001654:	1bc0      	subs	r0, r0, r7
 8001656:	4298      	cmp	r0, r3
 8001658:	d8a0      	bhi.n	800159c <HAL_RCC_OscConfig+0x348>
 800165a:	fa99 f3a9 	rbit	r3, r9
 800165e:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0e4      	beq.n	8001630 <HAL_RCC_OscConfig+0x3dc>
 8001666:	6a2a      	ldr	r2, [r5, #32]
 8001668:	e7e5      	b.n	8001636 <HAL_RCC_OscConfig+0x3e2>
 800166a:	2501      	movs	r5, #1
 800166c:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001678:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	f04f 0802 	mov.w	r8, #2
 8001682:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001684:	f7ff f8b0 	bl	80007e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001688:	4e64      	ldr	r6, [pc, #400]	; (800181c <HAL_RCC_OscConfig+0x5c8>)
        tickstart = HAL_GetTick();
 800168a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168c:	e004      	b.n	8001698 <HAL_RCC_OscConfig+0x444>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168e:	f7ff f8ab 	bl	80007e8 <HAL_GetTick>
 8001692:	1bc0      	subs	r0, r0, r7
 8001694:	2802      	cmp	r0, #2
 8001696:	d881      	bhi.n	800159c <HAL_RCC_OscConfig+0x348>
 8001698:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169c:	6832      	ldr	r2, [r6, #0]
 800169e:	fa98 f3a8 	rbit	r3, r8
 80016a2:	fab3 f383 	clz	r3, r3
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	fa05 f303 	lsl.w	r3, r5, r3
 80016ae:	4213      	tst	r3, r2
 80016b0:	d1ed      	bne.n	800168e <HAL_RCC_OscConfig+0x43a>
 80016b2:	6823      	ldr	r3, [r4, #0]
 80016b4:	e61d      	b.n	80012f2 <HAL_RCC_OscConfig+0x9e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b6:	4a59      	ldr	r2, [pc, #356]	; (800181c <HAL_RCC_OscConfig+0x5c8>)
 80016b8:	6a13      	ldr	r3, [r2, #32]
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80016c0:	f7ff f892 	bl	80007e8 <HAL_GetTick>
 80016c4:	f04f 0902 	mov.w	r9, #2
 80016c8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ca:	4e54      	ldr	r6, [pc, #336]	; (800181c <HAL_RCC_OscConfig+0x5c8>)
 80016cc:	2501      	movs	r5, #1
 80016ce:	e015      	b.n	80016fc <HAL_RCC_OscConfig+0x4a8>
 80016d0:	fa99 f3a9 	rbit	r3, r9
 80016d4:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80016d6:	fa99 f3a9 	rbit	r3, r9
 80016da:	fab3 f383 	clz	r3, r3
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	fa05 f303 	lsl.w	r3, r5, r3
 80016e6:	4213      	tst	r3, r2
 80016e8:	f47f aea0 	bne.w	800142c <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff f87c 	bl	80007e8 <HAL_GetTick>
 80016f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80016f4:	1bc0      	subs	r0, r0, r7
 80016f6:	4298      	cmp	r0, r3
 80016f8:	f63f af50 	bhi.w	800159c <HAL_RCC_OscConfig+0x348>
 80016fc:	fa99 f3a9 	rbit	r3, r9
 8001700:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0e3      	beq.n	80016d0 <HAL_RCC_OscConfig+0x47c>
 8001708:	6a32      	ldr	r2, [r6, #32]
 800170a:	e7e4      	b.n	80016d6 <HAL_RCC_OscConfig+0x482>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800170c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001710:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e5c7      	b.n	80012b6 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001726:	f042 0204 	orr.w	r2, r2, #4
 800172a:	621a      	str	r2, [r3, #32]
 800172c:	6a1a      	ldr	r2, [r3, #32]
 800172e:	f042 0201 	orr.w	r2, r2, #1
 8001732:	621a      	str	r2, [r3, #32]
 8001734:	e7c4      	b.n	80016c0 <HAL_RCC_OscConfig+0x46c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001736:	2801      	cmp	r0, #1
 8001738:	f43f aed2 	beq.w	80014e0 <HAL_RCC_OscConfig+0x28c>
        pll_config = RCC->CFGR;
 800173c:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800173e:	69e1      	ldr	r1, [r4, #28]
        pll_config2 = RCC->CFGR2;
 8001740:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001742:	f402 30c0 	and.w	r0, r2, #98304	; 0x18000
 8001746:	4288      	cmp	r0, r1
 8001748:	f47f aec9 	bne.w	80014de <HAL_RCC_OscConfig+0x28a>
 800174c:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800174e:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001752:	428a      	cmp	r2, r1
 8001754:	f47f aec3 	bne.w	80014de <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001758:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800175a:	f003 030f 	and.w	r3, r3, #15
    return HAL_ERROR;
 800175e:	1a18      	subs	r0, r3, r0
 8001760:	bf18      	it	ne
 8001762:	2001      	movne	r0, #1
 8001764:	e6bc      	b.n	80014e0 <HAL_RCC_OscConfig+0x28c>
 8001766:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800176a:	fab3 f383 	clz	r3, r3
 800176e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001772:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800177c:	f7ff f834 	bl	80007e8 <HAL_GetTick>
 8001780:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8001784:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001786:	2601      	movs	r6, #1
 8001788:	e005      	b.n	8001796 <HAL_RCC_OscConfig+0x542>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff f82d 	bl	80007e8 <HAL_GetTick>
 800178e:	1bc0      	subs	r0, r0, r7
 8001790:	2802      	cmp	r0, #2
 8001792:	f63f af03 	bhi.w	800159c <HAL_RCC_OscConfig+0x348>
 8001796:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179a:	682a      	ldr	r2, [r5, #0]
 800179c:	fa98 f3a8 	rbit	r3, r8
 80017a0:	fab3 f383 	clz	r3, r3
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	fa06 f303 	lsl.w	r3, r6, r3
 80017ac:	4213      	tst	r3, r2
 80017ae:	d1ec      	bne.n	800178a <HAL_RCC_OscConfig+0x536>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80017b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017b4:	f023 030f 	bic.w	r3, r3, #15
 80017b8:	4313      	orrs	r3, r2
 80017ba:	62eb      	str	r3, [r5, #44]	; 0x2c
 80017bc:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 80017c0:	686a      	ldr	r2, [r5, #4]
 80017c2:	430b      	orrs	r3, r1
 80017c4:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 80017c8:	4313      	orrs	r3, r2
 80017ca:	606b      	str	r3, [r5, #4]
 80017cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017d0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80017e6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80017e8:	f7fe fffe 	bl	80007e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017ec:	4e0b      	ldr	r6, [pc, #44]	; (800181c <HAL_RCC_OscConfig+0x5c8>)
        tickstart = HAL_GetTick();
 80017ee:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f0:	2501      	movs	r5, #1
 80017f2:	e005      	b.n	8001800 <HAL_RCC_OscConfig+0x5ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7fe fff8 	bl	80007e8 <HAL_GetTick>
 80017f8:	1bc0      	subs	r0, r0, r7
 80017fa:	2802      	cmp	r0, #2
 80017fc:	f63f aece 	bhi.w	800159c <HAL_RCC_OscConfig+0x348>
 8001800:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001804:	6832      	ldr	r2, [r6, #0]
 8001806:	fa94 f3a4 	rbit	r3, r4
 800180a:	fab3 f383 	clz	r3, r3
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	fa05 f303 	lsl.w	r3, r5, r3
 8001816:	4213      	tst	r3, r2
 8001818:	d0ec      	beq.n	80017f4 <HAL_RCC_OscConfig+0x5a0>
 800181a:	e643      	b.n	80014a4 <HAL_RCC_OscConfig+0x250>
 800181c:	40021000 	.word	0x40021000

08001820 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001820:	b178      	cbz	r0, 8001842 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001822:	4a64      	ldr	r2, [pc, #400]	; (80019b4 <HAL_RCC_ClockConfig+0x194>)
 8001824:	6813      	ldr	r3, [r2, #0]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	428b      	cmp	r3, r1
 800182c:	d20b      	bcs.n	8001846 <HAL_RCC_ClockConfig+0x26>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800182e:	6813      	ldr	r3, [r2, #0]
 8001830:	f023 0307 	bic.w	r3, r3, #7
 8001834:	430b      	orrs	r3, r1
 8001836:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001838:	6813      	ldr	r3, [r2, #0]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	428b      	cmp	r3, r1
 8001840:	d001      	beq.n	8001846 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8001842:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8001844:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001846:	6803      	ldr	r3, [r0, #0]
{
 8001848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800184c:	079c      	lsls	r4, r3, #30
 800184e:	d506      	bpl.n	800185e <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001850:	4c59      	ldr	r4, [pc, #356]	; (80019b8 <HAL_RCC_ClockConfig+0x198>)
 8001852:	6885      	ldr	r5, [r0, #8]
 8001854:	6862      	ldr	r2, [r4, #4]
 8001856:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800185a:	432a      	orrs	r2, r5
 800185c:	6062      	str	r2, [r4, #4]
 800185e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001860:	07d9      	lsls	r1, r3, #31
 8001862:	4604      	mov	r4, r0
 8001864:	d530      	bpl.n	80018c8 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001866:	6842      	ldr	r2, [r0, #4]
 8001868:	2a01      	cmp	r2, #1
 800186a:	f000 808e 	beq.w	800198a <HAL_RCC_ClockConfig+0x16a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800186e:	2a02      	cmp	r2, #2
 8001870:	bf0c      	ite	eq
 8001872:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001876:	2302      	movne	r3, #2
 8001878:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187c:	494e      	ldr	r1, [pc, #312]	; (80019b8 <HAL_RCC_ClockConfig+0x198>)
 800187e:	6808      	ldr	r0, [r1, #0]
 8001880:	fa93 f3a3 	rbit	r3, r3
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	2101      	movs	r1, #1
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	4203      	tst	r3, r0
 8001894:	d028      	beq.n	80018e8 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001896:	4e48      	ldr	r6, [pc, #288]	; (80019b8 <HAL_RCC_ClockConfig+0x198>)
 8001898:	6873      	ldr	r3, [r6, #4]
 800189a:	f023 0303 	bic.w	r3, r3, #3
 800189e:	431a      	orrs	r2, r3
 80018a0:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 80018a2:	f7fe ffa1 	bl	80007e8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a6:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80018aa:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ac:	e005      	b.n	80018ba <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ae:	f7fe ff9b 	bl	80007e8 <HAL_GetTick>
 80018b2:	eba0 0008 	sub.w	r0, r0, r8
 80018b6:	42b8      	cmp	r0, r7
 80018b8:	d879      	bhi.n	80019ae <HAL_RCC_ClockConfig+0x18e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	6873      	ldr	r3, [r6, #4]
 80018bc:	6862      	ldr	r2, [r4, #4]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80018c6:	d1f2      	bne.n	80018ae <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c8:	4a3a      	ldr	r2, [pc, #232]	; (80019b4 <HAL_RCC_ClockConfig+0x194>)
 80018ca:	6813      	ldr	r3, [r2, #0]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	42ab      	cmp	r3, r5
 80018d2:	d90c      	bls.n	80018ee <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d4:	6813      	ldr	r3, [r2, #0]
 80018d6:	f023 0307 	bic.w	r3, r3, #7
 80018da:	432b      	orrs	r3, r5
 80018dc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	6813      	ldr	r3, [r2, #0]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	42ab      	cmp	r3, r5
 80018e6:	d002      	beq.n	80018ee <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 80018e8:	2001      	movs	r0, #1
}
 80018ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	075a      	lsls	r2, r3, #29
 80018f2:	d506      	bpl.n	8001902 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f4:	4930      	ldr	r1, [pc, #192]	; (80019b8 <HAL_RCC_ClockConfig+0x198>)
 80018f6:	68e0      	ldr	r0, [r4, #12]
 80018f8:	684a      	ldr	r2, [r1, #4]
 80018fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80018fe:	4302      	orrs	r2, r0
 8001900:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001902:	071b      	lsls	r3, r3, #28
 8001904:	d507      	bpl.n	8001916 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001906:	4a2c      	ldr	r2, [pc, #176]	; (80019b8 <HAL_RCC_ClockConfig+0x198>)
 8001908:	6921      	ldr	r1, [r4, #16]
 800190a:	6853      	ldr	r3, [r2, #4]
 800190c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001910:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001914:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001916:	4a28      	ldr	r2, [pc, #160]	; (80019b8 <HAL_RCC_ClockConfig+0x198>)
 8001918:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800191a:	f003 010c 	and.w	r1, r3, #12
 800191e:	2908      	cmp	r1, #8
 8001920:	d131      	bne.n	8001986 <HAL_RCC_ClockConfig+0x166>
 8001922:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8001926:	fa91 f1a1 	rbit	r1, r1
 800192a:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800192c:	fab1 f181 	clz	r1, r1
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001930:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001932:	fa90 f0a0 	rbit	r0, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001936:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800193a:	40cb      	lsrs	r3, r1
 800193c:	491f      	ldr	r1, [pc, #124]	; (80019bc <HAL_RCC_ClockConfig+0x19c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800193e:	4c20      	ldr	r4, [pc, #128]	; (80019c0 <HAL_RCC_ClockConfig+0x1a0>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001940:	5ccb      	ldrb	r3, [r1, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001942:	4920      	ldr	r1, [pc, #128]	; (80019c4 <HAL_RCC_ClockConfig+0x1a4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001944:	fab0 f080 	clz	r0, r0
 8001948:	f002 020f 	and.w	r2, r2, #15
 800194c:	40c2      	lsrs	r2, r0
 800194e:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001950:	fbb1 f1f2 	udiv	r1, r1, r2
 8001954:	fb03 f101 	mul.w	r1, r3, r1
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_RCC_ClockConfig+0x198>)
 800195a:	22f0      	movs	r2, #240	; 0xf0
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	fa92 f2a2 	rbit	r2, r2
 8001962:	fab2 f282 	clz	r2, r2
 8001966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800196a:	40d3      	lsrs	r3, r2
 800196c:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <HAL_RCC_ClockConfig+0x1a8>)
  HAL_InitTick (uwTickPrio);
 800196e:	4817      	ldr	r0, [pc, #92]	; (80019cc <HAL_RCC_ClockConfig+0x1ac>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001970:	5cd3      	ldrb	r3, [r2, r3]
 8001972:	4a17      	ldr	r2, [pc, #92]	; (80019d0 <HAL_RCC_ClockConfig+0x1b0>)
  HAL_InitTick (uwTickPrio);
 8001974:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001976:	fa21 f303 	lsr.w	r3, r1, r3
 800197a:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800197c:	f7fe fef2 	bl	8000764 <HAL_InitTick>
  return HAL_OK;
 8001980:	2000      	movs	r0, #0
}
 8001982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 8001986:	490f      	ldr	r1, [pc, #60]	; (80019c4 <HAL_RCC_ClockConfig+0x1a4>)
 8001988:	e7e6      	b.n	8001958 <HAL_RCC_ClockConfig+0x138>
 800198a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198e:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4909      	ldr	r1, [pc, #36]	; (80019b8 <HAL_RCC_ClockConfig+0x198>)
 8001994:	6809      	ldr	r1, [r1, #0]
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	420b      	tst	r3, r1
 80019a8:	f47f af75 	bne.w	8001896 <HAL_RCC_ClockConfig+0x76>
 80019ac:	e79c      	b.n	80018e8 <HAL_RCC_ClockConfig+0xc8>
        return HAL_TIMEOUT;
 80019ae:	2003      	movs	r0, #3
 80019b0:	e79b      	b.n	80018ea <HAL_RCC_ClockConfig+0xca>
 80019b2:	bf00      	nop
 80019b4:	40022000 	.word	0x40022000
 80019b8:	40021000 	.word	0x40021000
 80019bc:	080027cc 	.word	0x080027cc
 80019c0:	080027dc 	.word	0x080027dc
 80019c4:	007a1200 	.word	0x007a1200
 80019c8:	080027b4 	.word	0x080027b4
 80019cc:	20000008 	.word	0x20000008
 80019d0:	20000000 	.word	0x20000000

080019d4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x4c>)
 80019d6:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80019d8:	f003 010c 	and.w	r1, r3, #12
 80019dc:	2908      	cmp	r1, #8
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80019e0:	4810      	ldr	r0, [pc, #64]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80019e2:	4770      	bx	lr
{
 80019e4:	b430      	push	{r4, r5}
 80019e6:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 80019ea:	fa90 f0a0 	rbit	r0, r0
 80019ee:	210f      	movs	r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019f0:	fab0 f080 	clz	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019f6:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80019fa:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80019fe:	40c3      	lsrs	r3, r0
 8001a00:	4809      	ldr	r0, [pc, #36]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001a02:	4d0a      	ldr	r5, [pc, #40]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001a04:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a06:	4c07      	ldr	r4, [pc, #28]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001a08:	fab1 f181 	clz	r1, r1
 8001a0c:	f002 030f 	and.w	r3, r2, #15
 8001a10:	40cb      	lsrs	r3, r1
 8001a12:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a14:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001a18:	bc30      	pop	{r4, r5}
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a1a:	fb00 f003 	mul.w	r0, r0, r3
}
 8001a1e:	4770      	bx	lr
 8001a20:	40021000 	.word	0x40021000
 8001a24:	007a1200 	.word	0x007a1200
 8001a28:	080027cc 	.word	0x080027cc
 8001a2c:	080027dc 	.word	0x080027dc

08001a30 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	fa92 f2a2 	rbit	r2, r2
 8001a3c:	fab2 f282 	clz	r2, r2
 8001a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a44:	40d3      	lsrs	r3, r2
 8001a46:	4904      	ldr	r1, [pc, #16]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a4a:	5ccb      	ldrb	r3, [r1, r3]
 8001a4c:	6810      	ldr	r0, [r2, #0]
}    
 8001a4e:	40d8      	lsrs	r0, r3
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	080027c4 	.word	0x080027c4
 8001a5c:	20000000 	.word	0x20000000

08001a60 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a62:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	fa92 f2a2 	rbit	r2, r2
 8001a6c:	fab2 f282 	clz	r2, r2
 8001a70:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001a74:	40d3      	lsrs	r3, r2
 8001a76:	4904      	ldr	r1, [pc, #16]	; (8001a88 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8001a78:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001a7a:	5ccb      	ldrb	r3, [r1, r3]
 8001a7c:	6810      	ldr	r0, [r2, #0]
} 
 8001a7e:	40d8      	lsrs	r0, r3
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40021000 	.word	0x40021000
 8001a88:	080027c4 	.word	0x080027c4
 8001a8c:	20000000 	.word	0x20000000

08001a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a94:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a96:	6800      	ldr	r0, [r0, #0]
 8001a98:	03c6      	lsls	r6, r0, #15
{
 8001a9a:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a9c:	d53e      	bpl.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9e:	4ba0      	ldr	r3, [pc, #640]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001aa0:	69da      	ldr	r2, [r3, #28]
 8001aa2:	00d5      	lsls	r5, r2, #3
 8001aa4:	f140 80f3 	bpl.w	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	4d9e      	ldr	r5, [pc, #632]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001aaa:	682a      	ldr	r2, [r5, #0]
 8001aac:	05d0      	lsls	r0, r2, #23
    FlagStatus       pwrclkchanged = RESET;
 8001aae:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab2:	f140 80fc 	bpl.w	8001cae <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ab6:	4d9a      	ldr	r5, [pc, #616]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ab8:	6861      	ldr	r1, [r4, #4]
 8001aba:	6a2a      	ldr	r2, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001abc:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8001ac0:	d020      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001ac2:	f401 7340 	and.w	r3, r1, #768	; 0x300
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01c      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001aca:	6a29      	ldr	r1, [r5, #32]
 8001acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad0:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001ad4:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ad8:	4f93      	ldr	r7, [pc, #588]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001ada:	fab2 f282 	clz	r2, r2
 8001ade:	443a      	add	r2, r7
 8001ae0:	0092      	lsls	r2, r2, #2
 8001ae2:	f04f 0c01 	mov.w	ip, #1
 8001ae6:	f8c2 c000 	str.w	ip, [r2]
 8001aea:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	443b      	add	r3, r7
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001afa:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001afc:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001afe:	f100 80ea 	bmi.w	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8001b02:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001b04:	4a86      	ldr	r2, [pc, #536]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b06:	6a13      	ldr	r3, [r2, #32]
 8001b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b10:	b11e      	cbz	r6, 8001b1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b12:	69d3      	ldr	r3, [r2, #28]
 8001b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b18:	61d3      	str	r3, [r2, #28]
 8001b1a:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b1c:	07c3      	lsls	r3, r0, #31
 8001b1e:	d506      	bpl.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b20:	4a7f      	ldr	r2, [pc, #508]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b22:	68a1      	ldr	r1, [r4, #8]
 8001b24:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b26:	f023 0303 	bic.w	r3, r3, #3
 8001b2a:	430b      	orrs	r3, r1
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b2e:	0787      	lsls	r7, r0, #30
 8001b30:	d506      	bpl.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b32:	4a7b      	ldr	r2, [pc, #492]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b34:	68e1      	ldr	r1, [r4, #12]
 8001b36:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b38:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001b40:	0746      	lsls	r6, r0, #29
 8001b42:	d506      	bpl.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001b44:	4a76      	ldr	r2, [pc, #472]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b46:	6921      	ldr	r1, [r4, #16]
 8001b48:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b4a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001b4e:	430b      	orrs	r3, r1
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b52:	0685      	lsls	r5, r0, #26
 8001b54:	d506      	bpl.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b56:	4a72      	ldr	r2, [pc, #456]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b58:	69e1      	ldr	r1, [r4, #28]
 8001b5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b5c:	f023 0310 	bic.w	r3, r3, #16
 8001b60:	430b      	orrs	r3, r1
 8001b62:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b64:	0381      	lsls	r1, r0, #14
 8001b66:	d506      	bpl.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001b68:	4a6d      	ldr	r2, [pc, #436]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b6a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001b6c:	6853      	ldr	r3, [r2, #4]
 8001b6e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b72:	430b      	orrs	r3, r1
 8001b74:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b76:	0642      	lsls	r2, r0, #25
 8001b78:	d506      	bpl.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b7a:	4a69      	ldr	r2, [pc, #420]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b7c:	6a21      	ldr	r1, [r4, #32]
 8001b7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b80:	f023 0320 	bic.w	r3, r3, #32
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b88:	0343      	lsls	r3, r0, #13
 8001b8a:	d506      	bpl.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b8c:	4a64      	ldr	r2, [pc, #400]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b90:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b96:	430b      	orrs	r3, r1
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001b9a:	0707      	lsls	r7, r0, #28
 8001b9c:	d506      	bpl.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001b9e:	4a60      	ldr	r2, [pc, #384]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ba0:	6961      	ldr	r1, [r4, #20]
 8001ba2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001ba4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001bac:	06c6      	lsls	r6, r0, #27
 8001bae:	d506      	bpl.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001bb0:	4a5b      	ldr	r2, [pc, #364]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001bb2:	69a1      	ldr	r1, [r4, #24]
 8001bb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bb6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001bbe:	0585      	lsls	r5, r0, #22
 8001bc0:	d506      	bpl.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001bc2:	4a57      	ldr	r2, [pc, #348]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001bc4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001bc6:	6853      	ldr	r3, [r2, #4]
 8001bc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001bd0:	0601      	lsls	r1, r0, #24
 8001bd2:	d506      	bpl.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001bd4:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001bd6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001bd8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001bda:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001bde:	430b      	orrs	r3, r1
 8001be0:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001be2:	05c2      	lsls	r2, r0, #23
 8001be4:	d506      	bpl.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001be6:	4a4e      	ldr	r2, [pc, #312]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001be8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001bea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001bec:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001bf4:	04c3      	lsls	r3, r0, #19
 8001bf6:	d506      	bpl.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001bf8:	4a49      	ldr	r2, [pc, #292]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bfc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c02:	430b      	orrs	r3, r1
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001c06:	0487      	lsls	r7, r0, #18
 8001c08:	d506      	bpl.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001c0a:	4a45      	ldr	r2, [pc, #276]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c0c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001c0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c14:	430b      	orrs	r3, r1
 8001c16:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001c18:	02c6      	lsls	r6, r0, #11
 8001c1a:	d506      	bpl.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001c1c:	4a40      	ldr	r2, [pc, #256]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001c20:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c26:	430b      	orrs	r3, r1
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001c2a:	0285      	lsls	r5, r0, #10
 8001c2c:	d506      	bpl.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001c2e:	4a3c      	ldr	r2, [pc, #240]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001c32:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c34:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001c3c:	0241      	lsls	r1, r0, #9
 8001c3e:	d506      	bpl.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001c40:	4a37      	ldr	r2, [pc, #220]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c42:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001c44:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001c4e:	0202      	lsls	r2, r0, #8
 8001c50:	d506      	bpl.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001c52:	4a33      	ldr	r2, [pc, #204]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c54:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001c56:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001c60:	01c3      	lsls	r3, r0, #7
 8001c62:	d506      	bpl.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001c64:	4a2e      	ldr	r2, [pc, #184]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c66:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001c68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001c72:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8001c76:	d007      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001c78:	4a29      	ldr	r2, [pc, #164]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c7a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001c7c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c82:	430b      	orrs	r3, r1
 8001c84:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001c86:	2000      	movs	r0, #0
}
 8001c88:	b003      	add	sp, #12
 8001c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	4d24      	ldr	r5, [pc, #144]	; (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x294>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c96:	61da      	str	r2, [r3, #28]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca2:	682a      	ldr	r2, [r5, #0]
 8001ca4:	05d0      	lsls	r0, r2, #23
      pwrclkchanged = SET;
 8001ca6:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001caa:	f53f af04 	bmi.w	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cae:	682a      	ldr	r2, [r5, #0]
 8001cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb4:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8001cb6:	f7fe fd97 	bl	80007e8 <HAL_GetTick>
 8001cba:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	682b      	ldr	r3, [r5, #0]
 8001cbe:	05d9      	lsls	r1, r3, #23
 8001cc0:	f53f aef9 	bmi.w	8001ab6 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc4:	f7fe fd90 	bl	80007e8 <HAL_GetTick>
 8001cc8:	1bc0      	subs	r0, r0, r7
 8001cca:	2864      	cmp	r0, #100	; 0x64
 8001ccc:	d9f6      	bls.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x22c>
          return HAL_TIMEOUT;
 8001cce:	2003      	movs	r0, #3
}
 8001cd0:	b003      	add	sp, #12
 8001cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd6:	4667      	mov	r7, ip
        tickstart = HAL_GetTick();
 8001cd8:	f7fe fd86 	bl	80007e8 <HAL_GetTick>
 8001cdc:	f04f 0902 	mov.w	r9, #2
 8001ce0:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce2:	e015      	b.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8001ce4:	fa99 f3a9 	rbit	r3, r9
 8001ce8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001cea:	fa99 f3a9 	rbit	r3, r9
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	f003 031f 	and.w	r3, r3, #31
 8001cf6:	fa07 f303 	lsl.w	r3, r7, r3
 8001cfa:	4213      	tst	r3, r2
 8001cfc:	f47f af01 	bne.w	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x72>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7fe fd72 	bl	80007e8 <HAL_GetTick>
 8001d04:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d08:	eba0 0008 	sub.w	r0, r0, r8
 8001d0c:	4298      	cmp	r0, r3
 8001d0e:	d8de      	bhi.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8001d10:	fa99 f3a9 	rbit	r3, r9
 8001d14:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0e3      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8001d1c:	6a2a      	ldr	r2, [r5, #32]
 8001d1e:	e7e4      	b.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40007000 	.word	0x40007000
 8001d28:	10908100 	.word	0x10908100

08001d2c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d2e:	07da      	lsls	r2, r3, #31
{
 8001d30:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001d32:	d506      	bpl.n	8001d42 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001d34:	6801      	ldr	r1, [r0, #0]
 8001d36:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001d38:	684a      	ldr	r2, [r1, #4]
 8001d3a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001d3e:	4322      	orrs	r2, r4
 8001d40:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001d42:	079c      	lsls	r4, r3, #30
 8001d44:	d506      	bpl.n	8001d54 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001d46:	6801      	ldr	r1, [r0, #0]
 8001d48:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001d4a:	684a      	ldr	r2, [r1, #4]
 8001d4c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d50:	4322      	orrs	r2, r4
 8001d52:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001d54:	0759      	lsls	r1, r3, #29
 8001d56:	d506      	bpl.n	8001d66 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001d58:	6801      	ldr	r1, [r0, #0]
 8001d5a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001d5c:	684a      	ldr	r2, [r1, #4]
 8001d5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d62:	4322      	orrs	r2, r4
 8001d64:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001d66:	071a      	lsls	r2, r3, #28
 8001d68:	d506      	bpl.n	8001d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001d6a:	6801      	ldr	r1, [r0, #0]
 8001d6c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001d6e:	684a      	ldr	r2, [r1, #4]
 8001d70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d74:	4322      	orrs	r2, r4
 8001d76:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001d78:	06dc      	lsls	r4, r3, #27
 8001d7a:	d506      	bpl.n	8001d8a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001d7c:	6801      	ldr	r1, [r0, #0]
 8001d7e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001d80:	688a      	ldr	r2, [r1, #8]
 8001d82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d86:	4322      	orrs	r2, r4
 8001d88:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001d8a:	0699      	lsls	r1, r3, #26
 8001d8c:	d506      	bpl.n	8001d9c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001d8e:	6801      	ldr	r1, [r0, #0]
 8001d90:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001d92:	688a      	ldr	r2, [r1, #8]
 8001d94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d98:	4322      	orrs	r2, r4
 8001d9a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001d9c:	065a      	lsls	r2, r3, #25
 8001d9e:	d509      	bpl.n	8001db4 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001da0:	6801      	ldr	r1, [r0, #0]
 8001da2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001da4:	684a      	ldr	r2, [r1, #4]
 8001da6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001daa:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001dac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001db0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001db2:	d00b      	beq.n	8001dcc <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001db4:	061b      	lsls	r3, r3, #24
 8001db6:	d506      	bpl.n	8001dc6 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001db8:	6802      	ldr	r2, [r0, #0]
 8001dba:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001dbc:	6853      	ldr	r3, [r2, #4]
 8001dbe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001dc2:	430b      	orrs	r3, r1
 8001dc4:	6053      	str	r3, [r2, #4]
  }
}
 8001dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dca:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001dcc:	684a      	ldr	r2, [r1, #4]
 8001dce:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001dd0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001dd4:	4322      	orrs	r2, r4
 8001dd6:	604a      	str	r2, [r1, #4]
 8001dd8:	e7ec      	b.n	8001db4 <UART_AdvFeatureConfig+0x88>
 8001dda:	bf00      	nop

08001ddc <HAL_UART_Init>:
  if (huart == NULL)
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	d040      	beq.n	8001e62 <HAL_UART_Init+0x86>
{
 8001de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001de2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001de4:	4604      	mov	r4, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d036      	beq.n	8001e58 <HAL_UART_Init+0x7c>
  __HAL_UART_DISABLE(huart);
 8001dea:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001dec:	6927      	ldr	r7, [r4, #16]
 8001dee:	6966      	ldr	r6, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001df0:	49af      	ldr	r1, [pc, #700]	; (80020b0 <HAL_UART_Init+0x2d4>)
  huart->gState = HAL_UART_STATE_BUSY;
 8001df2:	2224      	movs	r2, #36	; 0x24
 8001df4:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001df6:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001df8:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8001dfa:	f020 0001 	bic.w	r0, r0, #1
 8001dfe:	6018      	str	r0, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e00:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e02:	69e0      	ldr	r0, [r4, #28]
 8001e04:	433a      	orrs	r2, r7
 8001e06:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e08:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e0a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e10:	6859      	ldr	r1, [r3, #4]
 8001e12:	68e5      	ldr	r5, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e14:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8001e16:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e18:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001e1c:	4329      	orrs	r1, r5
 8001e1e:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e20:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e22:	4da4      	ldr	r5, [pc, #656]	; (80020b4 <HAL_UART_Init+0x2d8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e24:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8001e28:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e2a:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e2c:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e2e:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e30:	d019      	beq.n	8001e66 <HAL_UART_Init+0x8a>
 8001e32:	4aa1      	ldr	r2, [pc, #644]	; (80020b8 <HAL_UART_Init+0x2dc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d037      	beq.n	8001ea8 <HAL_UART_Init+0xcc>
 8001e38:	4aa0      	ldr	r2, [pc, #640]	; (80020bc <HAL_UART_Init+0x2e0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	f000 80e6 	beq.w	800200c <HAL_UART_Init+0x230>
 8001e40:	4a9f      	ldr	r2, [pc, #636]	; (80020c0 <HAL_UART_Init+0x2e4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d065      	beq.n	8001f12 <HAL_UART_Init+0x136>
 8001e46:	4a9f      	ldr	r2, [pc, #636]	; (80020c4 <HAL_UART_Init+0x2e8>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	f000 8105 	beq.w	8002058 <HAL_UART_Init+0x27c>
  huart->RxISR = NULL;
 8001e4e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8001e50:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
    return HAL_ERROR;
 8001e54:	2001      	movs	r0, #1
}
 8001e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8001e58:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8001e5c:	f7fe fc04 	bl	8000668 <HAL_UART_MspInit>
 8001e60:	e7c3      	b.n	8001dea <HAL_UART_Init+0xe>
    return HAL_ERROR;
 8001e62:	2001      	movs	r0, #1
}
 8001e64:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e66:	4b98      	ldr	r3, [pc, #608]	; (80020c8 <HAL_UART_Init+0x2ec>)
 8001e68:	4a98      	ldr	r2, [pc, #608]	; (80020cc <HAL_UART_Init+0x2f0>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e70:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001e74:	5cd3      	ldrb	r3, [r2, r3]
 8001e76:	f000 812b 	beq.w	80020d0 <HAL_UART_Init+0x2f4>
    switch (clocksource)
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d8e7      	bhi.n	8001e4e <HAL_UART_Init+0x72>
 8001e7e:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <HAL_UART_Init+0xa8>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08002047 	.word	0x08002047
 8001e88:	08001f35 	.word	0x08001f35
 8001e8c:	0800207f 	.word	0x0800207f
 8001e90:	08001e4f 	.word	0x08001e4f
 8001e94:	0800206d 	.word	0x0800206d
 8001e98:	08001e4f 	.word	0x08001e4f
 8001e9c:	08001e4f 	.word	0x08001e4f
 8001ea0:	08001e4f 	.word	0x08001e4f
 8001ea4:	0800202b 	.word	0x0800202b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ea8:	4b87      	ldr	r3, [pc, #540]	; (80020c8 <HAL_UART_Init+0x2ec>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	f000 80d7 	beq.w	8002066 <HAL_UART_Init+0x28a>
 8001eb8:	f240 80bf 	bls.w	800203a <HAL_UART_Init+0x25e>
 8001ebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ec0:	f000 80af 	beq.w	8002022 <HAL_UART_Init+0x246>
 8001ec4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001ec8:	d1c1      	bne.n	8001e4e <HAL_UART_Init+0x72>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001ece:	f040 80d6 	bne.w	800207e <HAL_UART_Init+0x2a2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001ed2:	6862      	ldr	r2, [r4, #4]
 8001ed4:	0853      	lsrs	r3, r2, #1
 8001ed6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001eda:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001ede:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ee2:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ee4:	f1a3 0110 	sub.w	r1, r3, #16
 8001ee8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001eec:	4291      	cmp	r1, r2
 8001eee:	d8ae      	bhi.n	8001e4e <HAL_UART_Init+0x72>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001ef0:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ef4:	f3c3 0242 	ubfx	r2, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	60da      	str	r2, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001efe:	6a62      	ldr	r2, [r4, #36]	; 0x24
  huart->RxISR = NULL;
 8001f00:	2100      	movs	r1, #0
  huart->TxISR = NULL;
 8001f02:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f06:	b362      	cbz	r2, 8001f62 <HAL_UART_Init+0x186>
    UART_AdvFeatureConfig(huart);
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7ff ff0f 	bl	8001d2c <UART_AdvFeatureConfig>
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	e027      	b.n	8001f62 <HAL_UART_Init+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f12:	4b6d      	ldr	r3, [pc, #436]	; (80020c8 <HAL_UART_Init+0x2ec>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f1e:	f000 80a2 	beq.w	8002066 <HAL_UART_Init+0x28a>
 8001f22:	f240 808a 	bls.w	800203a <HAL_UART_Init+0x25e>
 8001f26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f2a:	d07a      	beq.n	8002022 <HAL_UART_Init+0x246>
 8001f2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001f30:	d0cb      	beq.n	8001eca <HAL_UART_Init+0xee>
 8001f32:	e78c      	b.n	8001e4e <HAL_UART_Init+0x72>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001f34:	f7ff fd94 	bl	8001a60 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f38:	6863      	ldr	r3, [r4, #4]
 8001f3a:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8001f3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f42:	b292      	uxth	r2, r2
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f44:	f1a2 0110 	sub.w	r1, r2, #16
 8001f48:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001f4c:	4299      	cmp	r1, r3
 8001f4e:	f63f af7e 	bhi.w	8001e4e <HAL_UART_Init+0x72>
      huart->Instance->BRR = usartdiv;
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	60da      	str	r2, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f56:	6a62      	ldr	r2, [r4, #36]	; 0x24
  huart->RxISR = NULL;
 8001f58:	2100      	movs	r1, #0
  huart->TxISR = NULL;
 8001f5a:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f5e:	2a00      	cmp	r2, #0
 8001f60:	d1d2      	bne.n	8001f08 <HAL_UART_Init+0x12c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f70:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001f72:	681a      	ldr	r2, [r3, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f74:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7c:	67e1      	str	r1, [r4, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001f7e:	f7fe fc33 	bl	80007e8 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8001f88:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001f8a:	d409      	bmi.n	8001fa0 <HAL_UART_Init+0x1c4>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	0750      	lsls	r0, r2, #29
 8001f90:	d42a      	bmi.n	8001fe8 <HAL_UART_Init+0x20c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001f92:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);
 8001f94:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001f96:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8001f98:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001f9c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8001f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa0:	69dd      	ldr	r5, [r3, #28]
 8001fa2:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8001fa6:	d1f1      	bne.n	8001f8c <HAL_UART_Init+0x1b0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa8:	f7fe fc1e 	bl	80007e8 <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fac:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fae:	1b80      	subs	r0, r0, r6
 8001fb0:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fb4:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb6:	d26c      	bcs.n	8002092 <HAL_UART_Init+0x2b6>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001fb8:	0752      	lsls	r2, r2, #29
 8001fba:	d5f1      	bpl.n	8001fa0 <HAL_UART_Init+0x1c4>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001fbc:	69da      	ldr	r2, [r3, #28]
 8001fbe:	0517      	lsls	r7, r2, #20
 8001fc0:	d5ee      	bpl.n	8001fa0 <HAL_UART_Init+0x1c4>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fc6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001fce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fd0:	6899      	ldr	r1, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001fd2:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fd4:	f021 0101 	bic.w	r1, r1, #1
 8001fd8:	6099      	str	r1, [r3, #8]
      return HAL_TIMEOUT;
 8001fda:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8001fdc:	6762      	str	r2, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001fde:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 8001fe2:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001fe4:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 8001fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fe8:	69dd      	ldr	r5, [r3, #28]
 8001fea:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8001fee:	d1d0      	bne.n	8001f92 <HAL_UART_Init+0x1b6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff0:	f7fe fbfa 	bl	80007e8 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ff4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff6:	1b80      	subs	r0, r0, r6
 8001ff8:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ffc:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ffe:	d248      	bcs.n	8002092 <HAL_UART_Init+0x2b6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002000:	0751      	lsls	r1, r2, #29
 8002002:	d5f1      	bpl.n	8001fe8 <HAL_UART_Init+0x20c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002004:	69da      	ldr	r2, [r3, #28]
 8002006:	0512      	lsls	r2, r2, #20
 8002008:	d5ee      	bpl.n	8001fe8 <HAL_UART_Init+0x20c>
 800200a:	e7da      	b.n	8001fc2 <HAL_UART_Init+0x1e6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800200c:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <HAL_UART_Init+0x2ec>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002014:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002018:	d025      	beq.n	8002066 <HAL_UART_Init+0x28a>
 800201a:	d90e      	bls.n	800203a <HAL_UART_Init+0x25e>
 800201c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002020:	d177      	bne.n	8002112 <HAL_UART_Init+0x336>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002022:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002026:	f000 8086 	beq.w	8002136 <HAL_UART_Init+0x35a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800202a:	6863      	ldr	r3, [r4, #4]
 800202c:	085a      	lsrs	r2, r3, #1
 800202e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8002032:	fbb2 f2f3 	udiv	r2, r2, r3
 8002036:	b292      	uxth	r2, r2
 8002038:	e784      	b.n	8001f44 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800203a:	2b00      	cmp	r3, #0
 800203c:	f47f af07 	bne.w	8001e4e <HAL_UART_Init+0x72>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002040:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002044:	d07f      	beq.n	8002146 <HAL_UART_Init+0x36a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002046:	f7ff fcf3 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800204a:	6863      	ldr	r3, [r4, #4]
 800204c:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8002050:	fbb2 f2f3 	udiv	r2, r2, r3
 8002054:	b292      	uxth	r2, r2
 8002056:	e775      	b.n	8001f44 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_UART_Init+0x2ec>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002064:	d14c      	bne.n	8002100 <HAL_UART_Init+0x324>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002066:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800206a:	d057      	beq.n	800211c <HAL_UART_Init+0x340>
        pclk = HAL_RCC_GetSysClockFreq();
 800206c:	f7ff fcb2 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002070:	6863      	ldr	r3, [r4, #4]
 8002072:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8002076:	fbb2 f2f3 	udiv	r2, r2, r3
 800207a:	b292      	uxth	r2, r2
 800207c:	e762      	b.n	8001f44 <HAL_UART_Init+0x168>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800207e:	6863      	ldr	r3, [r4, #4]
 8002080:	085a      	lsrs	r2, r3, #1
 8002082:	f502 02f4 	add.w	r2, r2, #7995392	; 0x7a0000
 8002086:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
 800208a:	fbb2 f2f3 	udiv	r2, r2, r3
 800208e:	b292      	uxth	r2, r2
 8002090:	e758      	b.n	8001f44 <HAL_UART_Init+0x168>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002092:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002096:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002098:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800209a:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 80020a2:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80020a4:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 80020a6:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80020aa:	67a1      	str	r1, [r4, #120]	; 0x78
}
 80020ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020ae:	bf00      	nop
 80020b0:	efff69f3 	.word	0xefff69f3
 80020b4:	40013800 	.word	0x40013800
 80020b8:	40004400 	.word	0x40004400
 80020bc:	40004800 	.word	0x40004800
 80020c0:	40004c00 	.word	0x40004c00
 80020c4:	40005000 	.word	0x40005000
 80020c8:	40021000 	.word	0x40021000
 80020cc:	080027ec 	.word	0x080027ec
    switch (clocksource)
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	f63f aebc 	bhi.w	8001e4e <HAL_UART_Init+0x72>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <HAL_UART_Init+0x300>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	08002147 	.word	0x08002147
 80020e0:	08002131 	.word	0x08002131
 80020e4:	08001ed3 	.word	0x08001ed3
 80020e8:	08001e4f 	.word	0x08001e4f
 80020ec:	0800211d 	.word	0x0800211d
 80020f0:	08001e4f 	.word	0x08001e4f
 80020f4:	08001e4f 	.word	0x08001e4f
 80020f8:	08001e4f 	.word	0x08001e4f
 80020fc:	08002137 	.word	0x08002137
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002100:	d99b      	bls.n	800203a <HAL_UART_Init+0x25e>
 8002102:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002106:	d08c      	beq.n	8002022 <HAL_UART_Init+0x246>
 8002108:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800210c:	f43f aedd 	beq.w	8001eca <HAL_UART_Init+0xee>
 8002110:	e69d      	b.n	8001e4e <HAL_UART_Init+0x72>
 8002112:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002116:	f43f aed8 	beq.w	8001eca <HAL_UART_Init+0xee>
 800211a:	e698      	b.n	8001e4e <HAL_UART_Init+0x72>
        pclk = HAL_RCC_GetSysClockFreq();
 800211c:	f7ff fc5a 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002120:	6862      	ldr	r2, [r4, #4]
 8002122:	0853      	lsrs	r3, r2, #1
 8002124:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002128:	fbb3 f3f2 	udiv	r3, r3, r2
 800212c:	b29b      	uxth	r3, r3
 800212e:	e6d9      	b.n	8001ee4 <HAL_UART_Init+0x108>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002130:	f7ff fc96 	bl	8001a60 <HAL_RCC_GetPCLK2Freq>
 8002134:	e7f4      	b.n	8002120 <HAL_UART_Init+0x344>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002136:	6862      	ldr	r2, [r4, #4]
 8002138:	0853      	lsrs	r3, r2, #1
 800213a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800213e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002142:	b29b      	uxth	r3, r3
 8002144:	e6ce      	b.n	8001ee4 <HAL_UART_Init+0x108>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002146:	f7ff fc73 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
 800214a:	e7e9      	b.n	8002120 <HAL_UART_Init+0x344>

0800214c <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 800214c:	b470      	push	{r4, r5, r6}
  return (READ_BIT(DACx->CR,
 800214e:	f001 0110 	and.w	r1, r1, #16
 8002152:	6805      	ldr	r5, [r0, #0]
 8002154:	2301      	movs	r3, #1
 8002156:	fa03 f401 	lsl.w	r4, r3, r1
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 800215a:	43ac      	bics	r4, r5
 800215c:	d00d      	beq.n	800217a <LL_DAC_Init+0x2e>
 800215e:	e9d2 4300 	ldrd	r4, r3, [r2]
 8002162:	68d6      	ldr	r6, [r2, #12]
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8002164:	b963      	cbnz	r3, 8002180 <LL_DAC_Init+0x34>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 8002166:	6802      	ldr	r2, [r0, #0]
 8002168:	25fa      	movs	r5, #250	; 0xfa
 800216a:	4334      	orrs	r4, r6
 800216c:	408d      	lsls	r5, r1
 800216e:	fa04 f101 	lsl.w	r1, r4, r1
 8002172:	ea22 0405 	bic.w	r4, r2, r5
 8002176:	4321      	orrs	r1, r4
 8002178:	6001      	str	r1, [r0, #0]
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
  }
  return status;
}
 800217a:	4618      	mov	r0, r3
 800217c:	bc70      	pop	{r4, r5, r6}
 800217e:	4770      	bx	lr
      MODIFY_REG(DACx->CR,
 8002180:	6895      	ldr	r5, [r2, #8]
 8002182:	6802      	ldr	r2, [r0, #0]
 8002184:	4323      	orrs	r3, r4
 8002186:	4333      	orrs	r3, r6
 8002188:	f640 74fa 	movw	r4, #4090	; 0xffa
 800218c:	432b      	orrs	r3, r5
 800218e:	408c      	lsls	r4, r1
 8002190:	fa03 f101 	lsl.w	r1, r3, r1
 8002194:	ea22 0304 	bic.w	r3, r2, r4
 8002198:	4319      	orrs	r1, r3
  ErrorStatus status = SUCCESS;
 800219a:	2300      	movs	r3, #0
      MODIFY_REG(DACx->CR,
 800219c:	6001      	str	r1, [r0, #0]
}
 800219e:	bc70      	pop	{r4, r5, r6}
 80021a0:	4618      	mov	r0, r3
 80021a2:	4770      	bx	lr

080021a4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80021a4:	b430      	push	{r4, r5}
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80021a6:	7a04      	ldrb	r4, [r0, #8]
 80021a8:	e9d0 3500 	ldrd	r3, r5, [r0]
 80021ac:	2c00      	cmp	r4, #0
 80021ae:	d033      	beq.n	8002218 <LL_EXTI_Init+0x74>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80021b0:	b1c3      	cbz	r3, 80021e4 <LL_EXTI_Init+0x40>
    {
      switch (EXTI_InitStruct->Mode)
 80021b2:	7a42      	ldrb	r2, [r0, #9]
 80021b4:	2a01      	cmp	r2, #1
 80021b6:	d04b      	beq.n	8002250 <LL_EXTI_Init+0xac>
 80021b8:	d367      	bcc.n	800228a <LL_EXTI_Init+0xe6>
 80021ba:	2a02      	cmp	r2, #2
 80021bc:	d163      	bne.n	8002286 <LL_EXTI_Init+0xe2>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR, ExtiLine);
 80021be:	4a4d      	ldr	r2, [pc, #308]	; (80022f4 <LL_EXTI_Init+0x150>)
 80021c0:	6811      	ldr	r1, [r2, #0]
 80021c2:	4319      	orrs	r1, r3
 80021c4:	6011      	str	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->EMR, ExtiLine);
 80021c6:	6851      	ldr	r1, [r2, #4]
 80021c8:	4319      	orrs	r1, r3
 80021ca:	6051      	str	r1, [r2, #4]
 80021cc:	2100      	movs	r1, #0
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80021ce:	7a82      	ldrb	r2, [r0, #10]
 80021d0:	2a00      	cmp	r2, #0
 80021d2:	d049      	beq.n	8002268 <LL_EXTI_Init+0xc4>
      {
        switch (EXTI_InitStruct->Trigger)
 80021d4:	2a02      	cmp	r2, #2
 80021d6:	f000 8088 	beq.w	80022ea <LL_EXTI_Init+0x146>
 80021da:	2a03      	cmp	r2, #3
 80021dc:	d03d      	beq.n	800225a <LL_EXTI_Init+0xb6>
 80021de:	2a01      	cmp	r2, #1
 80021e0:	d066      	beq.n	80022b0 <LL_EXTI_Init+0x10c>
 80021e2:	2301      	movs	r3, #1
        }
      }
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80021e4:	b1ad      	cbz	r5, 8002212 <LL_EXTI_Init+0x6e>
    {
      switch (EXTI_InitStruct->Mode)
 80021e6:	7a42      	ldrb	r2, [r0, #9]
 80021e8:	2a01      	cmp	r2, #1
 80021ea:	d041      	beq.n	8002270 <LL_EXTI_Init+0xcc>
 80021ec:	d327      	bcc.n	800223e <LL_EXTI_Init+0x9a>
 80021ee:	2a02      	cmp	r2, #2
 80021f0:	d147      	bne.n	8002282 <LL_EXTI_Init+0xde>
  SET_BIT(EXTI->IMR2, ExtiLine);
 80021f2:	4a40      	ldr	r2, [pc, #256]	; (80022f4 <LL_EXTI_Init+0x150>)
 80021f4:	6a11      	ldr	r1, [r2, #32]
 80021f6:	4329      	orrs	r1, r5
 80021f8:	6211      	str	r1, [r2, #32]
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->EMR2, ExtiLine);
 80021fa:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80021fc:	4329      	orrs	r1, r5
 80021fe:	6251      	str	r1, [r2, #36]	; 0x24
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002200:	7a82      	ldrb	r2, [r0, #10]
 8002202:	b132      	cbz	r2, 8002212 <LL_EXTI_Init+0x6e>
      {
        switch (EXTI_InitStruct->Trigger)
 8002204:	2a02      	cmp	r2, #2
 8002206:	d067      	beq.n	80022d8 <LL_EXTI_Init+0x134>
 8002208:	2a03      	cmp	r2, #3
 800220a:	d05d      	beq.n	80022c8 <LL_EXTI_Init+0x124>
 800220c:	2a01      	cmp	r2, #1
 800220e:	d046      	beq.n	800229e <LL_EXTI_Init+0xfa>
 8002210:	2301      	movs	r3, #1
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
#endif
  }
  return status;
}
 8002212:	4618      	mov	r0, r3
 8002214:	bc30      	pop	{r4, r5}
 8002216:	4770      	bx	lr
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002218:	4a36      	ldr	r2, [pc, #216]	; (80022f4 <LL_EXTI_Init+0x150>)
 800221a:	6811      	ldr	r1, [r2, #0]
 800221c:	43db      	mvns	r3, r3
 800221e:	4019      	ands	r1, r3
 8002220:	6011      	str	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002222:	6850      	ldr	r0, [r2, #4]
 8002224:	4018      	ands	r0, r3
 8002226:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002228:	6a11      	ldr	r1, [r2, #32]
 800222a:	43eb      	mvns	r3, r5
 800222c:	4019      	ands	r1, r3
 800222e:	6211      	str	r1, [r2, #32]
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002230:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002232:	4019      	ands	r1, r3
 8002234:	4623      	mov	r3, r4
 8002236:	4618      	mov	r0, r3
 8002238:	6251      	str	r1, [r2, #36]	; 0x24
 800223a:	bc30      	pop	{r4, r5}
 800223c:	4770      	bx	lr
 800223e:	4a2d      	ldr	r2, [pc, #180]	; (80022f4 <LL_EXTI_Init+0x150>)
 8002240:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002242:	ea21 0105 	bic.w	r1, r1, r5
 8002246:	6251      	str	r1, [r2, #36]	; 0x24
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002248:	6a11      	ldr	r1, [r2, #32]
 800224a:	4329      	orrs	r1, r5
 800224c:	6211      	str	r1, [r2, #32]
 800224e:	e7d7      	b.n	8002200 <LL_EXTI_Init+0x5c>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002250:	4a28      	ldr	r2, [pc, #160]	; (80022f4 <LL_EXTI_Init+0x150>)
 8002252:	6811      	ldr	r1, [r2, #0]
 8002254:	ea21 0103 	bic.w	r1, r1, r3
 8002258:	e7b4      	b.n	80021c4 <LL_EXTI_Init+0x20>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR, ExtiLine);
 800225a:	4a26      	ldr	r2, [pc, #152]	; (80022f4 <LL_EXTI_Init+0x150>)
 800225c:	6894      	ldr	r4, [r2, #8]
 800225e:	431c      	orrs	r4, r3
 8002260:	6094      	str	r4, [r2, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002262:	68d4      	ldr	r4, [r2, #12]
 8002264:	4323      	orrs	r3, r4
 8002266:	60d3      	str	r3, [r2, #12]
 8002268:	460b      	mov	r3, r1
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800226a:	2d00      	cmp	r5, #0
 800226c:	d1bb      	bne.n	80021e6 <LL_EXTI_Init+0x42>
 800226e:	e7d0      	b.n	8002212 <LL_EXTI_Init+0x6e>
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002270:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <LL_EXTI_Init+0x150>)
 8002272:	6a11      	ldr	r1, [r2, #32]
 8002274:	ea21 0105 	bic.w	r1, r1, r5
 8002278:	6211      	str	r1, [r2, #32]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800227a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800227c:	4329      	orrs	r1, r5
 800227e:	6251      	str	r1, [r2, #36]	; 0x24
 8002280:	e7be      	b.n	8002200 <LL_EXTI_Init+0x5c>
      switch (EXTI_InitStruct->Mode)
 8002282:	2301      	movs	r3, #1
 8002284:	e7bc      	b.n	8002200 <LL_EXTI_Init+0x5c>
      switch (EXTI_InitStruct->Mode)
 8002286:	2101      	movs	r1, #1
 8002288:	e7a1      	b.n	80021ce <LL_EXTI_Init+0x2a>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800228a:	4a1a      	ldr	r2, [pc, #104]	; (80022f4 <LL_EXTI_Init+0x150>)
 800228c:	6851      	ldr	r1, [r2, #4]
 800228e:	ea21 0103 	bic.w	r1, r1, r3
 8002292:	6051      	str	r1, [r2, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002294:	6811      	ldr	r1, [r2, #0]
 8002296:	4319      	orrs	r1, r3
 8002298:	6011      	str	r1, [r2, #0]
 800229a:	2100      	movs	r1, #0
 800229c:	e797      	b.n	80021ce <LL_EXTI_Init+0x2a>
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800229e:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <LL_EXTI_Init+0x150>)
 80022a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022a2:	ea21 0105 	bic.w	r1, r1, r5
 80022a6:	62d1      	str	r1, [r2, #44]	; 0x2c
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80022a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80022aa:	430d      	orrs	r5, r1
 80022ac:	6295      	str	r5, [r2, #40]	; 0x28
 80022ae:	e7b0      	b.n	8002212 <LL_EXTI_Init+0x6e>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80022b0:	4a10      	ldr	r2, [pc, #64]	; (80022f4 <LL_EXTI_Init+0x150>)
 80022b2:	68d4      	ldr	r4, [r2, #12]
 80022b4:	ea24 0403 	bic.w	r4, r4, r3
 80022b8:	60d4      	str	r4, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80022ba:	6894      	ldr	r4, [r2, #8]
 80022bc:	4323      	orrs	r3, r4
 80022be:	6093      	str	r3, [r2, #8]
 80022c0:	460b      	mov	r3, r1
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80022c2:	2d00      	cmp	r5, #0
 80022c4:	d18f      	bne.n	80021e6 <LL_EXTI_Init+0x42>
 80022c6:	e7a4      	b.n	8002212 <LL_EXTI_Init+0x6e>
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80022c8:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <LL_EXTI_Init+0x150>)
 80022ca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80022cc:	4329      	orrs	r1, r5
 80022ce:	6291      	str	r1, [r2, #40]	; 0x28
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80022d0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022d2:	430d      	orrs	r5, r1
 80022d4:	62d5      	str	r5, [r2, #44]	; 0x2c
 80022d6:	e79c      	b.n	8002212 <LL_EXTI_Init+0x6e>
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80022d8:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <LL_EXTI_Init+0x150>)
 80022da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80022dc:	ea21 0105 	bic.w	r1, r1, r5
 80022e0:	6291      	str	r1, [r2, #40]	; 0x28
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80022e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022e4:	430d      	orrs	r5, r1
 80022e6:	62d5      	str	r5, [r2, #44]	; 0x2c
 80022e8:	e793      	b.n	8002212 <LL_EXTI_Init+0x6e>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80022ea:	4a02      	ldr	r2, [pc, #8]	; (80022f4 <LL_EXTI_Init+0x150>)
 80022ec:	6894      	ldr	r4, [r2, #8]
 80022ee:	ea24 0403 	bic.w	r4, r4, r3
 80022f2:	e7b5      	b.n	8002260 <LL_EXTI_Init+0xbc>
 80022f4:	40010400 	.word	0x40010400

080022f8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80022f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80022fc:	680c      	ldr	r4, [r1, #0]
 80022fe:	fa94 f2a4 	rbit	r2, r4
 8002302:	684e      	ldr	r6, [r1, #4]
 8002304:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002308:	fa34 f302 	lsrs.w	r3, r4, r2
 800230c:	f106 3eff 	add.w	lr, r6, #4294967295	; 0xffffffff
 8002310:	d079      	beq.n	8002406 <LL_GPIO_Init+0x10e>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002312:	f04f 0c01 	mov.w	ip, #1
 8002316:	2703      	movs	r7, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002318:	f04f 080f 	mov.w	r8, #15
 800231c:	e003      	b.n	8002326 <LL_GPIO_Init+0x2e>
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 800231e:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002320:	fa34 f302 	lsrs.w	r3, r4, r2
 8002324:	d06f      	beq.n	8002406 <LL_GPIO_Init+0x10e>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002326:	fa0c f302 	lsl.w	r3, ip, r2
    if (currentpin != 0x00u)
 800232a:	4023      	ands	r3, r4
 800232c:	d0f7      	beq.n	800231e <LL_GPIO_Init+0x26>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800232e:	f8d0 9000 	ldr.w	r9, [r0]
 8002332:	fa93 faa3 	rbit	sl, r3
 8002336:	faba fa8a 	clz	sl, sl
 800233a:	fa93 f5a3 	rbit	r5, r3
 800233e:	fab5 f585 	clz	r5, r5
 8002342:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8002346:	006d      	lsls	r5, r5, #1
 8002348:	fa07 fa0a 	lsl.w	sl, r7, sl
 800234c:	fa06 f505 	lsl.w	r5, r6, r5
 8002350:	ea29 090a 	bic.w	r9, r9, sl
 8002354:	ea49 0505 	orr.w	r5, r9, r5
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002358:	f1be 0f01 	cmp.w	lr, #1
 800235c:	6005      	str	r5, [r0, #0]
 800235e:	d816      	bhi.n	800238e <LL_GPIO_Init+0x96>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002360:	6885      	ldr	r5, [r0, #8]
 8002362:	fa93 f9a3 	rbit	r9, r3
 8002366:	fab9 f989 	clz	r9, r9
 800236a:	fa93 faa3 	rbit	sl, r3
 800236e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8002372:	fa07 f909 	lsl.w	r9, r7, r9
 8002376:	ea25 0909 	bic.w	r9, r5, r9
 800237a:	faba fa8a 	clz	sl, sl
 800237e:	688d      	ldr	r5, [r1, #8]
 8002380:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8002384:	fa05 f50a 	lsl.w	r5, r5, sl
 8002388:	ea49 0505 	orr.w	r5, r9, r5
 800238c:	6085      	str	r5, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800238e:	68c5      	ldr	r5, [r0, #12]
 8002390:	fa93 f9a3 	rbit	r9, r3
 8002394:	fab9 f989 	clz	r9, r9
 8002398:	fa93 faa3 	rbit	sl, r3
 800239c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80023a0:	fa07 f909 	lsl.w	r9, r7, r9
 80023a4:	ea25 0909 	bic.w	r9, r5, r9
 80023a8:	faba fa8a 	clz	sl, sl
 80023ac:	690d      	ldr	r5, [r1, #16]
 80023ae:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80023b2:	fa05 f50a 	lsl.w	r5, r5, sl
 80023b6:	ea49 0505 	orr.w	r5, r9, r5
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80023ba:	2e02      	cmp	r6, #2
 80023bc:	60c5      	str	r5, [r0, #12]
 80023be:	d1ae      	bne.n	800231e <LL_GPIO_Init+0x26>
 80023c0:	fa93 faa3 	rbit	sl, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80023c4:	faba fa8a 	clz	sl, sl
 80023c8:	f1ba 0f07 	cmp.w	sl, #7
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80023cc:	ea4f 2513 	mov.w	r5, r3, lsr #8
 80023d0:	f8d1 9014 	ldr.w	r9, [r1, #20]
 80023d4:	dc25      	bgt.n	8002422 <LL_GPIO_Init+0x12a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80023d6:	6a05      	ldr	r5, [r0, #32]
 80023d8:	fa93 faa3 	rbit	sl, r3
 80023dc:	faba fa8a 	clz	sl, sl
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	fab3 f383 	clz	r3, r3
 80023e8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	fa08 fa0a 	lsl.w	sl, r8, sl
 80023f2:	fa09 f303 	lsl.w	r3, r9, r3
 80023f6:	ea25 050a 	bic.w	r5, r5, sl
 80023fa:	432b      	orrs	r3, r5
    pinpos++;
 80023fc:	3201      	adds	r2, #1
 80023fe:	6203      	str	r3, [r0, #32]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002400:	fa34 f302 	lsrs.w	r3, r4, r2
 8002404:	d18f      	bne.n	8002326 <LL_GPIO_Init+0x2e>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002406:	f1be 0f01 	cmp.w	lr, #1
 800240a:	d807      	bhi.n	800241c <LL_GPIO_Init+0x124>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800240c:	68ca      	ldr	r2, [r1, #12]
 800240e:	6843      	ldr	r3, [r0, #4]
 8002410:	fb02 f204 	mul.w	r2, r2, r4
 8002414:	ea23 0404 	bic.w	r4, r3, r4
 8002418:	4314      	orrs	r4, r2
 800241a:	6044      	str	r4, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 800241c:	2000      	movs	r0, #0
 800241e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002422:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8002426:	fa95 fba5 	rbit	fp, r5
 800242a:	fabb fb8b 	clz	fp, fp
 800242e:	fa95 f3a5 	rbit	r3, r5
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	fa08 fb0b 	lsl.w	fp, r8, fp
 8002440:	fa09 f303 	lsl.w	r3, r9, r3
 8002444:	ea2a 0a0b 	bic.w	sl, sl, fp
 8002448:	ea4a 0303 	orr.w	r3, sl, r3
 800244c:	6243      	str	r3, [r0, #36]	; 0x24
 800244e:	e766      	b.n	800231e <LL_GPIO_Init+0x26>

08002450 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002450:	b470      	push	{r4, r5, r6}
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002452:	4d38      	ldr	r5, [pc, #224]	; (8002534 <LL_TIM_Init+0xe4>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002454:	6803      	ldr	r3, [r0, #0]
 8002456:	688c      	ldr	r4, [r1, #8]
 8002458:	880a      	ldrh	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800245a:	42a8      	cmp	r0, r5
 800245c:	d057      	beq.n	800250e <LL_TIM_Init+0xbe>
 800245e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002462:	d022      	beq.n	80024aa <LL_TIM_Init+0x5a>
 8002464:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 8002468:	42a8      	cmp	r0, r5
 800246a:	d041      	beq.n	80024f0 <LL_TIM_Init+0xa0>
 800246c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002470:	42a8      	cmp	r0, r5
 8002472:	d03d      	beq.n	80024f0 <LL_TIM_Init+0xa0>
 8002474:	f505 3596 	add.w	r5, r5, #76800	; 0x12c00
 8002478:	42a8      	cmp	r0, r5
 800247a:	d039      	beq.n	80024f0 <LL_TIM_Init+0xa0>
 800247c:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8002480:	42a8      	cmp	r0, r5
 8002482:	d052      	beq.n	800252a <LL_TIM_Init+0xda>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002484:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
 8002488:	42a8      	cmp	r0, r5
 800248a:	d04c      	beq.n	8002526 <LL_TIM_Init+0xd6>
 800248c:	4d2a      	ldr	r5, [pc, #168]	; (8002538 <LL_TIM_Init+0xe8>)
 800248e:	42a8      	cmp	r0, r5
 8002490:	d049      	beq.n	8002526 <LL_TIM_Init+0xd6>
 8002492:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002496:	42a8      	cmp	r0, r5
 8002498:	d045      	beq.n	8002526 <LL_TIM_Init+0xd6>
 800249a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800249e:	42a8      	cmp	r0, r5
 80024a0:	d041      	beq.n	8002526 <LL_TIM_Init+0xd6>
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80024a2:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80024a4:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80024a6:	6282      	str	r2, [r0, #40]	; 0x28
 80024a8:	e01b      	b.n	80024e2 <LL_TIM_Init+0x92>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80024aa:	684e      	ldr	r6, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80024ac:	68cd      	ldr	r5, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80024ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b2:	4333      	orrs	r3, r6
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80024b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b8:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80024ba:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80024bc:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80024be:	6282      	str	r2, [r0, #40]	; 0x28
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024c0:	4b1e      	ldr	r3, [pc, #120]	; (800253c <LL_TIM_Init+0xec>)
 80024c2:	4298      	cmp	r0, r3
 80024c4:	d00b      	beq.n	80024de <LL_TIM_Init+0x8e>
 80024c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ca:	4298      	cmp	r0, r3
 80024cc:	d007      	beq.n	80024de <LL_TIM_Init+0x8e>
 80024ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024d2:	4298      	cmp	r0, r3
 80024d4:	d003      	beq.n	80024de <LL_TIM_Init+0x8e>
 80024d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024da:	4298      	cmp	r0, r3
 80024dc:	d101      	bne.n	80024e2 <LL_TIM_Init+0x92>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80024de:	7c0b      	ldrb	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80024e0:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80024e2:	6943      	ldr	r3, [r0, #20]
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80024ea:	bc70      	pop	{r4, r5, r6}
 80024ec:	2000      	movs	r0, #0
 80024ee:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80024f0:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80024f2:	68ce      	ldr	r6, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80024f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f8:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024fa:	4d11      	ldr	r5, [pc, #68]	; (8002540 <LL_TIM_Init+0xf0>)
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80024fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002500:	4333      	orrs	r3, r6
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002502:	42a8      	cmp	r0, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002504:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002506:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8002508:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800250a:	d0e8      	beq.n	80024de <LL_TIM_Init+0x8e>
 800250c:	e7d8      	b.n	80024c0 <LL_TIM_Init+0x70>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800250e:	684e      	ldr	r6, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002510:	68cd      	ldr	r5, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002516:	4333      	orrs	r3, r6
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251c:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800251e:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002520:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8002522:	6282      	str	r2, [r0, #40]	; 0x28
 8002524:	e7db      	b.n	80024de <LL_TIM_Init+0x8e>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002526:	68cd      	ldr	r5, [r1, #12]
 8002528:	e7f6      	b.n	8002518 <LL_TIM_Init+0xc8>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800252a:	684d      	ldr	r5, [r1, #4]
 800252c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002530:	432b      	orrs	r3, r5
 8002532:	e7ab      	b.n	800248c <LL_TIM_Init+0x3c>
 8002534:	40012c00 	.word	0x40012c00
 8002538:	40014400 	.word	0x40014400
 800253c:	40014000 	.word	0x40014000
 8002540:	40013400 	.word	0x40013400

08002544 <__libc_init_array>:
 8002544:	b570      	push	{r4, r5, r6, lr}
 8002546:	4e0d      	ldr	r6, [pc, #52]	; (800257c <__libc_init_array+0x38>)
 8002548:	4c0d      	ldr	r4, [pc, #52]	; (8002580 <__libc_init_array+0x3c>)
 800254a:	1ba4      	subs	r4, r4, r6
 800254c:	10a4      	asrs	r4, r4, #2
 800254e:	2500      	movs	r5, #0
 8002550:	42a5      	cmp	r5, r4
 8002552:	d109      	bne.n	8002568 <__libc_init_array+0x24>
 8002554:	4e0b      	ldr	r6, [pc, #44]	; (8002584 <__libc_init_array+0x40>)
 8002556:	4c0c      	ldr	r4, [pc, #48]	; (8002588 <__libc_init_array+0x44>)
 8002558:	f000 f820 	bl	800259c <_init>
 800255c:	1ba4      	subs	r4, r4, r6
 800255e:	10a4      	asrs	r4, r4, #2
 8002560:	2500      	movs	r5, #0
 8002562:	42a5      	cmp	r5, r4
 8002564:	d105      	bne.n	8002572 <__libc_init_array+0x2e>
 8002566:	bd70      	pop	{r4, r5, r6, pc}
 8002568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800256c:	4798      	blx	r3
 800256e:	3501      	adds	r5, #1
 8002570:	e7ee      	b.n	8002550 <__libc_init_array+0xc>
 8002572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002576:	4798      	blx	r3
 8002578:	3501      	adds	r5, #1
 800257a:	e7f2      	b.n	8002562 <__libc_init_array+0x1e>
 800257c:	080027f0 	.word	0x080027f0
 8002580:	080027f0 	.word	0x080027f0
 8002584:	080027f0 	.word	0x080027f0
 8002588:	080027f4 	.word	0x080027f4

0800258c <memset>:
 800258c:	4402      	add	r2, r0
 800258e:	4603      	mov	r3, r0
 8002590:	4293      	cmp	r3, r2
 8002592:	d100      	bne.n	8002596 <memset+0xa>
 8002594:	4770      	bx	lr
 8002596:	f803 1b01 	strb.w	r1, [r3], #1
 800259a:	e7f9      	b.n	8002590 <memset+0x4>

0800259c <_init>:
 800259c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259e:	bf00      	nop
 80025a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a2:	bc08      	pop	{r3}
 80025a4:	469e      	mov	lr, r3
 80025a6:	4770      	bx	lr

080025a8 <_fini>:
 80025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025aa:	bf00      	nop
 80025ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ae:	bc08      	pop	{r3}
 80025b0:	469e      	mov	lr, r3
 80025b2:	4770      	bx	lr
