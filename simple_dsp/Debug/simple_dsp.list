
simple_dsp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000225c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000244c  080023f0  080023f0  000123f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800483c  0800483c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800483c  0800483c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800483c  0800483c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800483c  0800483c  0001483c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004840  08004840  00014840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08004850  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08004850  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce9f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024dc  00000000  00000000  0002cedb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00006b04  00000000  00000000  0002f3b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000768  00000000  00000000  00035ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001330  00000000  00000000  00036628  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001e41d  00000000  00000000  00037958  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00009616  00000000  00000000  00055d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000b2dd1  00000000  00000000  0005f38b  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000e9  00000000  00000000  0011215c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000156c  00000000  00000000  00112248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080023d8 	.word	0x080023d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080023d8 	.word	0x080023d8

080001d4 <TestDecimatorInterpolator>:
  }

}


void TestDecimatorInterpolator (void){
 80001d4:	b570      	push	{r4, r5, r6, lr}
 80001d6:	f5ad 5d5a 	sub.w	sp, sp, #13952	; 0x3680
 80001da:	b08e      	sub	sp, #56	; 0x38
#define FILTER_DEC_STATE_SIZE       (FILTER_DEC_NTAPS+FILTER_DEC_SRC_BLOCK_SIZE-1)

  arm_status res;

  arm_fir_decimate_instance_f32 filter_dec;
  const float filter_dec_coeffs[FILTER_DEC_NTAPS] = {8.055033e-04f,6.498392e-04f,4.349388e-04f,8.476545e-05f,-4.828550e-04f,-1.331428e-03f,-2.479265e-03f,-3.875947e-03f,-5.386481e-03f,-6.787067e-03f,-7.774931e-03f,-7.992712e-03f,-7.065700e-03f,-4.648098e-03f,-4.728103e-04f,5.601772e-03f,1.355463e-02f,2.318046e-02f,3.408773e-02f,4.571819e-02f,5.738713e-02f,6.834065e-02f,7.782416e-02f,8.515446e-02f,8.978719e-02f,9.137177e-02f,8.978719e-02f,8.515446e-02f,7.782416e-02f,6.834065e-02f,5.738713e-02f,4.571819e-02f,3.408773e-02f,2.318046e-02f,1.355463e-02f,5.601772e-03f,-4.728103e-04f,-4.648098e-03f,-7.065700e-03f,-7.992712e-03f,-7.774931e-03f,-6.787067e-03f,-5.386481e-03f,-3.875947e-03f,-2.479265e-03f,-1.331428e-03f,-4.828550e-04f,8.476545e-05f,4.349388e-04f,6.498392e-04f,8.055033e-04f};
 80001dc:	22cc      	movs	r2, #204	; 0xcc
 80001de:	4923      	ldr	r1, [pc, #140]	; (800026c <TestDecimatorInterpolator+0x98>)
 80001e0:	a80b      	add	r0, sp, #44	; 0x2c
 80001e2:	f002 f8e5 	bl	80023b0 <memcpy>
  float filter_dec_state[FILTER_DEC_STATE_SIZE];
  float src[FILTER_DEC_SRC_BLOCK_SIZE] = {0.000000e+00f,7.802302e-01f,1.529767e+00f,2.219469e+00f,2.823216e+00f,3.319212e+00f,3.691046e+00f,3.928463e+00f,4.027801e+00f,3.992066e+00f,3.830649e+00f,3.558705e+00f,3.196227e+00f,2.766871e+00f,2.296607e+00f,1.812255e+00f,1.340017e+00f,9.040613e-01f,5.252563e-01f,2.201129e-01f,1.110223e-16f,-1.293307e-01f,-1.678864e-01f,-1.212370e-01f,-5.551115e-17f,1.809618e-01f,4.035766e-01f,6.477718e-01f,8.927785e-01f,1.118457e+00f,1.306563e+00f,1.441880e+00f,1.513153e+00f,1.513773e+00f,1.442166e+00f,1.301879e+00f,1.101345e+00f,8.533571e-01f,5.742810e-01f,2.830482e-01f,1.720846e-15f,-2.543527e-01f,-4.605805e-01f,-6.015225e-01f,-6.633407e-01f,-6.363793e-01f,-5.157826e-01f,-3.018340e-01f,-5.551115e-16f,3.793228e-01f,8.213398e-01f,1.307639e+00f,1.817170e+00f,2.327372e+00f,2.815372e+00f,3.259198e+00f,3.638931e+00f,3.937735e+00f,4.142703e+00f,4.245482e+00f,4.242641e+00f,4.135765e+00f,3.931278e+00f,3.640005e+00f,3.276508e+00f,2.858240e+00f,2.404555e+00f,1.935655e+00f,1.471515e+00f,1.030859e+00f,6.302362e-01f,2.832538e-01f,3.219647e-15f,-2.133152e-01f,-3.544876e-01f,-4.252150e-01f,-4.307785e-01f,-3.795325e-01f,-2.822441e-01f,-1.513239e-01f,-2.109424e-15f,1.585146e-01f,3.118092e-01f,4.489729e-01f,5.611631e-01f,6.420157e-01f,6.878779e-01f,6.978587e-01f,6.736990e-01f,6.194804e-01f,5.411961e-01f,4.462191e-01f,3.427056e-01f,2.389756e-01f,1.429140e-01f,6.142824e-02f,1.110223e-16f,-3.764508e-02f,-4.973020e-02f,-3.647504e-02f,3.330669e-15f,5.590155e-02f,1.261029e-01f,2.045682e-01f,2.848294e-01f,3.604799e-01f,4.256509e-01f,4.754355e-01f,5.062326e-01f,5.159876e-01f,5.043145e-01f,4.724921e-01f,4.233389e-01f,3.609750e-01f,2.904916e-01f,2.175527e-01f,1.479585e-01f,8.720316e-02f,4.005835e-02f,1.021377e-02f,0.000000e+00f,1.021377e-02f,4.005835e-02f,8.720316e-02f,1.479585e-01f,2.175527e-01f,2.904916e-01f,3.609750e-01f,4.233389e-01f,4.724921e-01f,5.043145e-01f,5.159876e-01f,5.062326e-01f,4.754355e-01f,4.256509e-01f,3.604799e-01f,2.848294e-01f,2.045682e-01f,1.261029e-01f,5.590155e-02f,-2.331468e-15f,-3.647504e-02f,-4.973020e-02f,-3.764508e-02f,-4.329870e-15f,6.142824e-02f,1.429140e-01f,2.389756e-01f,3.427056e-01f,4.462191e-01f,5.411961e-01f,6.194804e-01f,6.736990e-01f,6.978587e-01f,6.878779e-01f,6.420157e-01f,5.611631e-01f,4.489729e-01f,3.118092e-01f,1.585146e-01f,4.218847e-15f,-1.513239e-01f,-2.822441e-01f,-3.795325e-01f,-4.307785e-01f,-4.252150e-01f,-3.544876e-01f,-2.133152e-01f,-2.220446e-15f,2.832538e-01f,6.302362e-01f,1.030859e+00f,1.471515e+00f,1.935655e+00f,2.404555e+00f,2.858240e+00f,3.276508e+00f,3.640005e+00f,3.931278e+00f,4.135765e+00f,4.242641e+00f,4.245482e+00f,4.142703e+00f,3.937735e+00f,3.638931e+00f,3.259198e+00f,2.815372e+00f,2.327372e+00f,1.817170e+00f,1.307639e+00f,8.213398e-01f,3.793228e-01f,2.664535e-15f,-3.018340e-01f,-5.157826e-01f,-6.363793e-01f,-6.633407e-01f,-6.015225e-01f,-4.605805e-01f,-2.543527e-01f,-1.720846e-15f,2.830482e-01f,5.742810e-01f,8.533571e-01f,1.101345e+00f,1.301879e+00f,1.442166e+00f,1.513773e+00f,1.513153e+00f,1.441880e+00f,1.306563e+00f,1.118457e+00f,8.927785e-01f,6.477718e-01f,4.035766e-01f,1.809618e-01f,2.609024e-15f,-1.212370e-01f,-1.678864e-01f,-1.293307e-01f,-3.330669e-16f,2.201129e-01f,5.252563e-01f,9.040613e-01f,1.340017e+00f,1.812255e+00f,2.296607e+00f,2.766871e+00f,3.196227e+00f,3.558705e+00f,3.830649e+00f,3.992066e+00f,4.027801e+00f,3.928463e+00f,3.691046e+00f,3.319212e+00f,2.823216e+00f,2.219469e+00f,1.529767e+00f,7.802302e-01f,3.795167e-15f,-7.802302e-01f,-1.529767e+00f,-2.219469e+00f,-2.823216e+00f,-3.319212e+00f,-3.691046e+00f,-3.928463e+00f,-4.027801e+00f,-3.992066e+00f,-3.830649e+00f,-3.558705e+00f,-3.196227e+00f,-2.766871e+00f,-2.296607e+00f,-1.812255e+00f,-1.340017e+00f,-9.040613e-01f,-5.252563e-01f,-2.201129e-01f,1.443290e-15f,1.293307e-01f,1.678864e-01f,1.212370e-01f,5.051515e-15f,-1.809618e-01f,-4.035766e-01f,-6.477718e-01f,-8.927785e-01f,-1.118457e+00f,-1.306563e+00f,-1.441880e+00f,-1.513153e+00f,-1.513773e+00f,-1.442166e+00f,-1.301879e+00f,-1.101345e+00f,-8.533571e-01f,-5.742810e-01f,-2.830482e-01f,-9.492407e-15f,2.543527e-01f,4.605805e-01f,6.015225e-01f,6.633407e-01f,6.363793e-01f,5.157826e-01f,3.018340e-01f,-4.329870e-15f,-3.793228e-01f,-8.213398e-01f,-1.307639e+00f,-1.817170e+00f,-2.327372e+00f,-2.815372e+00f,-3.259198e+00f,-3.638931e+00f,-3.937735e+00f,-4.142703e+00f,-4.245482e+00f,-4.242641e+00f,-4.135765e+00f,-3.931278e+00f,-3.640005e+00f,-3.276508e+00f,-2.858240e+00f,-2.404555e+00f,-1.935655e+00f,-1.471515e+00f,-1.030859e+00f,-6.302362e-01f,-2.832538e-01f,-1.154632e-14f,2.133152e-01f,3.544876e-01f,4.252150e-01f,4.307785e-01f,3.795325e-01f,2.822441e-01f,1.513239e-01f,8.659740e-15f,-1.585146e-01f,-3.118092e-01f,-4.489729e-01f,-5.611631e-01f,-6.420157e-01f,-6.878779e-01f,-6.978587e-01f,-6.736990e-01f,-6.194804e-01f,-5.411961e-01f,-4.462191e-01f,-3.427056e-01f,-2.389756e-01f,-1.429140e-01f,-6.142824e-02f,-6.772360e-15f,3.764508e-02f,4.973020e-02f,3.647504e-02f,-6.938894e-15f,-5.590155e-02f,-1.261029e-01f,-2.045682e-01f,-2.848294e-01f,-3.604799e-01f,-4.256509e-01f,-4.754355e-01f,-5.062326e-01f,-5.159876e-01f,-5.043145e-01f,-4.724921e-01f,-4.233389e-01f,-3.609750e-01f,-2.904916e-01f,-2.175527e-01f,-1.479585e-01f,-8.720316e-02f,-4.005835e-02f,-1.021377e-02f,0.000000e+00f,-1.021377e-02f,-4.005835e-02f,-8.720316e-02f,-1.479585e-01f,-2.175527e-01f,-2.904916e-01f,-3.609750e-01f,-4.233389e-01f,-4.724921e-01f,-5.043145e-01f,-5.159876e-01f,-5.062326e-01f,-4.754355e-01f,-4.256509e-01f,-3.604799e-01f,-2.848294e-01f,-2.045682e-01f,-1.261029e-01f,-5.590155e-02f,-5.551115e-15f,3.647504e-02f,4.973020e-02f,3.764508e-02f,6.661338e-16f,-6.142824e-02f,-1.429140e-01f,-2.389756e-01f,-3.427056e-01f,-4.462191e-01f,-5.411961e-01f,-6.194804e-01f,-6.736990e-01f,-6.978587e-01f,-6.878779e-01f,-6.420157e-01f,-5.611631e-01f,-4.489729e-01f,-3.118092e-01f,-1.585146e-01f,6.661338e-16f,1.513239e-01f,2.822441e-01f,3.795325e-01f,4.307785e-01f,4.252150e-01f,3.544876e-01f,2.133152e-01f,1.998401e-14f,-2.832538e-01f,-6.302362e-01f,-1.030859e+00f,-1.471515e+00f,-1.935655e+00f,-2.404555e+00f,-2.858240e+00f,-3.276508e+00f,-3.640005e+00f,-3.931278e+00f,-4.135765e+00f,-4.242641e+00f,-4.245482e+00f,-4.142703e+00f,-3.937735e+00f,-3.638931e+00f,-3.259198e+00f,-2.815372e+00f,-2.327372e+00f,-1.817170e+00f,-1.307639e+00f,-8.213398e-01f,-3.793228e-01f,-1.110223e-14f,3.018340e-01f,5.157826e-01f,6.363793e-01f,6.633407e-01f,6.015225e-01f,4.605805e-01f,2.543527e-01f,1.720846e-15f,-2.830482e-01f,-5.742810e-01f,-8.533571e-01f,-1.101345e+00f,-1.301879e+00f,-1.442166e+00f,-1.513773e+00f,-1.513153e+00f,-1.441880e+00f,-1.306563e+00f,-1.118457e+00f,-8.927785e-01f,-6.477718e-01f,-4.035766e-01f,-1.809618e-01f,-7.216450e-15f,1.212370e-01f,1.678864e-01f,1.293307e-01f,1.143530e-14f,-2.201129e-01f,-5.252563e-01f,-9.040613e-01f,-1.340017e+00f,-1.812255e+00f,-2.296607e+00f,-2.766871e+00f,-3.196227e+00f,-3.558705e+00f,-3.830649e+00f,-3.992066e+00f,-4.027801e+00f,-3.928463e+00f,-3.691046e+00f,-3.319212e+00f,-2.823216e+00f,-2.219469e+00f,-1.529767e+00f,-7.802302e-01f,-7.590334e-15f,7.802302e-01f,1.529767e+00f,2.219469e+00f,2.823216e+00f,3.319212e+00f,3.691046e+00f,3.928463e+00f,4.027801e+00f,3.992066e+00f,3.830649e+00f,3.558705e+00f,3.196227e+00f,2.766871e+00f,2.296607e+00f,1.812255e+00f,1.340017e+00f,9.040613e-01f,5.252563e-01f,2.201129e-01f,4.329870e-15f,-1.293307e-01f,-1.678864e-01f,-1.212370e-01f,-1.054712e-14f,1.809618e-01f,4.035766e-01f,6.477718e-01f,8.927785e-01f,1.118457e+00f,1.306563e+00f,1.441880e+00f,1.513153e+00f,1.513773e+00f,1.442166e+00f,1.301879e+00f,1.101345e+00f,8.533571e-01f,5.742810e-01f,2.830482e-01f,9.325873e-15f,-2.543527e-01f,-4.605805e-01f,-6.015225e-01f,-6.633407e-01f,-6.363793e-01f,-5.157826e-01f,-3.018340e-01f,1.332268e-15f,3.793228e-01f,8.213398e-01f,1.307639e+00f,1.817170e+00f,2.327372e+00f,2.815372e+00f,3.259198e+00f,3.638931e+00f,3.937735e+00f,4.142703e+00f,4.245482e+00f,4.242641e+00f,4.135765e+00f,3.931278e+00f,3.640005e+00f,3.276508e+00f,2.858240e+00f,2.404555e+00f,1.935655e+00f,1.471515e+00f,1.030859e+00f,6.302362e-01f,2.832538e-01f,2.331468e-14f,-2.133152e-01f,-3.544876e-01f,-4.252150e-01f,-4.307785e-01f,-3.795325e-01f,-2.822441e-01f,-1.513239e-01f,-9.992007e-15f,1.585146e-01f,3.118092e-01f,4.489729e-01f,5.611631e-01f,6.420157e-01f,6.878779e-01f,6.978587e-01f,6.736990e-01f,6.194804e-01f,5.411961e-01f,4.462191e-01f,3.427056e-01f,2.389756e-01f,1.429140e-01f,6.142824e-02f,1.720846e-14f,-3.764508e-02f,-4.973020e-02f,-3.647504e-02f,1.043610e-14f,5.590155e-02f,1.261029e-01f,2.045682e-01f,2.848294e-01f,3.604799e-01f,4.256509e-01f,4.754355e-01f,5.062326e-01f,5.159876e-01f,5.043145e-01f,4.724921e-01f,4.233389e-01f,3.609750e-01f,2.904916e-01f,2.175527e-01f,1.479585e-01f,8.720316e-02f,4.005835e-02f,1.021377e-02f,0.000000e+00f,1.021377e-02f,4.005835e-02f,8.720316e-02f,1.479585e-01f,2.175527e-01f,2.904916e-01f,3.609750e-01f,4.233389e-01f,4.724921e-01f,5.043145e-01f,5.159876e-01f,5.062326e-01f,4.754355e-01f,4.256509e-01f,3.604799e-01f,2.848294e-01f,2.045682e-01f,1.261029e-01f,5.590155e-02f,-1.504352e-14f,-3.647504e-02f,-4.973020e-02f,-3.764508e-02f,-4.440892e-15f,6.142824e-02f,1.429140e-01f,2.389756e-01f,3.427056e-01f,4.462191e-01f,5.411961e-01f,6.194804e-01f,6.736990e-01f,6.978587e-01f,6.878779e-01f,6.420157e-01f,5.611631e-01f,4.489729e-01f,3.118092e-01f,1.585146e-01f,1.731948e-14f,-1.513239e-01f,-2.822441e-01f,-3.795325e-01f,-4.307785e-01f,-4.252150e-01f,-3.544876e-01f,-2.133152e-01f,-4.385381e-14f,2.832538e-01f,6.302362e-01f,1.030859e+00f,1.471515e+00f,1.935655e+00f,2.404555e+00f,2.858240e+00f,3.276508e+00f,3.640005e+00f,3.931278e+00f,4.135765e+00f,4.242641e+00f,4.245482e+00f,4.142703e+00f,3.937735e+00f,3.638931e+00f,3.259198e+00f,2.815372e+00f,2.327372e+00f,1.817170e+00f,1.307639e+00f,8.213398e-01f,3.793228e-01f,-1.032507e-14f,-3.018340e-01f,-5.157826e-01f,-6.363793e-01f,-6.633407e-01f,-6.015225e-01f,-4.605805e-01f,-2.543527e-01f,-1.337819e-14f,2.830482e-01f,5.742810e-01f,8.533571e-01f,1.101345e+00f,1.301879e+00f,1.442166e+00f,1.513773e+00f,1.513153e+00f,1.441880e+00f,1.306563e+00f,1.118457e+00f,8.927785e-01f,6.477718e-01f,4.035766e-01f,1.809618e-01f,1.171285e-14f,-1.212370e-01f,-1.678864e-01f,-1.293307e-01f,5.884182e-15f,2.201129e-01f,5.252563e-01f,9.040613e-01f,1.340017e+00f,1.812255e+00f,2.296607e+00f,2.766871e+00f,3.196227e+00f,3.558705e+00f,3.830649e+00f,3.992066e+00f,4.027801e+00f,3.928463e+00f,3.691046e+00f,3.319212e+00f,2.823216e+00f,2.219469e+00f,1.529767e+00f,7.802302e-01f,3.625450e-14f,-7.802302e-01f,-1.529767e+00f,-2.219469e+00f,-2.823216e+00f,-3.319212e+00f,-3.691046e+00f,-3.928463e+00f,-4.027801e+00f,-3.992066e+00f,-3.830649e+00f,-3.558705e+00f,-3.196227e+00f,-2.766871e+00f,-2.296607e+00f,-1.812255e+00f,-1.340017e+00f,-9.040613e-01f,-5.252563e-01f,-2.201129e-01f,-1.509903e-14f,1.293307e-01f,1.678864e-01f,1.212370e-01f,1.326717e-14f,-1.809618e-01f,-4.035766e-01f,-6.477718e-01f,-8.927785e-01f,-1.118457e+00f,-1.306563e+00f,-1.441880e+00f,-1.513153e+00f,-1.513773e+00f,-1.442166e+00f,-1.301879e+00f,-1.101345e+00f,-8.533571e-01f,-5.742810e-01f,-2.830482e-01f,-4.496403e-14f,2.543527e-01f,4.605805e-01f,6.015225e-01f,6.633407e-01f,6.363793e-01f,5.157826e-01f,3.018340e-01f,1.032507e-14f,-3.793228e-01f,-8.213398e-01f,-1.307639e+00f,-1.817170e+00f,-2.327372e+00f,-2.815372e+00f,-3.259198e+00f,-3.638931e+00f,-3.937735e+00f,-4.142703e+00f,-4.245482e+00f,-4.242641e+00f,-4.135765e+00f,-3.931278e+00f,-3.640005e+00f,-3.276508e+00f,-2.858240e+00f,-2.404555e+00f,-1.935655e+00f,-1.471515e+00f,-1.030859e+00f,-6.302362e-01f,-2.832538e-01f,-2.631229e-14f,2.133152e-01f,3.544876e-01f,4.252150e-01f,4.307785e-01f,3.795325e-01f,2.822441e-01f,1.513239e-01f,-1.332268e-15f,-1.585146e-01f,-3.118092e-01f,-4.489729e-01f,-5.611631e-01f,-6.420157e-01f,-6.878779e-01f,-6.978587e-01f,-6.736990e-01f,-6.194804e-01f,-5.411961e-01f,-4.462191e-01f,-3.427056e-01f,-2.389756e-01f,-1.429140e-01f,-6.142824e-02f,-9.658940e-15f,3.764508e-02f,4.973020e-02f,3.647504e-02f,-2.287059e-14f,-5.590155e-02f,-1.261029e-01f,-2.045682e-01f,-2.848294e-01f,-3.604799e-01f,-4.256509e-01f,-4.754355e-01f,-5.062326e-01f,-5.159876e-01f,-5.043145e-01f,-4.724921e-01f,-4.233389e-01f,-3.609750e-01f,-2.904916e-01f,-2.175527e-01f,-1.479585e-01f,-8.720316e-02f,-4.005835e-02f,-1.021377e-02f,0.000000e+00f,-1.021377e-02f,-4.005835e-02f,-8.720316e-02f,-1.479585e-01f,-2.175527e-01f,-2.904916e-01f,-3.609750e-01f,-4.233389e-01f,-4.724921e-01f,-5.043145e-01f,-5.159876e-01f,-5.062326e-01f,-4.754355e-01f,-4.256509e-01f,-3.604799e-01f,-2.848294e-01f,-2.045682e-01f,-1.261029e-01f,-5.590155e-02f,2.176037e-14f,3.647504e-02f,4.973020e-02f,3.764508e-02f,1.232348e-14f,-6.142824e-02f,-1.429140e-01f,-2.389756e-01f,-3.427056e-01f,-4.462191e-01f,-5.411961e-01f,-6.194804e-01f,-6.736990e-01f,-6.978587e-01f,-6.878779e-01f,-6.420157e-01f,-5.611631e-01f,-4.489729e-01f,-3.118092e-01f,-1.585146e-01f,5.218048e-15f,1.513239e-01f,2.822441e-01f,3.795325e-01f,4.307785e-01f,4.252150e-01f,3.544876e-01f,2.133152e-01f,3.719247e-14f,-2.832538e-01f,-6.302362e-01f,-1.030859e+00f,-1.471515e+00f,-1.935655e+00f,-2.404555e+00f,-2.858240e+00f,-3.276508e+00f,-3.640005e+00f,-3.931278e+00f,-4.135765e+00f,-4.242641e+00f,-4.245482e+00f,-4.142703e+00f,-3.937735e+00f,-3.638931e+00f,-3.259198e+00f,-2.815372e+00f,-2.327372e+00f,-1.817170e+00f,-1.307639e+00f,-8.213398e-01f,-3.793228e-01f,-2.886580e-15f,3.018340e-01f,5.157826e-01f,6.363793e-01f,6.633407e-01f,6.015225e-01f,4.605805e-01f,2.543527e-01f,2.370326e-14f,-2.830482e-01f,-5.742810e-01f,-8.533571e-01f,-1.101345e+00f,-1.301879e+00f,-1.442166e+00f,-1.513773e+00f,-1.513153e+00f,-1.441880e+00f,-1.306563e+00f,-1.118457e+00f,-8.927785e-01f,-6.477718e-01f,-4.035766e-01f,-1.809618e-01f,-1.759703e-14f,1.212370e-01f,1.678864e-01f,1.293307e-01f,4.884981e-14f,-2.201129e-01f,-5.252563e-01f,-9.040613e-01f,-1.340017e+00f,-1.812255e+00f,-2.296607e+00f,-2.766871e+00f,-3.196227e+00f,-3.558705e+00f,-3.830649e+00f,-3.992066e+00f,-4.027801e+00f,-3.928463e+00f,-3.691046e+00f,-3.319212e+00f,-2.823216e+00f,-2.219469e+00f,-1.529767e+00f,-7.802302e-01f,-1.518067e-14f,7.802302e-01f,1.529767e+00f,2.219469e+00f,2.823216e+00f,3.319212e+00f,3.691046e+00f,3.928463e+00f,4.027801e+00f,3.992066e+00f,3.830649e+00f,3.558705e+00f,3.196227e+00f,2.766871e+00f,2.296607e+00f,1.812255e+00f,1.340017e+00f,9.040613e-01f,5.252563e-01f,2.201129e-01f,1.953993e-14f,-1.293307e-01f,-1.678864e-01f,-1.212370e-01f,-1.953993e-14f,1.809618e-01f,4.035766e-01f,6.477718e-01f,8.927785e-01f,1.118457e+00f,1.306563e+00f,1.441880e+00f,1.513153e+00f,1.513773e+00f,1.442166e+00f,1.301879e+00f,1.101345e+00f,8.533571e-01f,5.742810e-01f,2.830482e-01f,4.451994e-14f,-2.543527e-01f,-4.605805e-01f,-6.015225e-01f,-6.633407e-01f,-6.363793e-01f,-5.157826e-01f,-3.018340e-01f,-1.454392e-14f,3.793228e-01f,8.213398e-01f,1.307639e+00f,1.817170e+00f,2.327372e+00f,2.815372e+00f,3.259198e+00f,3.638931e+00f,3.937735e+00f,4.142703e+00f,4.245482e+00f,4.242641e+00f,4.135765e+00f,3.931278e+00f,3.640005e+00f};
 80001e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001ea:	4921      	ldr	r1, [pc, #132]	; (8000270 <TestDecimatorInterpolator+0x9c>)
 80001ec:	f50d 60be 	add.w	r0, sp, #1520	; 0x5f0
 80001f0:	f002 f8de 	bl	80023b0 <memcpy>
  float dst[FILTER_DEC_DEST_BLOCK_SIZE];
  res = arm_fir_decimate_init_f32 ( &filter_dec, FILTER_DEC_NTAPS, FILTER_DEC_M, filter_dec_coeffs, filter_dec_state, FILTER_DEC_SRC_BLOCK_SIZE );
 80001f4:	f50d 5217 	add.w	r2, sp, #9664	; 0x25c0
 80001f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001fc:	3230      	adds	r2, #48	; 0x30
 80001fe:	e9cd 2100 	strd	r2, r1, [sp]
 8000202:	ab0b      	add	r3, sp, #44	; 0x2c
 8000204:	a805      	add	r0, sp, #20
 8000206:	2208      	movs	r2, #8
 8000208:	2133      	movs	r1, #51	; 0x33
 800020a:	f001 fed5 	bl	8001fb8 <arm_fir_decimate_init_f32>
  if( res != ARM_MATH_SUCCESS ){
 800020e:	b100      	cbz	r0, 8000212 <TestDecimatorInterpolator+0x3e>
 8000210:	e7fe      	b.n	8000210 <TestDecimatorInterpolator+0x3c>

  arm_fir_interpolate_instance_f32 filter_int;
  const float filter_int_coeffs[FILTER_INT_NTAPS] = {7.374411e-03f,7.760359e-03f,7.992768e-03f,7.723856e-03f,6.402292e-03f,3.370636e-03f,-1.988203e-03f,-1.007526e-02f,-2.089746e-02f,-3.391755e-02f,-4.796153e-02f,-6.120737e-02f,-7.126931e-02f,-7.537948e-02f,-7.065472e-02f,-5.442339e-02f,-2.457610e-02f,2.010205e-02f,7.966141e-02f,1.528191e-01f,2.369211e-01f,3.280499e-01f,4.212755e-01f,5.110315e-01f,5.915792e-01f,6.575147e-01f,7.042632e-01f,7.285083e-01f,7.285083e-01f,7.042632e-01f,6.575147e-01f,5.915792e-01f,5.110315e-01f,4.212755e-01f,3.280499e-01f,2.369211e-01f,1.528191e-01f,7.966141e-02f,2.010205e-02f,-2.457610e-02f,-5.442339e-02f,-7.065472e-02f,-7.537948e-02f,-7.126931e-02f,-6.120737e-02f,-4.796153e-02f,-3.391755e-02f,-2.089746e-02f,-1.007526e-02f,-1.988203e-03f,3.370636e-03f,6.402292e-03f,7.723856e-03f,7.992768e-03f,7.760359e-03f,7.374411e-03f};
  float filter_int_state[FILTER_INT_STATE_SIZE];
  float signal_int[FILTER_INT_BLOCK_SIZE*FILTER_DEC_M];
  res = arm_fir_interpolate_init_f32 ( &filter_int, FILTER_DEC_M, FILTER_INT_NTAPS, filter_int_coeffs, filter_int_state, FILTER_INT_BLOCK_SIZE );
 8000212:	ab08      	add	r3, sp, #32
  const float filter_int_coeffs[FILTER_INT_NTAPS] = {7.374411e-03f,7.760359e-03f,7.992768e-03f,7.723856e-03f,6.402292e-03f,3.370636e-03f,-1.988203e-03f,-1.007526e-02f,-2.089746e-02f,-3.391755e-02f,-4.796153e-02f,-6.120737e-02f,-7.126931e-02f,-7.537948e-02f,-7.065472e-02f,-5.442339e-02f,-2.457610e-02f,2.010205e-02f,7.966141e-02f,1.528191e-01f,2.369211e-01f,3.280499e-01f,4.212755e-01f,5.110315e-01f,5.915792e-01f,6.575147e-01f,7.042632e-01f,7.285083e-01f,7.285083e-01f,7.042632e-01f,6.575147e-01f,5.915792e-01f,5.110315e-01f,4.212755e-01f,3.280499e-01f,2.369211e-01f,1.528191e-01f,7.966141e-02f,2.010205e-02f,-2.457610e-02f,-5.442339e-02f,-7.065472e-02f,-7.537948e-02f,-7.126931e-02f,-6.120737e-02f,-4.796153e-02f,-3.391755e-02f,-2.089746e-02f,-1.007526e-02f,-1.988203e-03f,3.370636e-03f,6.402292e-03f,7.723856e-03f,7.992768e-03f,7.760359e-03f,7.374411e-03f};
 8000214:	22e0      	movs	r2, #224	; 0xe0
 8000216:	4917      	ldr	r1, [pc, #92]	; (8000274 <TestDecimatorInterpolator+0xa0>)
  res = arm_fir_interpolate_init_f32 ( &filter_int, FILTER_DEC_M, FILTER_INT_NTAPS, filter_int_coeffs, filter_int_state, FILTER_INT_BLOCK_SIZE );
 8000218:	9303      	str	r3, [sp, #12]
  const float filter_int_coeffs[FILTER_INT_NTAPS] = {7.374411e-03f,7.760359e-03f,7.992768e-03f,7.723856e-03f,6.402292e-03f,3.370636e-03f,-1.988203e-03f,-1.007526e-02f,-2.089746e-02f,-3.391755e-02f,-4.796153e-02f,-6.120737e-02f,-7.126931e-02f,-7.537948e-02f,-7.065472e-02f,-5.442339e-02f,-2.457610e-02f,2.010205e-02f,7.966141e-02f,1.528191e-01f,2.369211e-01f,3.280499e-01f,4.212755e-01f,5.110315e-01f,5.915792e-01f,6.575147e-01f,7.042632e-01f,7.285083e-01f,7.285083e-01f,7.042632e-01f,6.575147e-01f,5.915792e-01f,5.110315e-01f,4.212755e-01f,3.280499e-01f,2.369211e-01f,1.528191e-01f,7.966141e-02f,2.010205e-02f,-2.457610e-02f,-5.442339e-02f,-7.065472e-02f,-7.537948e-02f,-7.126931e-02f,-6.120737e-02f,-4.796153e-02f,-3.391755e-02f,-2.089746e-02f,-1.007526e-02f,-1.988203e-03f,3.370636e-03f,6.402292e-03f,7.723856e-03f,7.992768e-03f,7.760359e-03f,7.374411e-03f};
 800021a:	a83e      	add	r0, sp, #248	; 0xf8
 800021c:	f002 f8c8 	bl	80023b0 <memcpy>
  res = arm_fir_interpolate_init_f32 ( &filter_int, FILTER_DEC_M, FILTER_INT_NTAPS, filter_int_coeffs, filter_int_state, FILTER_INT_BLOCK_SIZE );
 8000220:	2180      	movs	r1, #128	; 0x80
 8000222:	aaf6      	add	r2, sp, #984	; 0x3d8
 8000224:	e9cd 2100 	strd	r2, r1, [sp]
 8000228:	ab3e      	add	r3, sp, #248	; 0xf8
 800022a:	9803      	ldr	r0, [sp, #12]
 800022c:	2238      	movs	r2, #56	; 0x38
 800022e:	2108      	movs	r1, #8
 8000230:	f001 fc8a 	bl	8001b48 <arm_fir_interpolate_init_f32>
  if( res != ARM_MATH_SUCCESS ){
 8000234:	b9c8      	cbnz	r0, 800026a <TestDecimatorInterpolator+0x96>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000236:	2520      	movs	r5, #32
 8000238:	462e      	mov	r6, r5
 800023a:	f04f 4490 	mov.w	r4, #1207959552	; 0x48000000
    while(1); // Failed
  }

  while(1){
    LL_GPIO_SetOutputPin(LD2_GPIO_Port, LD2_Pin);
    arm_fir_decimate_f32 ( &filter_dec, src, dst, FILTER_DEC_SRC_BLOCK_SIZE );
 800023e:	aa76      	add	r2, sp, #472	; 0x1d8
 8000240:	f50d 61be 	add.w	r1, sp, #1520	; 0x5f0
 8000244:	a805      	add	r0, sp, #20
 8000246:	61a6      	str	r6, [r4, #24]
 8000248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800024c:	f001 fed0 	bl	8001ff0 <arm_fir_decimate_f32>
    arm_fir_interpolate_f32 ( &filter_int, dst, signal_int, FILTER_INT_BLOCK_SIZE );
 8000250:	f50d 52af 	add.w	r2, sp, #5600	; 0x15e0
 8000254:	9803      	ldr	r0, [sp, #12]
 8000256:	2380      	movs	r3, #128	; 0x80
 8000258:	3210      	adds	r2, #16
 800025a:	a976      	add	r1, sp, #472	; 0x1d8
 800025c:	f001 fc90 	bl	8001b80 <arm_fir_interpolate_f32>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000260:	62a5      	str	r5, [r4, #40]	; 0x28
    LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
    HAL_Delay(100);
 8000262:	2064      	movs	r0, #100	; 0x64
 8000264:	f000 f9fe 	bl	8000664 <HAL_Delay>
 8000268:	e7e9      	b.n	800023e <TestDecimatorInterpolator+0x6a>
 800026a:	e7fe      	b.n	800026a <TestDecimatorInterpolator+0x96>
 800026c:	080033f0 	.word	0x080033f0
 8000270:	08003588 	.word	0x08003588
 8000274:	08004720 	.word	0x08004720

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	2100      	movs	r1, #0
{
 800027c:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027e:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000280:	2224      	movs	r2, #36	; 0x24
 8000282:	a807      	add	r0, sp, #28
 8000284:	f002 f89f 	bl	80023c6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000288:	4621      	mov	r1, r4
 800028a:	a810      	add	r0, sp, #64	; 0x40
 800028c:	2258      	movs	r2, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000292:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000296:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000298:	f002 f895 	bl	80023c6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029e:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a0:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ae:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b2:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b4:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b6:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b8:	f000 fb74 	bl	80009a4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002bc:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002be:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c2:	4629      	mov	r1, r5
 80002c4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c8:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	e9cd 5402 	strd	r5, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d0:	f000 fe4e 	bl	8000f70 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d4:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002d6:	9510      	str	r5, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002d8:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002da:	f000 ff81 	bl	80011e0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80002de:	b027      	add	sp, #156	; 0x9c
 80002e0:	bd30      	pop	{r4, r5, pc}
 80002e2:	bf00      	nop

080002e4 <main>:
{
 80002e4:	b580      	push	{r7, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80002e6:	2400      	movs	r4, #0
{
 80002e8:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 80002ea:	f000 f997 	bl	800061c <HAL_Init>
  SystemClock_Config();
 80002ee:	f7ff ffc3 	bl	8000278 <SystemClock_Config>
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80002f2:	e9cd 4406 	strd	r4, r4, [sp, #24]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80002fa:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80002fe:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000302:	4b49      	ldr	r3, [pc, #292]	; (8000428 <main+0x144>)
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000304:	4d49      	ldr	r5, [pc, #292]	; (800042c <main+0x148>)
 8000306:	695a      	ldr	r2, [r3, #20]
 8000308:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800030c:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800030e:	695a      	ldr	r2, [r3, #20]
 8000310:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000314:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000316:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000318:	695a      	ldr	r2, [r3, #20]
 800031a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800031e:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000320:	695a      	ldr	r2, [r3, #20]
 8000322:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000326:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000328:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHBENR, Periphs);
 800032a:	695a      	ldr	r2, [r3, #20]
 800032c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000330:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000332:	695a      	ldr	r2, [r3, #20]
 8000334:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000338:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800033a:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHBENR, Periphs);
 800033c:	695a      	ldr	r2, [r3, #20]
 800033e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000342:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 800034a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800034e:	9304      	str	r3, [sp, #16]
 8000350:	2620      	movs	r6, #32
  (void)tmpreg;
 8000352:	9b04      	ldr	r3, [sp, #16]
 8000354:	62be      	str	r6, [r7, #40]	; 0x28
 8000356:	696a      	ldr	r2, [r5, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000358:	23f0      	movs	r3, #240	; 0xf0
 800035a:	fa93 f3a3 	rbit	r3, r3
 800035e:	2102      	movs	r1, #2
 8000360:	fab3 f383 	clz	r3, r3
 8000364:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000368:	fa01 f303 	lsl.w	r3, r1, r3
 800036c:	4313      	orrs	r3, r2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800036e:	4830      	ldr	r0, [pc, #192]	; (8000430 <main+0x14c>)
 8000370:	616b      	str	r3, [r5, #20]
 8000372:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8000376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800037a:	fa92 f3a2 	rbit	r3, r2
 800037e:	fab3 f383 	clz	r3, r3
 8000382:	2503      	movs	r5, #3
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	fa05 f303 	lsl.w	r3, r5, r3
 800038a:	ea2c 0303 	bic.w	r3, ip, r3
 800038e:	fa92 fca2 	rbit	ip, r2
 8000392:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000394:	f8d0 c000 	ldr.w	ip, [r0]
 8000398:	fa92 f3a2 	rbit	r3, r2
 800039c:	fab3 f383 	clz	r3, r3
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	fa05 f303 	lsl.w	r3, r5, r3
 80003a6:	ea2c 0303 	bic.w	r3, ip, r3
 80003aa:	fa92 fca2 	rbit	ip, r2
  hdac1.Instance = DAC1;
 80003ae:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8000440 <main+0x15c>
 80003b2:	6003      	str	r3, [r0, #0]
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
  EXTI_InitStruct.LineCommand = ENABLE;
 80003b4:	f04f 0901 	mov.w	r9, #1
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
  LL_EXTI_Init(&EXTI_InitStruct);
 80003b8:	a805      	add	r0, sp, #20
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80003ba:	9205      	str	r2, [sp, #20]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80003bc:	f88d 101e 	strb.w	r1, [sp, #30]
  EXTI_InitStruct.LineCommand = ENABLE;
 80003c0:	f88d 901c 	strb.w	r9, [sp, #28]
  LL_EXTI_Init(&EXTI_InitStruct);
 80003c4:	f001 fa6a 	bl	800189c <LL_EXTI_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003c8:	eb0d 0106 	add.w	r1, sp, r6
 80003cc:	4638      	mov	r0, r7
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80003ce:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80003d2:	e9cd 6908 	strd	r6, r9, [sp, #32]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003d6:	940c      	str	r4, [sp, #48]	; 0x30
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003d8:	f001 fb0a 	bl	80019f0 <LL_GPIO_Init>
  hdac1.Instance = DAC1;
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <main+0x150>)
 80003de:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003e2:	4640      	mov	r0, r8
  DAC_ChannelConfTypeDef sConfig = {0};
 80003e4:	9408      	str	r4, [sp, #32]
 80003e6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003ea:	f000 f9af 	bl	800074c <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003ee:	eb0d 0106 	add.w	r1, sp, r6
 80003f2:	4622      	mov	r2, r4
 80003f4:	4640      	mov	r0, r8
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003f6:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003fa:	f000 f9bd 	bl	8000778 <HAL_DAC_ConfigChannel>
  huart2.Instance = USART2;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <main+0x154>)
 8000400:	4d0e      	ldr	r5, [pc, #56]	; (800043c <main+0x158>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000402:	609c      	str	r4, [r3, #8]
  huart2.Init.BaudRate = 38400;
 8000404:	f44f 4116 	mov.w	r1, #38400	; 0x9600
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000408:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800040a:	4618      	mov	r0, r3
  huart2.Init.Parity = UART_PARITY_NONE;
 800040c:	e9c3 4403 	strd	r4, r4, [r3, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000410:	e9c3 4406 	strd	r4, r4, [r3, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000414:	e9c3 4408 	strd	r4, r4, [r3, #32]
  huart2.Init.BaudRate = 38400;
 8000418:	e9c3 5100 	strd	r5, r1, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800041c:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800041e:	f001 f885 	bl	800152c <HAL_UART_Init>
  TestDecimatorInterpolator();
 8000422:	f7ff fed7 	bl	80001d4 <TestDecimatorInterpolator>
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000
 800042c:	40010000 	.word	0x40010000
 8000430:	48000800 	.word	0x48000800
 8000434:	40007400 	.word	0x40007400
 8000438:	2000003c 	.word	0x2000003c
 800043c:	40004400 	.word	0x40004400
 8000440:	20000028 	.word	0x20000028

08000444 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <HAL_MspInit+0x2c>)
 8000446:	699a      	ldr	r2, [r3, #24]
 8000448:	f042 0201 	orr.w	r2, r2, #1
 800044c:	619a      	str	r2, [r3, #24]
 800044e:	699a      	ldr	r2, [r3, #24]
{
 8000450:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000452:	f002 0201 	and.w	r2, r2, #1
 8000456:	9200      	str	r2, [sp, #0]
 8000458:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	69da      	ldr	r2, [r3, #28]
 800045c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000460:	61da      	str	r2, [r3, #28]
 8000462:	69db      	ldr	r3, [r3, #28]
 8000464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000468:	9301      	str	r3, [sp, #4]
 800046a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046c:	b002      	add	sp, #8
 800046e:	4770      	bx	lr
 8000470:	40021000 	.word	0x40021000

08000474 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000474:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8000476:	6801      	ldr	r1, [r0, #0]
 8000478:	4a16      	ldr	r2, [pc, #88]	; (80004d4 <HAL_DAC_MspInit+0x60>)
{
 800047a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047c:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 800047e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000484:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000488:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC1)
 800048a:	d001      	beq.n	8000490 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800048c:	b008      	add	sp, #32
 800048e:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000490:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000494:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000498:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 800049a:	69da      	ldr	r2, [r3, #28]
 800049c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80004a0:	61da      	str	r2, [r3, #28]
 80004a2:	69da      	ldr	r2, [r3, #28]
 80004a4:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80004a8:	9201      	str	r2, [sp, #4]
 80004aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ac:	695a      	ldr	r2, [r3, #20]
 80004ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80004b2:	615a      	str	r2, [r3, #20]
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004bc:	2210      	movs	r2, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004be:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c4:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ca:	f000 f979 	bl	80007c0 <HAL_GPIO_Init>
}
 80004ce:	b008      	add	sp, #32
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	bf00      	nop
 80004d4:	40007400 	.word	0x40007400

080004d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004d8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80004da:	6801      	ldr	r1, [r0, #0]
 80004dc:	4a17      	ldr	r2, [pc, #92]	; (800053c <HAL_UART_MspInit+0x64>)
{
 80004de:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 80004e2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80004e8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80004ec:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80004ee:	d001      	beq.n	80004f4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80004f0:	b009      	add	sp, #36	; 0x24
 80004f2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80004f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80004f8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fc:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 80004fe:	69da      	ldr	r2, [r3, #28]
 8000500:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000504:	61da      	str	r2, [r3, #28]
 8000506:	69da      	ldr	r2, [r3, #28]
 8000508:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800050c:	9201      	str	r2, [sp, #4]
 800050e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000516:	615a      	str	r2, [r3, #20]
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000520:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000522:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000524:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800052c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800052e:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000532:	f000 f945 	bl	80007c0 <HAL_GPIO_Init>
}
 8000536:	b009      	add	sp, #36	; 0x24
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop
 800053c:	40004400 	.word	0x40004400

08000540 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000544:	e7fe      	b.n	8000544 <HardFault_Handler>
 8000546:	bf00      	nop

08000548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000548:	e7fe      	b.n	8000548 <MemManage_Handler>
 800054a:	bf00      	nop

0800054c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054c:	e7fe      	b.n	800054c <BusFault_Handler>
 800054e:	bf00      	nop

08000550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000550:	e7fe      	b.n	8000550 <UsageFault_Handler>
 8000552:	bf00      	nop

08000554 <SVC_Handler>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <DebugMon_Handler>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <PendSV_Handler>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000560:	f000 b86e 	b.w	8000640 <HAL_IncTick>

08000564 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <SystemInit+0x18>)
 8000566:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800056a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800056e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000576:	6099      	str	r1, [r3, #8]
#endif
}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000584:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000586:	e003      	b.n	8000590 <LoopCopyDataInit>

08000588 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800058a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800058c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800058e:	3104      	adds	r1, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000594:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000596:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000598:	d3f6      	bcc.n	8000588 <CopyDataInit>
	ldr	r2, =_sbss
 800059a:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800059c:	e002      	b.n	80005a4 <LoopFillZerobss>

0800059e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800059e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005a0:	f842 3b04 	str.w	r3, [r2], #4

080005a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <LoopForever+0x16>)
	cmp	r2, r3
 80005a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005a8:	d3f9      	bcc.n	800059e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005aa:	f7ff ffdb 	bl	8000564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ae:	f001 fedb 	bl	8002368 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005b2:	f7ff fe97 	bl	80002e4 <main>

080005b6 <LoopForever>:

LoopForever:
    b LoopForever
 80005b6:	e7fe      	b.n	80005b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80005bc:	08004844 	.word	0x08004844
	ldr	r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005c4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80005c8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80005cc:	200000c0 	.word	0x200000c0

080005d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC1_2_IRQHandler>
	...

080005d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_InitTick+0x3c>)
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <HAL_InitTick+0x40>)
 80005da:	7812      	ldrb	r2, [r2, #0]
 80005dc:	681b      	ldr	r3, [r3, #0]
{
 80005de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e4:	fbb0 f0f2 	udiv	r0, r0, r2
 80005e8:	fbb3 f0f0 	udiv	r0, r3, r0
 80005ec:	f000 f894 	bl	8000718 <HAL_SYSTICK_Config>
 80005f0:	b908      	cbnz	r0, 80005f6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	2d0f      	cmp	r5, #15
 80005f4:	d901      	bls.n	80005fa <HAL_InitTick+0x26>
    return HAL_ERROR;
 80005f6:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80005f8:	bd38      	pop	{r3, r4, r5, pc}
 80005fa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	4602      	mov	r2, r0
 80005fe:	4629      	mov	r1, r5
 8000600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000604:	f000 f852 	bl	80006ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <HAL_InitTick+0x44>)
 800060a:	4620      	mov	r0, r4
 800060c:	601d      	str	r5, [r3, #0]
}
 800060e:	bd38      	pop	{r3, r4, r5, pc}
 8000610:	20000004 	.word	0x20000004
 8000614:	20000000 	.word	0x20000000
 8000618:	20000008 	.word	0x20000008

0800061c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_Init+0x20>)
{
 800061e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	6813      	ldr	r3, [r2, #0]
 8000622:	f043 0310 	orr.w	r3, r3, #16
 8000626:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000628:	2003      	movs	r0, #3
 800062a:	f000 f82d 	bl	8000688 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff ffd0 	bl	80005d4 <HAL_InitTick>
  HAL_MspInit();
 8000634:	f7ff ff06 	bl	8000444 <HAL_MspInit>
}
 8000638:	2000      	movs	r0, #0
 800063a:	bd08      	pop	{r3, pc}
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000640:	4a03      	ldr	r2, [pc, #12]	; (8000650 <HAL_IncTick+0x10>)
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <HAL_IncTick+0x14>)
 8000644:	6811      	ldr	r1, [r2, #0]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	440b      	add	r3, r1
 800064a:	6013      	str	r3, [r2, #0]
}
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200000bc 	.word	0x200000bc
 8000654:	20000004 	.word	0x20000004

08000658 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000658:	4b01      	ldr	r3, [pc, #4]	; (8000660 <HAL_GetTick+0x8>)
 800065a:	6818      	ldr	r0, [r3, #0]
}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000bc 	.word	0x200000bc

08000664 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b538      	push	{r3, r4, r5, lr}
 8000666:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000668:	f7ff fff6 	bl	8000658 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800066c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800066e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000670:	d002      	beq.n	8000678 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000672:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_Delay+0x20>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000678:	f7ff ffee 	bl	8000658 <HAL_GetTick>
 800067c:	1b40      	subs	r0, r0, r5
 800067e:	42a0      	cmp	r0, r4
 8000680:	d3fa      	bcc.n	8000678 <HAL_Delay+0x14>
  {
  }
}
 8000682:	bd38      	pop	{r3, r4, r5, pc}
 8000684:	20000004 	.word	0x20000004

08000688 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800068a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000690:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000692:	0200      	lsls	r0, r0, #8
 8000694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000698:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800069c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006a0:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006a2:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <HAL_NVIC_SetPriority+0x64>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b6:	f1c3 0507 	rsb	r5, r3, #7
 80006ba:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006bc:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	bf28      	it	cs
 80006c2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c4:	2c06      	cmp	r4, #6
 80006c6:	d919      	bls.n	80006fc <HAL_NVIC_SetPriority+0x50>
 80006c8:	3b03      	subs	r3, #3
 80006ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80006ce:	409c      	lsls	r4, r3
 80006d0:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006d8:	40aa      	lsls	r2, r5
 80006da:	ea21 0102 	bic.w	r1, r1, r2
 80006de:	fa01 f203 	lsl.w	r2, r1, r3
 80006e2:	4322      	orrs	r2, r4
 80006e4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80006e6:	2800      	cmp	r0, #0
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	db0a      	blt.n	8000702 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006f4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006f8:	bc30      	pop	{r4, r5}
 80006fa:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006fc:	2400      	movs	r4, #0
 80006fe:	4623      	mov	r3, r4
 8000700:	e7e8      	b.n	80006d4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	4b04      	ldr	r3, [pc, #16]	; (8000714 <HAL_NVIC_SetPriority+0x68>)
 8000704:	f000 000f 	and.w	r0, r0, #15
 8000708:	4403      	add	r3, r0
 800070a:	761a      	strb	r2, [r3, #24]
 800070c:	bc30      	pop	{r4, r5}
 800070e:	4770      	bx	lr
 8000710:	e000ed00 	.word	0xe000ed00
 8000714:	e000ecfc 	.word	0xe000ecfc

08000718 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	3801      	subs	r0, #1
 800071a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800071e:	d20e      	bcs.n	800073e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000722:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000724:	4c08      	ldr	r4, [pc, #32]	; (8000748 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000726:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	20f0      	movs	r0, #240	; 0xf0
 800072a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800072e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000730:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000732:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8000738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800073c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800073e:	2001      	movs	r0, #1
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e010 	.word	0xe000e010
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 800074c:	b188      	cbz	r0, 8000772 <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800074e:	7903      	ldrb	r3, [r0, #4]
{ 
 8000750:	b510      	push	{r4, lr}
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000752:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000756:	4604      	mov	r4, r0
 8000758:	b13b      	cbz	r3, 800076a <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800075a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800075c:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800075e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8000760:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8000762:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000764:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8000766:	7122      	strb	r2, [r4, #4]
}
 8000768:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800076a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800076c:	f7ff fe82 	bl	8000474 <HAL_DAC_MspInit>
 8000770:	e7f3      	b.n	800075a <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 8000772:	2001      	movs	r0, #1
}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop

08000778 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000778:	7943      	ldrb	r3, [r0, #5]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d01d      	beq.n	80007ba <HAL_DAC_ConfigChannel+0x42>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800077e:	2302      	movs	r3, #2
{
 8000780:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 8000782:	7103      	strb	r3, [r0, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000784:	6804      	ldr	r4, [r0, #0]
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000786:	e9d1 3600 	ldrd	r3, r6, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800078a:	f640 75fe 	movw	r5, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 800078e:	6821      	ldr	r1, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000790:	4095      	lsls	r5, r2
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000792:	4333      	orrs	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000794:	ea21 0105 	bic.w	r1, r1, r5
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000798:	4093      	lsls	r3, r2
 800079a:	430b      	orrs	r3, r1
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800079c:	6023      	str	r3, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	21c0      	movs	r1, #192	; 0xc0
 80007a2:	fa01 f202 	lsl.w	r2, r1, r2
 80007a6:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80007aa:	2101      	movs	r1, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80007ac:	2300      	movs	r3, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80007ae:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80007b0:	7101      	strb	r1, [r0, #4]
  __HAL_UNLOCK(hdac);
 80007b2:	7143      	strb	r3, [r0, #5]
  
  /* Return function status */
  return HAL_OK;
}
 80007b4:	bc70      	pop	{r4, r5, r6}
 80007b6:	4618      	mov	r0, r3
 80007b8:	4770      	bx	lr
  __HAL_LOCK(hdac);
 80007ba:	2202      	movs	r2, #2
}
 80007bc:	4610      	mov	r0, r2
 80007be:	4770      	bx	lr

080007c0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007c0:	f8d1 c000 	ldr.w	ip, [r1]
 80007c4:	f1bc 0f00 	cmp.w	ip, #0
 80007c8:	f000 80d0 	beq.w	800096c <HAL_GPIO_Init+0x1ac>
{
 80007cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007d0:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 80009a0 <HAL_GPIO_Init+0x1e0>
{
 80007d4:	b083      	sub	sp, #12
 80007d6:	4688      	mov	r8, r1
  uint32_t position = 0x00u;
 80007d8:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007da:	f04f 0901 	mov.w	r9, #1
 80007de:	fa09 f205 	lsl.w	r2, r9, r5
    if (iocurrent != 0x00u)
 80007e2:	ea12 060c 	ands.w	r6, r2, ip
 80007e6:	d077      	beq.n	80008d8 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80007ec:	f021 0a10 	bic.w	sl, r1, #16
 80007f0:	f1ba 0f02 	cmp.w	sl, #2
 80007f4:	d078      	beq.n	80008e8 <HAL_GPIO_Init+0x128>
 80007f6:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80007f8:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 80007fa:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80007fe:	40bb      	lsls	r3, r7
 8000800:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000802:	f001 0403 	and.w	r4, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000806:	ea03 0b0b 	and.w	fp, r3, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800080a:	40bc      	lsls	r4, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800080c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000810:	ea44 040b 	orr.w	r4, r4, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000814:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000818:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800081a:	f240 8086 	bls.w	800092a <HAL_GPIO_Init+0x16a>
      temp = GPIOx->PUPDR;
 800081e:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000820:	f8d8 2008 	ldr.w	r2, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000824:	4023      	ands	r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000826:	40ba      	lsls	r2, r7
 8000828:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800082a:	00cf      	lsls	r7, r1, #3
      GPIOx->PUPDR = temp;
 800082c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800082e:	d553      	bpl.n	80008d8 <HAL_GPIO_Init+0x118>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000830:	4a54      	ldr	r2, [pc, #336]	; (8000984 <HAL_GPIO_Init+0x1c4>)
 8000832:	6993      	ldr	r3, [r2, #24]
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	6993      	ldr	r3, [r2, #24]
 800083c:	f025 0403 	bic.w	r4, r5, #3
 8000840:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 800084c:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800084e:	f005 0203 	and.w	r2, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000854:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000856:	0092      	lsls	r2, r2, #2
 8000858:	230f      	movs	r3, #15
 800085a:	4093      	lsls	r3, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800085c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000860:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000864:	d016      	beq.n	8000894 <HAL_GPIO_Init+0xd4>
 8000866:	4f48      	ldr	r7, [pc, #288]	; (8000988 <HAL_GPIO_Init+0x1c8>)
 8000868:	42b8      	cmp	r0, r7
 800086a:	d076      	beq.n	800095a <HAL_GPIO_Init+0x19a>
 800086c:	4f47      	ldr	r7, [pc, #284]	; (800098c <HAL_GPIO_Init+0x1cc>)
 800086e:	42b8      	cmp	r0, r7
 8000870:	d06e      	beq.n	8000950 <HAL_GPIO_Init+0x190>
 8000872:	4f47      	ldr	r7, [pc, #284]	; (8000990 <HAL_GPIO_Init+0x1d0>)
 8000874:	42b8      	cmp	r0, r7
 8000876:	d07a      	beq.n	800096e <HAL_GPIO_Init+0x1ae>
 8000878:	4f46      	ldr	r7, [pc, #280]	; (8000994 <HAL_GPIO_Init+0x1d4>)
 800087a:	42b8      	cmp	r0, r7
 800087c:	d07c      	beq.n	8000978 <HAL_GPIO_Init+0x1b8>
 800087e:	4f46      	ldr	r7, [pc, #280]	; (8000998 <HAL_GPIO_Init+0x1d8>)
 8000880:	42b8      	cmp	r0, r7
 8000882:	d06e      	beq.n	8000962 <HAL_GPIO_Init+0x1a2>
 8000884:	4f45      	ldr	r7, [pc, #276]	; (800099c <HAL_GPIO_Init+0x1dc>)
 8000886:	42b8      	cmp	r0, r7
 8000888:	bf0c      	ite	eq
 800088a:	2706      	moveq	r7, #6
 800088c:	2707      	movne	r7, #7
 800088e:	fa07 f202 	lsl.w	r2, r7, r2
 8000892:	4313      	orrs	r3, r2
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000894:	60a3      	str	r3, [r4, #8]
        temp = EXTI->IMR;
 8000896:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~(iocurrent);
 800089a:	43f2      	mvns	r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800089c:	03cc      	lsls	r4, r1, #15
        temp &= ~(iocurrent);
 800089e:	bf54      	ite	pl
 80008a0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80008a2:	4333      	orrmi	r3, r6
        }
        EXTI->IMR = temp;
 80008a4:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80008a8:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008ac:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 80008ae:	bf54      	ite	pl
 80008b0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80008b2:	4333      	orrmi	r3, r6
        }
        EXTI->EMR = temp;
 80008b4:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008b8:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008bc:	02cc      	lsls	r4, r1, #11
        temp &= ~(iocurrent);
 80008be:	bf54      	ite	pl
 80008c0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80008c2:	4333      	orrmi	r3, r6
        }
        EXTI->RTSR = temp;
 80008c4:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80008c8:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008cc:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 80008ce:	bf54      	ite	pl
 80008d0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80008d2:	4333      	orrmi	r3, r6
        }
        EXTI->FTSR = temp;
 80008d4:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }

    position++;
 80008d8:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008da:	fa3c f305 	lsrs.w	r3, ip, r5
 80008de:	f47f af7e 	bne.w	80007de <HAL_GPIO_Init+0x1e>
  }
}
 80008e2:	b003      	add	sp, #12
 80008e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3u];
 80008e8:	08ef      	lsrs	r7, r5, #3
 80008ea:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008ee:	f005 0407 	and.w	r4, r5, #7
        temp = GPIOx->AFR[position >> 3u];
 80008f2:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008f4:	00a4      	lsls	r4, r4, #2
 80008f6:	f04f 0b0f 	mov.w	fp, #15
 80008fa:	fa0b fb04 	lsl.w	fp, fp, r4
 80008fe:	ea23 0a0b 	bic.w	sl, r3, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000902:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8000906:	40a3      	lsls	r3, r4
 8000908:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 800090c:	623b      	str	r3, [r7, #32]
 800090e:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000910:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8000912:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000916:	40bb      	lsls	r3, r7
 8000918:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800091a:	f001 0403 	and.w	r4, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800091e:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000922:	40bc      	lsls	r4, r7
 8000924:	ea44 040a 	orr.w	r4, r4, sl
      GPIOx->MODER = temp;
 8000928:	6004      	str	r4, [r0, #0]
        temp = GPIOx->OSPEEDR;
 800092a:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800092c:	ea03 0a04 	and.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000930:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8000934:	40bc      	lsls	r4, r7
 8000936:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OSPEEDR = temp;
 800093a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800093c:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000940:	f3c1 1400 	ubfx	r4, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000944:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000948:	40ac      	lsls	r4, r5
 800094a:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 800094c:	6044      	str	r4, [r0, #4]
 800094e:	e766      	b.n	800081e <HAL_GPIO_Init+0x5e>
 8000950:	2702      	movs	r7, #2
 8000952:	fa07 f202 	lsl.w	r2, r7, r2
 8000956:	4313      	orrs	r3, r2
 8000958:	e79c      	b.n	8000894 <HAL_GPIO_Init+0xd4>
 800095a:	fa09 f202 	lsl.w	r2, r9, r2
 800095e:	4313      	orrs	r3, r2
 8000960:	e798      	b.n	8000894 <HAL_GPIO_Init+0xd4>
 8000962:	2705      	movs	r7, #5
 8000964:	fa07 f202 	lsl.w	r2, r7, r2
 8000968:	4313      	orrs	r3, r2
 800096a:	e793      	b.n	8000894 <HAL_GPIO_Init+0xd4>
 800096c:	4770      	bx	lr
 800096e:	2703      	movs	r7, #3
 8000970:	fa07 f202 	lsl.w	r2, r7, r2
 8000974:	4313      	orrs	r3, r2
 8000976:	e78d      	b.n	8000894 <HAL_GPIO_Init+0xd4>
 8000978:	2704      	movs	r7, #4
 800097a:	fa07 f202 	lsl.w	r2, r7, r2
 800097e:	4313      	orrs	r3, r2
 8000980:	e788      	b.n	8000894 <HAL_GPIO_Init+0xd4>
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000
 8000988:	48000400 	.word	0x48000400
 800098c:	48000800 	.word	0x48000800
 8000990:	48000c00 	.word	0x48000c00
 8000994:	48001000 	.word	0x48001000
 8000998:	48001400 	.word	0x48001400
 800099c:	48001800 	.word	0x48001800
 80009a0:	40010400 	.word	0x40010400

080009a4 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009a4:	2800      	cmp	r0, #0
 80009a6:	f000 81d6 	beq.w	8000d56 <HAL_RCC_OscConfig+0x3b2>
{
 80009aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ae:	6803      	ldr	r3, [r0, #0]
 80009b0:	07df      	lsls	r7, r3, #31
{
 80009b2:	b083      	sub	sp, #12
 80009b4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009b6:	d542      	bpl.n	8000a3e <HAL_RCC_OscConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009b8:	49c1      	ldr	r1, [pc, #772]	; (8000cc0 <HAL_RCC_OscConfig+0x31c>)
 80009ba:	684a      	ldr	r2, [r1, #4]
 80009bc:	f002 020c 	and.w	r2, r2, #12
 80009c0:	2a04      	cmp	r2, #4
 80009c2:	f000 8166 	beq.w	8000c92 <HAL_RCC_OscConfig+0x2ee>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009c6:	684a      	ldr	r2, [r1, #4]
 80009c8:	f002 020c 	and.w	r2, r2, #12
 80009cc:	2a08      	cmp	r2, #8
 80009ce:	f000 8159 	beq.w	8000c84 <HAL_RCC_OscConfig+0x2e0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009d2:	6863      	ldr	r3, [r4, #4]
 80009d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009d8:	d010      	beq.n	80009fc <HAL_RCC_OscConfig+0x58>
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 8198 	beq.w	8000d10 <HAL_RCC_OscConfig+0x36c>
 80009e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009e4:	f000 823a 	beq.w	8000e5c <HAL_RCC_OscConfig+0x4b8>
 80009e8:	4bb5      	ldr	r3, [pc, #724]	; (8000cc0 <HAL_RCC_OscConfig+0x31c>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	e004      	b.n	8000a06 <HAL_RCC_OscConfig+0x62>
 80009fc:	4ab0      	ldr	r2, [pc, #704]	; (8000cc0 <HAL_RCC_OscConfig+0x31c>)
 80009fe:	6813      	ldr	r3, [r2, #0]
 8000a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a04:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a06:	f7ff fe27 	bl	8000658 <HAL_GetTick>
 8000a0a:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8000a0e:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a10:	4eab      	ldr	r6, [pc, #684]	; (8000cc0 <HAL_RCC_OscConfig+0x31c>)
 8000a12:	2501      	movs	r5, #1
 8000a14:	e005      	b.n	8000a22 <HAL_RCC_OscConfig+0x7e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a16:	f7ff fe1f 	bl	8000658 <HAL_GetTick>
 8000a1a:	1bc0      	subs	r0, r0, r7
 8000a1c:	2864      	cmp	r0, #100	; 0x64
 8000a1e:	f200 8165 	bhi.w	8000cec <HAL_RCC_OscConfig+0x348>
 8000a22:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a26:	6832      	ldr	r2, [r6, #0]
 8000a28:	fa98 f3a8 	rbit	r3, r8
 8000a2c:	fab3 f383 	clz	r3, r3
 8000a30:	f003 031f 	and.w	r3, r3, #31
 8000a34:	fa05 f303 	lsl.w	r3, r5, r3
 8000a38:	4213      	tst	r3, r2
 8000a3a:	d0ec      	beq.n	8000a16 <HAL_RCC_OscConfig+0x72>
 8000a3c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a3e:	079e      	lsls	r6, r3, #30
 8000a40:	d459      	bmi.n	8000af6 <HAL_RCC_OscConfig+0x152>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a42:	071d      	lsls	r5, r3, #28
 8000a44:	d52c      	bpl.n	8000aa0 <HAL_RCC_OscConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a46:	6962      	ldr	r2, [r4, #20]
 8000a48:	2a00      	cmp	r2, #0
 8000a4a:	f000 80f4 	beq.w	8000c36 <HAL_RCC_OscConfig+0x292>
 8000a4e:	2201      	movs	r2, #1
 8000a50:	fa92 f1a2 	rbit	r1, r2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a54:	4b9b      	ldr	r3, [pc, #620]	; (8000cc4 <HAL_RCC_OscConfig+0x320>)
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a56:	4e9a      	ldr	r6, [pc, #616]	; (8000cc0 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_ENABLE();
 8000a58:	fab1 f181 	clz	r1, r1
 8000a5c:	440b      	add	r3, r1
 8000a5e:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a60:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8000a62:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a64:	f7ff fdf8 	bl	8000658 <HAL_GetTick>
 8000a68:	f04f 0802 	mov.w	r8, #2
 8000a6c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a6e:	e005      	b.n	8000a7c <HAL_RCC_OscConfig+0xd8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a70:	f7ff fdf2 	bl	8000658 <HAL_GetTick>
 8000a74:	1bc0      	subs	r0, r0, r7
 8000a76:	2802      	cmp	r0, #2
 8000a78:	f200 8138 	bhi.w	8000cec <HAL_RCC_OscConfig+0x348>
 8000a7c:	fa98 f3a8 	rbit	r3, r8
 8000a80:	fa98 f3a8 	rbit	r3, r8
 8000a84:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a88:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000a8a:	fa98 f3a8 	rbit	r3, r8
 8000a8e:	fab3 f383 	clz	r3, r3
 8000a92:	f003 031f 	and.w	r3, r3, #31
 8000a96:	fa05 f303 	lsl.w	r3, r5, r3
 8000a9a:	4213      	tst	r3, r2
 8000a9c:	d0e8      	beq.n	8000a70 <HAL_RCC_OscConfig+0xcc>
 8000a9e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aa0:	0758      	lsls	r0, r3, #29
 8000aa2:	d573      	bpl.n	8000b8c <HAL_RCC_OscConfig+0x1e8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aa4:	4b86      	ldr	r3, [pc, #536]	; (8000cc0 <HAL_RCC_OscConfig+0x31c>)
 8000aa6:	69da      	ldr	r2, [r3, #28]
 8000aa8:	00d1      	lsls	r1, r2, #3
 8000aaa:	f100 8156 	bmi.w	8000d5a <HAL_RCC_OscConfig+0x3b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	69da      	ldr	r2, [r3, #28]
 8000ab0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ab4:	61da      	str	r2, [r3, #28]
 8000ab6:	69db      	ldr	r3, [r3, #28]
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ac0:	f04f 0801 	mov.w	r8, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ac4:	4d80      	ldr	r5, [pc, #512]	; (8000cc8 <HAL_RCC_OscConfig+0x324>)
 8000ac6:	682a      	ldr	r2, [r5, #0]
 8000ac8:	05d2      	lsls	r2, r2, #23
 8000aca:	f140 80ff 	bpl.w	8000ccc <HAL_RCC_OscConfig+0x328>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ace:	68a3      	ldr	r3, [r4, #8]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	f000 8198 	beq.w	8000e06 <HAL_RCC_OscConfig+0x462>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 8142 	beq.w	8000d60 <HAL_RCC_OscConfig+0x3bc>
 8000adc:	2b05      	cmp	r3, #5
 8000ade:	4b78      	ldr	r3, [pc, #480]	; (8000cc0 <HAL_RCC_OscConfig+0x31c>)
 8000ae0:	6a1a      	ldr	r2, [r3, #32]
 8000ae2:	f000 81c8 	beq.w	8000e76 <HAL_RCC_OscConfig+0x4d2>
 8000ae6:	f022 0201 	bic.w	r2, r2, #1
 8000aea:	621a      	str	r2, [r3, #32]
 8000aec:	6a1a      	ldr	r2, [r3, #32]
 8000aee:	f022 0204 	bic.w	r2, r2, #4
 8000af2:	621a      	str	r2, [r3, #32]
 8000af4:	e18c      	b.n	8000e10 <HAL_RCC_OscConfig+0x46c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000af6:	4a72      	ldr	r2, [pc, #456]	; (8000cc0 <HAL_RCC_OscConfig+0x31c>)
 8000af8:	6851      	ldr	r1, [r2, #4]
 8000afa:	f011 0f0c 	tst.w	r1, #12
 8000afe:	f000 8083 	beq.w	8000c08 <HAL_RCC_OscConfig+0x264>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b02:	6851      	ldr	r1, [r2, #4]
 8000b04:	f001 010c 	and.w	r1, r1, #12
 8000b08:	2908      	cmp	r1, #8
 8000b0a:	d077      	beq.n	8000bfc <HAL_RCC_OscConfig+0x258>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b0c:	68e2      	ldr	r2, [r4, #12]
 8000b0e:	2a00      	cmp	r2, #0
 8000b10:	f000 8153 	beq.w	8000dba <HAL_RCC_OscConfig+0x416>
 8000b14:	2201      	movs	r2, #1
 8000b16:	fa92 f3a2 	rbit	r3, r2
        __HAL_RCC_HSI_ENABLE();
 8000b1a:	fab3 f383 	clz	r3, r3
 8000b1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b26:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b28:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8000b2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b2c:	f7ff fd94 	bl	8000658 <HAL_GetTick>
 8000b30:	f04f 0802 	mov.w	r8, #2
 8000b34:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b36:	4d62      	ldr	r5, [pc, #392]	; (8000cc0 <HAL_RCC_OscConfig+0x31c>)
 8000b38:	e005      	b.n	8000b46 <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b3a:	f7ff fd8d 	bl	8000658 <HAL_GetTick>
 8000b3e:	1bc0      	subs	r0, r0, r7
 8000b40:	2802      	cmp	r0, #2
 8000b42:	f200 80d3 	bhi.w	8000cec <HAL_RCC_OscConfig+0x348>
 8000b46:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b4a:	682a      	ldr	r2, [r5, #0]
 8000b4c:	fa98 f3a8 	rbit	r3, r8
 8000b50:	fab3 f383 	clz	r3, r3
 8000b54:	f003 031f 	and.w	r3, r3, #31
 8000b58:	fa06 f303 	lsl.w	r3, r6, r3
 8000b5c:	4213      	tst	r3, r2
 8000b5e:	d0ec      	beq.n	8000b3a <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b60:	6829      	ldr	r1, [r5, #0]
 8000b62:	22f8      	movs	r2, #248	; 0xf8
 8000b64:	fa92 f2a2 	rbit	r2, r2
 8000b68:	6923      	ldr	r3, [r4, #16]
 8000b6a:	fab2 f282 	clz	r2, r2
 8000b6e:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8000b72:	4093      	lsls	r3, r2
 8000b74:	430b      	orrs	r3, r1
 8000b76:	602b      	str	r3, [r5, #0]
 8000b78:	6823      	ldr	r3, [r4, #0]
 8000b7a:	e762      	b.n	8000a42 <HAL_RCC_OscConfig+0x9e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000b7c:	f1b8 0f00 	cmp.w	r8, #0
 8000b80:	d004      	beq.n	8000b8c <HAL_RCC_OscConfig+0x1e8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b82:	4a4f      	ldr	r2, [pc, #316]	; (8000cc0 <HAL_RCC_OscConfig+0x31c>)
 8000b84:	69d3      	ldr	r3, [r2, #28]
 8000b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b8c:	69a0      	ldr	r0, [r4, #24]
 8000b8e:	b388      	cbz	r0, 8000bf4 <HAL_RCC_OscConfig+0x250>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b90:	4d4b      	ldr	r5, [pc, #300]	; (8000cc0 <HAL_RCC_OscConfig+0x31c>)
 8000b92:	686b      	ldr	r3, [r5, #4]
 8000b94:	f003 030c 	and.w	r3, r3, #12
 8000b98:	2b08      	cmp	r3, #8
 8000b9a:	f000 8174 	beq.w	8000e86 <HAL_RCC_OscConfig+0x4e2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b9e:	2802      	cmp	r0, #2
 8000ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ba4:	f000 8187 	beq.w	8000eb6 <HAL_RCC_OscConfig+0x512>
 8000ba8:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bac:	fab3 f383 	clz	r3, r3
 8000bb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000bb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bbe:	f7ff fd4b 	bl	8000658 <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bc2:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8000bc4:	4607      	mov	r7, r0
 8000bc6:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bca:	2601      	movs	r6, #1
 8000bcc:	e005      	b.n	8000bda <HAL_RCC_OscConfig+0x236>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bce:	f7ff fd43 	bl	8000658 <HAL_GetTick>
 8000bd2:	1bc0      	subs	r0, r0, r7
 8000bd4:	2802      	cmp	r0, #2
 8000bd6:	f200 8089 	bhi.w	8000cec <HAL_RCC_OscConfig+0x348>
 8000bda:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bde:	6822      	ldr	r2, [r4, #0]
 8000be0:	fa95 f3a5 	rbit	r3, r5
 8000be4:	fab3 f383 	clz	r3, r3
 8000be8:	f003 031f 	and.w	r3, r3, #31
 8000bec:	fa06 f303 	lsl.w	r3, r6, r3
 8000bf0:	4213      	tst	r3, r2
 8000bf2:	d1ec      	bne.n	8000bce <HAL_RCC_OscConfig+0x22a>
        }
      }
    }
  }

  return HAL_OK;
 8000bf4:	2000      	movs	r0, #0
}
 8000bf6:	b003      	add	sp, #12
 8000bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bfc:	6852      	ldr	r2, [r2, #4]
 8000bfe:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8000c02:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000c06:	d181      	bne.n	8000b0c <HAL_RCC_OscConfig+0x168>
 8000c08:	2202      	movs	r2, #2
 8000c0a:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c0e:	492c      	ldr	r1, [pc, #176]	; (8000cc0 <HAL_RCC_OscConfig+0x31c>)
 8000c10:	6808      	ldr	r0, [r1, #0]
 8000c12:	fa92 f2a2 	rbit	r2, r2
 8000c16:	fab2 f282 	clz	r2, r2
 8000c1a:	f002 021f 	and.w	r2, r2, #31
 8000c1e:	2101      	movs	r1, #1
 8000c20:	fa01 f202 	lsl.w	r2, r1, r2
 8000c24:	4202      	tst	r2, r0
 8000c26:	d065      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x350>
 8000c28:	68e2      	ldr	r2, [r4, #12]
 8000c2a:	428a      	cmp	r2, r1
 8000c2c:	d062      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x350>
        return HAL_ERROR;
 8000c2e:	2001      	movs	r0, #1
}
 8000c30:	b003      	add	sp, #12
 8000c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c36:	2501      	movs	r5, #1
 8000c38:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8000c3c:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <HAL_RCC_OscConfig+0x320>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c3e:	4e20      	ldr	r6, [pc, #128]	; (8000cc0 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_DISABLE();
 8000c40:	fab1 f181 	clz	r1, r1
 8000c44:	440b      	add	r3, r1
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	f04f 0802 	mov.w	r8, #2
 8000c4c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c4e:	f7ff fd03 	bl	8000658 <HAL_GetTick>
 8000c52:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c54:	e004      	b.n	8000c60 <HAL_RCC_OscConfig+0x2bc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c56:	f7ff fcff 	bl	8000658 <HAL_GetTick>
 8000c5a:	1bc0      	subs	r0, r0, r7
 8000c5c:	2802      	cmp	r0, #2
 8000c5e:	d845      	bhi.n	8000cec <HAL_RCC_OscConfig+0x348>
 8000c60:	fa98 f3a8 	rbit	r3, r8
 8000c64:	fa98 f3a8 	rbit	r3, r8
 8000c68:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c6c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000c6e:	fa98 f3a8 	rbit	r3, r8
 8000c72:	fab3 f383 	clz	r3, r3
 8000c76:	f003 031f 	and.w	r3, r3, #31
 8000c7a:	fa05 f303 	lsl.w	r3, r5, r3
 8000c7e:	4213      	tst	r3, r2
 8000c80:	d1e9      	bne.n	8000c56 <HAL_RCC_OscConfig+0x2b2>
 8000c82:	e70c      	b.n	8000a9e <HAL_RCC_OscConfig+0xfa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c84:	684a      	ldr	r2, [r1, #4]
 8000c86:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8000c8a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000c8e:	f47f aea0 	bne.w	80009d2 <HAL_RCC_OscConfig+0x2e>
 8000c92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c96:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c9a:	4909      	ldr	r1, [pc, #36]	; (8000cc0 <HAL_RCC_OscConfig+0x31c>)
 8000c9c:	6808      	ldr	r0, [r1, #0]
 8000c9e:	fa92 f2a2 	rbit	r2, r2
 8000ca2:	fab2 f282 	clz	r2, r2
 8000ca6:	f002 021f 	and.w	r2, r2, #31
 8000caa:	2101      	movs	r1, #1
 8000cac:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb0:	4202      	tst	r2, r0
 8000cb2:	f43f aec4 	beq.w	8000a3e <HAL_RCC_OscConfig+0x9a>
 8000cb6:	6862      	ldr	r2, [r4, #4]
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f47f aec0 	bne.w	8000a3e <HAL_RCC_OscConfig+0x9a>
 8000cbe:	e7b6      	b.n	8000c2e <HAL_RCC_OscConfig+0x28a>
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	10908120 	.word	0x10908120
 8000cc8:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ccc:	682a      	ldr	r2, [r5, #0]
 8000cce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cd2:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8000cd4:	f7ff fcc0 	bl	8000658 <HAL_GetTick>
 8000cd8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cda:	682b      	ldr	r3, [r5, #0]
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	f53f aef6 	bmi.w	8000ace <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ce2:	f7ff fcb9 	bl	8000658 <HAL_GetTick>
 8000ce6:	1b80      	subs	r0, r0, r6
 8000ce8:	2864      	cmp	r0, #100	; 0x64
 8000cea:	d9f6      	bls.n	8000cda <HAL_RCC_OscConfig+0x336>
            return HAL_TIMEOUT;
 8000cec:	2003      	movs	r0, #3
}
 8000cee:	b003      	add	sp, #12
 8000cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf4:	4d9d      	ldr	r5, [pc, #628]	; (8000f6c <HAL_RCC_OscConfig+0x5c8>)
 8000cf6:	21f8      	movs	r1, #248	; 0xf8
 8000cf8:	6828      	ldr	r0, [r5, #0]
 8000cfa:	fa91 f1a1 	rbit	r1, r1
 8000cfe:	6922      	ldr	r2, [r4, #16]
 8000d00:	fab1 f181 	clz	r1, r1
 8000d04:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8000d08:	408a      	lsls	r2, r1
 8000d0a:	4302      	orrs	r2, r0
 8000d0c:	602a      	str	r2, [r5, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0e:	e698      	b.n	8000a42 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d10:	4d96      	ldr	r5, [pc, #600]	; (8000f6c <HAL_RCC_OscConfig+0x5c8>)
 8000d12:	682b      	ldr	r3, [r5, #0]
 8000d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d18:	602b      	str	r3, [r5, #0]
 8000d1a:	682b      	ldr	r3, [r5, #0]
 8000d1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d20:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d22:	f7ff fc99 	bl	8000658 <HAL_GetTick>
 8000d26:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8000d2a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d2c:	2601      	movs	r6, #1
 8000d2e:	e004      	b.n	8000d3a <HAL_RCC_OscConfig+0x396>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d30:	f7ff fc92 	bl	8000658 <HAL_GetTick>
 8000d34:	1bc0      	subs	r0, r0, r7
 8000d36:	2864      	cmp	r0, #100	; 0x64
 8000d38:	d8d8      	bhi.n	8000cec <HAL_RCC_OscConfig+0x348>
 8000d3a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d3e:	682a      	ldr	r2, [r5, #0]
 8000d40:	fa98 f3a8 	rbit	r3, r8
 8000d44:	fab3 f383 	clz	r3, r3
 8000d48:	f003 031f 	and.w	r3, r3, #31
 8000d4c:	fa06 f303 	lsl.w	r3, r6, r3
 8000d50:	4213      	tst	r3, r2
 8000d52:	d1ed      	bne.n	8000d30 <HAL_RCC_OscConfig+0x38c>
 8000d54:	e672      	b.n	8000a3c <HAL_RCC_OscConfig+0x98>
    return HAL_ERROR;
 8000d56:	2001      	movs	r0, #1
}
 8000d58:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8000d5a:	f04f 0800 	mov.w	r8, #0
 8000d5e:	e6b1      	b.n	8000ac4 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d60:	4d82      	ldr	r5, [pc, #520]	; (8000f6c <HAL_RCC_OscConfig+0x5c8>)
 8000d62:	6a2b      	ldr	r3, [r5, #32]
 8000d64:	f023 0301 	bic.w	r3, r3, #1
 8000d68:	622b      	str	r3, [r5, #32]
 8000d6a:	6a2b      	ldr	r3, [r5, #32]
 8000d6c:	f023 0304 	bic.w	r3, r3, #4
 8000d70:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000d72:	f7ff fc71 	bl	8000658 <HAL_GetTick>
 8000d76:	f04f 0902 	mov.w	r9, #2
 8000d7a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d7c:	2601      	movs	r6, #1
 8000d7e:	e014      	b.n	8000daa <HAL_RCC_OscConfig+0x406>
 8000d80:	fa99 f3a9 	rbit	r3, r9
 8000d84:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000d86:	fa99 f3a9 	rbit	r3, r9
 8000d8a:	fab3 f383 	clz	r3, r3
 8000d8e:	f003 031f 	and.w	r3, r3, #31
 8000d92:	fa06 f303 	lsl.w	r3, r6, r3
 8000d96:	4213      	tst	r3, r2
 8000d98:	f43f aef0 	beq.w	8000b7c <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d9c:	f7ff fc5c 	bl	8000658 <HAL_GetTick>
 8000da0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000da4:	1bc0      	subs	r0, r0, r7
 8000da6:	4298      	cmp	r0, r3
 8000da8:	d8a0      	bhi.n	8000cec <HAL_RCC_OscConfig+0x348>
 8000daa:	fa99 f3a9 	rbit	r3, r9
 8000dae:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0e4      	beq.n	8000d80 <HAL_RCC_OscConfig+0x3dc>
 8000db6:	6a2a      	ldr	r2, [r5, #32]
 8000db8:	e7e5      	b.n	8000d86 <HAL_RCC_OscConfig+0x3e2>
 8000dba:	2501      	movs	r5, #1
 8000dbc:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000dc0:	fab3 f383 	clz	r3, r3
 8000dc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000dc8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	f04f 0802 	mov.w	r8, #2
 8000dd2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fc40 	bl	8000658 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd8:	4e64      	ldr	r6, [pc, #400]	; (8000f6c <HAL_RCC_OscConfig+0x5c8>)
        tickstart = HAL_GetTick();
 8000dda:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ddc:	e004      	b.n	8000de8 <HAL_RCC_OscConfig+0x444>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dde:	f7ff fc3b 	bl	8000658 <HAL_GetTick>
 8000de2:	1bc0      	subs	r0, r0, r7
 8000de4:	2802      	cmp	r0, #2
 8000de6:	d881      	bhi.n	8000cec <HAL_RCC_OscConfig+0x348>
 8000de8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dec:	6832      	ldr	r2, [r6, #0]
 8000dee:	fa98 f3a8 	rbit	r3, r8
 8000df2:	fab3 f383 	clz	r3, r3
 8000df6:	f003 031f 	and.w	r3, r3, #31
 8000dfa:	fa05 f303 	lsl.w	r3, r5, r3
 8000dfe:	4213      	tst	r3, r2
 8000e00:	d1ed      	bne.n	8000dde <HAL_RCC_OscConfig+0x43a>
 8000e02:	6823      	ldr	r3, [r4, #0]
 8000e04:	e61d      	b.n	8000a42 <HAL_RCC_OscConfig+0x9e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e06:	4a59      	ldr	r2, [pc, #356]	; (8000f6c <HAL_RCC_OscConfig+0x5c8>)
 8000e08:	6a13      	ldr	r3, [r2, #32]
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8000e10:	f7ff fc22 	bl	8000658 <HAL_GetTick>
 8000e14:	f04f 0902 	mov.w	r9, #2
 8000e18:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e1a:	4e54      	ldr	r6, [pc, #336]	; (8000f6c <HAL_RCC_OscConfig+0x5c8>)
 8000e1c:	2501      	movs	r5, #1
 8000e1e:	e015      	b.n	8000e4c <HAL_RCC_OscConfig+0x4a8>
 8000e20:	fa99 f3a9 	rbit	r3, r9
 8000e24:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000e26:	fa99 f3a9 	rbit	r3, r9
 8000e2a:	fab3 f383 	clz	r3, r3
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	fa05 f303 	lsl.w	r3, r5, r3
 8000e36:	4213      	tst	r3, r2
 8000e38:	f47f aea0 	bne.w	8000b7c <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e3c:	f7ff fc0c 	bl	8000658 <HAL_GetTick>
 8000e40:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e44:	1bc0      	subs	r0, r0, r7
 8000e46:	4298      	cmp	r0, r3
 8000e48:	f63f af50 	bhi.w	8000cec <HAL_RCC_OscConfig+0x348>
 8000e4c:	fa99 f3a9 	rbit	r3, r9
 8000e50:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0e3      	beq.n	8000e20 <HAL_RCC_OscConfig+0x47c>
 8000e58:	6a32      	ldr	r2, [r6, #32]
 8000e5a:	e7e4      	b.n	8000e26 <HAL_RCC_OscConfig+0x482>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e60:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	e5c7      	b.n	8000a06 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e76:	f042 0204 	orr.w	r2, r2, #4
 8000e7a:	621a      	str	r2, [r3, #32]
 8000e7c:	6a1a      	ldr	r2, [r3, #32]
 8000e7e:	f042 0201 	orr.w	r2, r2, #1
 8000e82:	621a      	str	r2, [r3, #32]
 8000e84:	e7c4      	b.n	8000e10 <HAL_RCC_OscConfig+0x46c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e86:	2801      	cmp	r0, #1
 8000e88:	f43f aed2 	beq.w	8000c30 <HAL_RCC_OscConfig+0x28c>
        pll_config = RCC->CFGR;
 8000e8c:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000e8e:	69e1      	ldr	r1, [r4, #28]
        pll_config2 = RCC->CFGR2;
 8000e90:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000e92:	f402 30c0 	and.w	r0, r2, #98304	; 0x18000
 8000e96:	4288      	cmp	r0, r1
 8000e98:	f47f aec9 	bne.w	8000c2e <HAL_RCC_OscConfig+0x28a>
 8000e9c:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8000e9e:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000ea2:	428a      	cmp	r2, r1
 8000ea4:	f47f aec3 	bne.w	8000c2e <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8000ea8:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8000eaa:	f003 030f 	and.w	r3, r3, #15
    return HAL_ERROR;
 8000eae:	1a18      	subs	r0, r3, r0
 8000eb0:	bf18      	it	ne
 8000eb2:	2001      	movne	r0, #1
 8000eb4:	e6bc      	b.n	8000c30 <HAL_RCC_OscConfig+0x28c>
 8000eb6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000eba:	fab3 f383 	clz	r3, r3
 8000ebe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ec2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fbc4 	bl	8000658 <HAL_GetTick>
 8000ed0:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8000ed4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ed6:	2601      	movs	r6, #1
 8000ed8:	e005      	b.n	8000ee6 <HAL_RCC_OscConfig+0x542>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000eda:	f7ff fbbd 	bl	8000658 <HAL_GetTick>
 8000ede:	1bc0      	subs	r0, r0, r7
 8000ee0:	2802      	cmp	r0, #2
 8000ee2:	f63f af03 	bhi.w	8000cec <HAL_RCC_OscConfig+0x348>
 8000ee6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eea:	682a      	ldr	r2, [r5, #0]
 8000eec:	fa98 f3a8 	rbit	r3, r8
 8000ef0:	fab3 f383 	clz	r3, r3
 8000ef4:	f003 031f 	and.w	r3, r3, #31
 8000ef8:	fa06 f303 	lsl.w	r3, r6, r3
 8000efc:	4213      	tst	r3, r2
 8000efe:	d1ec      	bne.n	8000eda <HAL_RCC_OscConfig+0x536>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f04:	f023 030f 	bic.w	r3, r3, #15
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000f0c:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8000f10:	686a      	ldr	r2, [r5, #4]
 8000f12:	430b      	orrs	r3, r1
 8000f14:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	606b      	str	r3, [r5, #4]
 8000f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f20:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000f24:	fab3 f383 	clz	r3, r3
 8000f28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000f36:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000f38:	f7ff fb8e 	bl	8000658 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f3c:	4e0b      	ldr	r6, [pc, #44]	; (8000f6c <HAL_RCC_OscConfig+0x5c8>)
        tickstart = HAL_GetTick();
 8000f3e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f40:	2501      	movs	r5, #1
 8000f42:	e005      	b.n	8000f50 <HAL_RCC_OscConfig+0x5ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f44:	f7ff fb88 	bl	8000658 <HAL_GetTick>
 8000f48:	1bc0      	subs	r0, r0, r7
 8000f4a:	2802      	cmp	r0, #2
 8000f4c:	f63f aece 	bhi.w	8000cec <HAL_RCC_OscConfig+0x348>
 8000f50:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f54:	6832      	ldr	r2, [r6, #0]
 8000f56:	fa94 f3a4 	rbit	r3, r4
 8000f5a:	fab3 f383 	clz	r3, r3
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	fa05 f303 	lsl.w	r3, r5, r3
 8000f66:	4213      	tst	r3, r2
 8000f68:	d0ec      	beq.n	8000f44 <HAL_RCC_OscConfig+0x5a0>
 8000f6a:	e643      	b.n	8000bf4 <HAL_RCC_OscConfig+0x250>
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f70:	b178      	cbz	r0, 8000f92 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f72:	4a64      	ldr	r2, [pc, #400]	; (8001104 <HAL_RCC_ClockConfig+0x194>)
 8000f74:	6813      	ldr	r3, [r2, #0]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d20b      	bcs.n	8000f96 <HAL_RCC_ClockConfig+0x26>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f7e:	6813      	ldr	r3, [r2, #0]
 8000f80:	f023 0307 	bic.w	r3, r3, #7
 8000f84:	430b      	orrs	r3, r1
 8000f86:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f88:	6813      	ldr	r3, [r2, #0]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	d001      	beq.n	8000f96 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8000f92:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8000f94:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f96:	6803      	ldr	r3, [r0, #0]
{
 8000f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f9c:	079c      	lsls	r4, r3, #30
 8000f9e:	d506      	bpl.n	8000fae <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa0:	4c59      	ldr	r4, [pc, #356]	; (8001108 <HAL_RCC_ClockConfig+0x198>)
 8000fa2:	6885      	ldr	r5, [r0, #8]
 8000fa4:	6862      	ldr	r2, [r4, #4]
 8000fa6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000faa:	432a      	orrs	r2, r5
 8000fac:	6062      	str	r2, [r4, #4]
 8000fae:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fb0:	07d9      	lsls	r1, r3, #31
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	d530      	bpl.n	8001018 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb6:	6842      	ldr	r2, [r0, #4]
 8000fb8:	2a01      	cmp	r2, #1
 8000fba:	f000 808e 	beq.w	80010da <HAL_RCC_ClockConfig+0x16a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fbe:	2a02      	cmp	r2, #2
 8000fc0:	bf0c      	ite	eq
 8000fc2:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000fc6:	2302      	movne	r3, #2
 8000fc8:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fcc:	494e      	ldr	r1, [pc, #312]	; (8001108 <HAL_RCC_ClockConfig+0x198>)
 8000fce:	6808      	ldr	r0, [r1, #0]
 8000fd0:	fa93 f3a3 	rbit	r3, r3
 8000fd4:	fab3 f383 	clz	r3, r3
 8000fd8:	f003 031f 	and.w	r3, r3, #31
 8000fdc:	2101      	movs	r1, #1
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	4203      	tst	r3, r0
 8000fe4:	d028      	beq.n	8001038 <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe6:	4e48      	ldr	r6, [pc, #288]	; (8001108 <HAL_RCC_ClockConfig+0x198>)
 8000fe8:	6873      	ldr	r3, [r6, #4]
 8000fea:	f023 0303 	bic.w	r3, r3, #3
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000ff2:	f7ff fb31 	bl	8000658 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff6:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ffa:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ffc:	e005      	b.n	800100a <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ffe:	f7ff fb2b 	bl	8000658 <HAL_GetTick>
 8001002:	eba0 0008 	sub.w	r0, r0, r8
 8001006:	42b8      	cmp	r0, r7
 8001008:	d879      	bhi.n	80010fe <HAL_RCC_ClockConfig+0x18e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800100a:	6873      	ldr	r3, [r6, #4]
 800100c:	6862      	ldr	r2, [r4, #4]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001016:	d1f2      	bne.n	8000ffe <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001018:	4a3a      	ldr	r2, [pc, #232]	; (8001104 <HAL_RCC_ClockConfig+0x194>)
 800101a:	6813      	ldr	r3, [r2, #0]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	42ab      	cmp	r3, r5
 8001022:	d90c      	bls.n	800103e <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001024:	6813      	ldr	r3, [r2, #0]
 8001026:	f023 0307 	bic.w	r3, r3, #7
 800102a:	432b      	orrs	r3, r5
 800102c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800102e:	6813      	ldr	r3, [r2, #0]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	42ab      	cmp	r3, r5
 8001036:	d002      	beq.n	800103e <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 8001038:	2001      	movs	r0, #1
}
 800103a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	075a      	lsls	r2, r3, #29
 8001042:	d506      	bpl.n	8001052 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001044:	4930      	ldr	r1, [pc, #192]	; (8001108 <HAL_RCC_ClockConfig+0x198>)
 8001046:	68e0      	ldr	r0, [r4, #12]
 8001048:	684a      	ldr	r2, [r1, #4]
 800104a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800104e:	4302      	orrs	r2, r0
 8001050:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001052:	071b      	lsls	r3, r3, #28
 8001054:	d507      	bpl.n	8001066 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001056:	4a2c      	ldr	r2, [pc, #176]	; (8001108 <HAL_RCC_ClockConfig+0x198>)
 8001058:	6921      	ldr	r1, [r4, #16]
 800105a:	6853      	ldr	r3, [r2, #4]
 800105c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001060:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001064:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001066:	4a28      	ldr	r2, [pc, #160]	; (8001108 <HAL_RCC_ClockConfig+0x198>)
 8001068:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800106a:	f003 010c 	and.w	r1, r3, #12
 800106e:	2908      	cmp	r1, #8
 8001070:	d131      	bne.n	80010d6 <HAL_RCC_ClockConfig+0x166>
 8001072:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8001076:	fa91 f1a1 	rbit	r1, r1
 800107a:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800107c:	fab1 f181 	clz	r1, r1
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001080:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001082:	fa90 f0a0 	rbit	r0, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001086:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800108a:	40cb      	lsrs	r3, r1
 800108c:	491f      	ldr	r1, [pc, #124]	; (800110c <HAL_RCC_ClockConfig+0x19c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800108e:	4c20      	ldr	r4, [pc, #128]	; (8001110 <HAL_RCC_ClockConfig+0x1a0>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001090:	5ccb      	ldrb	r3, [r1, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001092:	4920      	ldr	r1, [pc, #128]	; (8001114 <HAL_RCC_ClockConfig+0x1a4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001094:	fab0 f080 	clz	r0, r0
 8001098:	f002 020f 	and.w	r2, r2, #15
 800109c:	40c2      	lsrs	r2, r0
 800109e:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80010a0:	fbb1 f1f2 	udiv	r1, r1, r2
 80010a4:	fb03 f101 	mul.w	r1, r3, r1
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_RCC_ClockConfig+0x198>)
 80010aa:	22f0      	movs	r2, #240	; 0xf0
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	fa92 f2a2 	rbit	r2, r2
 80010b2:	fab2 f282 	clz	r2, r2
 80010b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010ba:	40d3      	lsrs	r3, r2
 80010bc:	4a16      	ldr	r2, [pc, #88]	; (8001118 <HAL_RCC_ClockConfig+0x1a8>)
  HAL_InitTick (uwTickPrio);
 80010be:	4817      	ldr	r0, [pc, #92]	; (800111c <HAL_RCC_ClockConfig+0x1ac>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <HAL_RCC_ClockConfig+0x1b0>)
  HAL_InitTick (uwTickPrio);
 80010c4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80010c6:	fa21 f303 	lsr.w	r3, r1, r3
 80010ca:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80010cc:	f7ff fa82 	bl	80005d4 <HAL_InitTick>
  return HAL_OK;
 80010d0:	2000      	movs	r0, #0
}
 80010d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 80010d6:	490f      	ldr	r1, [pc, #60]	; (8001114 <HAL_RCC_ClockConfig+0x1a4>)
 80010d8:	e7e6      	b.n	80010a8 <HAL_RCC_ClockConfig+0x138>
 80010da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010de:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e2:	4909      	ldr	r1, [pc, #36]	; (8001108 <HAL_RCC_ClockConfig+0x198>)
 80010e4:	6809      	ldr	r1, [r1, #0]
 80010e6:	fa93 f3a3 	rbit	r3, r3
 80010ea:	fab3 f383 	clz	r3, r3
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	420b      	tst	r3, r1
 80010f8:	f47f af75 	bne.w	8000fe6 <HAL_RCC_ClockConfig+0x76>
 80010fc:	e79c      	b.n	8001038 <HAL_RCC_ClockConfig+0xc8>
        return HAL_TIMEOUT;
 80010fe:	2003      	movs	r0, #3
 8001100:	e79b      	b.n	800103a <HAL_RCC_ClockConfig+0xca>
 8001102:	bf00      	nop
 8001104:	40022000 	.word	0x40022000
 8001108:	40021000 	.word	0x40021000
 800110c:	08004818 	.word	0x08004818
 8001110:	08004828 	.word	0x08004828
 8001114:	007a1200 	.word	0x007a1200
 8001118:	08004800 	.word	0x08004800
 800111c:	20000008 	.word	0x20000008
 8001120:	20000000 	.word	0x20000000

08001124 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001124:	4a12      	ldr	r2, [pc, #72]	; (8001170 <HAL_RCC_GetSysClockFreq+0x4c>)
 8001126:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001128:	f003 010c 	and.w	r1, r3, #12
 800112c:	2908      	cmp	r1, #8
 800112e:	d001      	beq.n	8001134 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8001130:	4810      	ldr	r0, [pc, #64]	; (8001174 <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001132:	4770      	bx	lr
{
 8001134:	b430      	push	{r4, r5}
 8001136:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 800113a:	fa90 f0a0 	rbit	r0, r0
 800113e:	210f      	movs	r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001140:	fab0 f080 	clz	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001144:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001146:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800114a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800114e:	40c3      	lsrs	r3, r0
 8001150:	4809      	ldr	r0, [pc, #36]	; (8001178 <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001152:	4d0a      	ldr	r5, [pc, #40]	; (800117c <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001154:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001156:	4c07      	ldr	r4, [pc, #28]	; (8001174 <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001158:	fab1 f181 	clz	r1, r1
 800115c:	f002 030f 	and.w	r3, r2, #15
 8001160:	40cb      	lsrs	r3, r1
 8001162:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001164:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001168:	bc30      	pop	{r4, r5}
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800116a:	fb00 f003 	mul.w	r0, r0, r3
}
 800116e:	4770      	bx	lr
 8001170:	40021000 	.word	0x40021000
 8001174:	007a1200 	.word	0x007a1200
 8001178:	08004818 	.word	0x08004818
 800117c:	08004828 	.word	0x08004828

08001180 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001182:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	fa92 f2a2 	rbit	r2, r2
 800118c:	fab2 f282 	clz	r2, r2
 8001190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001194:	40d3      	lsrs	r3, r2
 8001196:	4904      	ldr	r1, [pc, #16]	; (80011a8 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800119a:	5ccb      	ldrb	r3, [r1, r3]
 800119c:	6810      	ldr	r0, [r2, #0]
}    
 800119e:	40d8      	lsrs	r0, r3
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40021000 	.word	0x40021000
 80011a8:	08004810 	.word	0x08004810
 80011ac:	20000000 	.word	0x20000000

080011b0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011b2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	fa92 f2a2 	rbit	r2, r2
 80011bc:	fab2 f282 	clz	r2, r2
 80011c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80011c4:	40d3      	lsrs	r3, r2
 80011c6:	4904      	ldr	r1, [pc, #16]	; (80011d8 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 80011c8:	4a04      	ldr	r2, [pc, #16]	; (80011dc <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80011ca:	5ccb      	ldrb	r3, [r1, r3]
 80011cc:	6810      	ldr	r0, [r2, #0]
} 
 80011ce:	40d8      	lsrs	r0, r3
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	08004810 	.word	0x08004810
 80011dc:	20000000 	.word	0x20000000

080011e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80011e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011e4:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80011e6:	6800      	ldr	r0, [r0, #0]
 80011e8:	03c6      	lsls	r6, r0, #15
{
 80011ea:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80011ec:	d53e      	bpl.n	800126c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ee:	4ba0      	ldr	r3, [pc, #640]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80011f0:	69da      	ldr	r2, [r3, #28]
 80011f2:	00d5      	lsls	r5, r2, #3
 80011f4:	f140 80f3 	bpl.w	80013de <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f8:	4d9e      	ldr	r5, [pc, #632]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80011fa:	682a      	ldr	r2, [r5, #0]
 80011fc:	05d0      	lsls	r0, r2, #23
    FlagStatus       pwrclkchanged = RESET;
 80011fe:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001202:	f140 80fc 	bpl.w	80013fe <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001206:	4d9a      	ldr	r5, [pc, #616]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001208:	6861      	ldr	r1, [r4, #4]
 800120a:	6a2a      	ldr	r2, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800120c:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8001210:	d020      	beq.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001212:	f401 7340 	and.w	r3, r1, #768	; 0x300
 8001216:	4293      	cmp	r3, r2
 8001218:	d01c      	beq.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800121a:	6a29      	ldr	r1, [r5, #32]
 800121c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001220:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001224:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001228:	4f93      	ldr	r7, [pc, #588]	; (8001478 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800122a:	fab2 f282 	clz	r2, r2
 800122e:	443a      	add	r2, r7
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	f04f 0c01 	mov.w	ip, #1
 8001236:	f8c2 c000 	str.w	ip, [r2]
 800123a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800123e:	fab3 f383 	clz	r3, r3
 8001242:	443b      	add	r3, r7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800124a:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 800124c:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800124e:	f100 80ea 	bmi.w	8001426 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8001252:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001254:	4a86      	ldr	r2, [pc, #536]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001256:	6a13      	ldr	r3, [r2, #32]
 8001258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800125c:	430b      	orrs	r3, r1
 800125e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001260:	b11e      	cbz	r6, 800126a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001262:	69d3      	ldr	r3, [r2, #28]
 8001264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800126c:	07c3      	lsls	r3, r0, #31
 800126e:	d506      	bpl.n	800127e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001270:	4a7f      	ldr	r2, [pc, #508]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001272:	68a1      	ldr	r1, [r4, #8]
 8001274:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001276:	f023 0303 	bic.w	r3, r3, #3
 800127a:	430b      	orrs	r3, r1
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800127e:	0787      	lsls	r7, r0, #30
 8001280:	d506      	bpl.n	8001290 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001282:	4a7b      	ldr	r2, [pc, #492]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001284:	68e1      	ldr	r1, [r4, #12]
 8001286:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001288:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800128c:	430b      	orrs	r3, r1
 800128e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001290:	0746      	lsls	r6, r0, #29
 8001292:	d506      	bpl.n	80012a2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001294:	4a76      	ldr	r2, [pc, #472]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001296:	6921      	ldr	r1, [r4, #16]
 8001298:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800129a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800129e:	430b      	orrs	r3, r1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80012a2:	0685      	lsls	r5, r0, #26
 80012a4:	d506      	bpl.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80012a6:	4a72      	ldr	r2, [pc, #456]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80012a8:	69e1      	ldr	r1, [r4, #28]
 80012aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012ac:	f023 0310 	bic.w	r3, r3, #16
 80012b0:	430b      	orrs	r3, r1
 80012b2:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80012b4:	0381      	lsls	r1, r0, #14
 80012b6:	d506      	bpl.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80012b8:	4a6d      	ldr	r2, [pc, #436]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80012ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80012bc:	6853      	ldr	r3, [r2, #4]
 80012be:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80012c2:	430b      	orrs	r3, r1
 80012c4:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80012c6:	0642      	lsls	r2, r0, #25
 80012c8:	d506      	bpl.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80012ca:	4a69      	ldr	r2, [pc, #420]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80012cc:	6a21      	ldr	r1, [r4, #32]
 80012ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012d0:	f023 0320 	bic.w	r3, r3, #32
 80012d4:	430b      	orrs	r3, r1
 80012d6:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80012d8:	0343      	lsls	r3, r0, #13
 80012da:	d506      	bpl.n	80012ea <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80012dc:	4a64      	ldr	r2, [pc, #400]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80012de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80012e0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012e6:	430b      	orrs	r3, r1
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80012ea:	0707      	lsls	r7, r0, #28
 80012ec:	d506      	bpl.n	80012fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80012ee:	4a60      	ldr	r2, [pc, #384]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80012f0:	6961      	ldr	r1, [r4, #20]
 80012f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80012f8:	430b      	orrs	r3, r1
 80012fa:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80012fc:	06c6      	lsls	r6, r0, #27
 80012fe:	d506      	bpl.n	800130e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001300:	4a5b      	ldr	r2, [pc, #364]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001302:	69a1      	ldr	r1, [r4, #24]
 8001304:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001306:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800130a:	430b      	orrs	r3, r1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800130e:	0585      	lsls	r5, r0, #22
 8001310:	d506      	bpl.n	8001320 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001312:	4a57      	ldr	r2, [pc, #348]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001314:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001316:	6853      	ldr	r3, [r2, #4]
 8001318:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800131c:	430b      	orrs	r3, r1
 800131e:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001320:	0601      	lsls	r1, r0, #24
 8001322:	d506      	bpl.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001324:	4a52      	ldr	r2, [pc, #328]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001326:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001328:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800132a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800132e:	430b      	orrs	r3, r1
 8001330:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001332:	05c2      	lsls	r2, r0, #23
 8001334:	d506      	bpl.n	8001344 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001336:	4a4e      	ldr	r2, [pc, #312]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001338:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800133a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800133c:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001340:	430b      	orrs	r3, r1
 8001342:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001344:	04c3      	lsls	r3, r0, #19
 8001346:	d506      	bpl.n	8001356 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001348:	4a49      	ldr	r2, [pc, #292]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800134a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800134c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800134e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001352:	430b      	orrs	r3, r1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001356:	0487      	lsls	r7, r0, #18
 8001358:	d506      	bpl.n	8001368 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800135a:	4a45      	ldr	r2, [pc, #276]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800135c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800135e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001364:	430b      	orrs	r3, r1
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001368:	02c6      	lsls	r6, r0, #11
 800136a:	d506      	bpl.n	800137a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800136c:	4a40      	ldr	r2, [pc, #256]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800136e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001370:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001376:	430b      	orrs	r3, r1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800137a:	0285      	lsls	r5, r0, #10
 800137c:	d506      	bpl.n	800138c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800137e:	4a3c      	ldr	r2, [pc, #240]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001380:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001382:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001384:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001388:	430b      	orrs	r3, r1
 800138a:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800138c:	0241      	lsls	r1, r0, #9
 800138e:	d506      	bpl.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001390:	4a37      	ldr	r2, [pc, #220]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001392:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001394:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800139a:	430b      	orrs	r3, r1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800139e:	0202      	lsls	r2, r0, #8
 80013a0:	d506      	bpl.n	80013b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80013a2:	4a33      	ldr	r2, [pc, #204]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80013a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80013a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013ac:	430b      	orrs	r3, r1
 80013ae:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80013b0:	01c3      	lsls	r3, r0, #7
 80013b2:	d506      	bpl.n	80013c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80013b4:	4a2e      	ldr	r2, [pc, #184]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80013b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80013b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013be:	430b      	orrs	r3, r1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80013c2:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80013c6:	d007      	beq.n	80013d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80013c8:	4a29      	ldr	r2, [pc, #164]	; (8001470 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80013ca:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80013cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80013ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80013d2:	430b      	orrs	r3, r1
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80013d6:	2000      	movs	r0, #0
}
 80013d8:	b003      	add	sp, #12
 80013da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e0:	4d24      	ldr	r5, [pc, #144]	; (8001474 <HAL_RCCEx_PeriphCLKConfig+0x294>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013e6:	61da      	str	r2, [r3, #28]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f2:	682a      	ldr	r2, [r5, #0]
 80013f4:	05d0      	lsls	r0, r2, #23
      pwrclkchanged = SET;
 80013f6:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fa:	f53f af04 	bmi.w	8001206 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013fe:	682a      	ldr	r2, [r5, #0]
 8001400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001404:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8001406:	f7ff f927 	bl	8000658 <HAL_GetTick>
 800140a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	682b      	ldr	r3, [r5, #0]
 800140e:	05d9      	lsls	r1, r3, #23
 8001410:	f53f aef9 	bmi.w	8001206 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001414:	f7ff f920 	bl	8000658 <HAL_GetTick>
 8001418:	1bc0      	subs	r0, r0, r7
 800141a:	2864      	cmp	r0, #100	; 0x64
 800141c:	d9f6      	bls.n	800140c <HAL_RCCEx_PeriphCLKConfig+0x22c>
          return HAL_TIMEOUT;
 800141e:	2003      	movs	r0, #3
}
 8001420:	b003      	add	sp, #12
 8001422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001426:	4667      	mov	r7, ip
        tickstart = HAL_GetTick();
 8001428:	f7ff f916 	bl	8000658 <HAL_GetTick>
 800142c:	f04f 0902 	mov.w	r9, #2
 8001430:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001432:	e015      	b.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8001434:	fa99 f3a9 	rbit	r3, r9
 8001438:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800143a:	fa99 f3a9 	rbit	r3, r9
 800143e:	fab3 f383 	clz	r3, r3
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	fa07 f303 	lsl.w	r3, r7, r3
 800144a:	4213      	tst	r3, r2
 800144c:	f47f af01 	bne.w	8001252 <HAL_RCCEx_PeriphCLKConfig+0x72>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001450:	f7ff f902 	bl	8000658 <HAL_GetTick>
 8001454:	f241 3388 	movw	r3, #5000	; 0x1388
 8001458:	eba0 0008 	sub.w	r0, r0, r8
 800145c:	4298      	cmp	r0, r3
 800145e:	d8de      	bhi.n	800141e <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8001460:	fa99 f3a9 	rbit	r3, r9
 8001464:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0e3      	beq.n	8001434 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800146c:	6a2a      	ldr	r2, [r5, #32]
 800146e:	e7e4      	b.n	800143a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8001470:	40021000 	.word	0x40021000
 8001474:	40007000 	.word	0x40007000
 8001478:	10908100 	.word	0x10908100

0800147c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800147c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800147e:	07da      	lsls	r2, r3, #31
{
 8001480:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001482:	d506      	bpl.n	8001492 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001484:	6801      	ldr	r1, [r0, #0]
 8001486:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001488:	684a      	ldr	r2, [r1, #4]
 800148a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800148e:	4322      	orrs	r2, r4
 8001490:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001492:	079c      	lsls	r4, r3, #30
 8001494:	d506      	bpl.n	80014a4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001496:	6801      	ldr	r1, [r0, #0]
 8001498:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800149a:	684a      	ldr	r2, [r1, #4]
 800149c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014a0:	4322      	orrs	r2, r4
 80014a2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80014a4:	0759      	lsls	r1, r3, #29
 80014a6:	d506      	bpl.n	80014b6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80014a8:	6801      	ldr	r1, [r0, #0]
 80014aa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80014ac:	684a      	ldr	r2, [r1, #4]
 80014ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014b2:	4322      	orrs	r2, r4
 80014b4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80014b6:	071a      	lsls	r2, r3, #28
 80014b8:	d506      	bpl.n	80014c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80014ba:	6801      	ldr	r1, [r0, #0]
 80014bc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80014be:	684a      	ldr	r2, [r1, #4]
 80014c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014c4:	4322      	orrs	r2, r4
 80014c6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80014c8:	06dc      	lsls	r4, r3, #27
 80014ca:	d506      	bpl.n	80014da <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80014cc:	6801      	ldr	r1, [r0, #0]
 80014ce:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80014d0:	688a      	ldr	r2, [r1, #8]
 80014d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014d6:	4322      	orrs	r2, r4
 80014d8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80014da:	0699      	lsls	r1, r3, #26
 80014dc:	d506      	bpl.n	80014ec <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80014de:	6801      	ldr	r1, [r0, #0]
 80014e0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80014e2:	688a      	ldr	r2, [r1, #8]
 80014e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014e8:	4322      	orrs	r2, r4
 80014ea:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80014ec:	065a      	lsls	r2, r3, #25
 80014ee:	d509      	bpl.n	8001504 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80014f0:	6801      	ldr	r1, [r0, #0]
 80014f2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80014f4:	684a      	ldr	r2, [r1, #4]
 80014f6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80014fa:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80014fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001500:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001502:	d00b      	beq.n	800151c <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001504:	061b      	lsls	r3, r3, #24
 8001506:	d506      	bpl.n	8001516 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001508:	6802      	ldr	r2, [r0, #0]
 800150a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800150c:	6853      	ldr	r3, [r2, #4]
 800150e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001512:	430b      	orrs	r3, r1
 8001514:	6053      	str	r3, [r2, #4]
  }
}
 8001516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800151a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800151c:	684a      	ldr	r2, [r1, #4]
 800151e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001520:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001524:	4322      	orrs	r2, r4
 8001526:	604a      	str	r2, [r1, #4]
 8001528:	e7ec      	b.n	8001504 <UART_AdvFeatureConfig+0x88>
 800152a:	bf00      	nop

0800152c <HAL_UART_Init>:
  if (huart == NULL)
 800152c:	2800      	cmp	r0, #0
 800152e:	d040      	beq.n	80015b2 <HAL_UART_Init+0x86>
{
 8001530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001532:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001534:	4604      	mov	r4, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d036      	beq.n	80015a8 <HAL_UART_Init+0x7c>
  __HAL_UART_DISABLE(huart);
 800153a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800153c:	6927      	ldr	r7, [r4, #16]
 800153e:	6966      	ldr	r6, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001540:	49af      	ldr	r1, [pc, #700]	; (8001800 <HAL_UART_Init+0x2d4>)
  huart->gState = HAL_UART_STATE_BUSY;
 8001542:	2224      	movs	r2, #36	; 0x24
 8001544:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001546:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001548:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800154a:	f020 0001 	bic.w	r0, r0, #1
 800154e:	6018      	str	r0, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001550:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001552:	69e0      	ldr	r0, [r4, #28]
 8001554:	433a      	orrs	r2, r7
 8001556:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001558:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800155a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001560:	6859      	ldr	r1, [r3, #4]
 8001562:	68e5      	ldr	r5, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001564:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8001566:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001568:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800156c:	4329      	orrs	r1, r5
 800156e:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001570:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001572:	4da4      	ldr	r5, [pc, #656]	; (8001804 <HAL_UART_Init+0x2d8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001574:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8001578:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800157a:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800157c:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800157e:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001580:	d019      	beq.n	80015b6 <HAL_UART_Init+0x8a>
 8001582:	4aa1      	ldr	r2, [pc, #644]	; (8001808 <HAL_UART_Init+0x2dc>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d037      	beq.n	80015f8 <HAL_UART_Init+0xcc>
 8001588:	4aa0      	ldr	r2, [pc, #640]	; (800180c <HAL_UART_Init+0x2e0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	f000 80e6 	beq.w	800175c <HAL_UART_Init+0x230>
 8001590:	4a9f      	ldr	r2, [pc, #636]	; (8001810 <HAL_UART_Init+0x2e4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d065      	beq.n	8001662 <HAL_UART_Init+0x136>
 8001596:	4a9f      	ldr	r2, [pc, #636]	; (8001814 <HAL_UART_Init+0x2e8>)
 8001598:	4293      	cmp	r3, r2
 800159a:	f000 8105 	beq.w	80017a8 <HAL_UART_Init+0x27c>
  huart->RxISR = NULL;
 800159e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80015a0:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
    return HAL_ERROR;
 80015a4:	2001      	movs	r0, #1
}
 80015a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 80015a8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80015ac:	f7fe ff94 	bl	80004d8 <HAL_UART_MspInit>
 80015b0:	e7c3      	b.n	800153a <HAL_UART_Init+0xe>
    return HAL_ERROR;
 80015b2:	2001      	movs	r0, #1
}
 80015b4:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015b6:	4b98      	ldr	r3, [pc, #608]	; (8001818 <HAL_UART_Init+0x2ec>)
 80015b8:	4a98      	ldr	r2, [pc, #608]	; (800181c <HAL_UART_Init+0x2f0>)
 80015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015bc:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80015c4:	5cd3      	ldrb	r3, [r2, r3]
 80015c6:	f000 812b 	beq.w	8001820 <HAL_UART_Init+0x2f4>
    switch (clocksource)
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d8e7      	bhi.n	800159e <HAL_UART_Init+0x72>
 80015ce:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <HAL_UART_Init+0xa8>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	08001797 	.word	0x08001797
 80015d8:	08001685 	.word	0x08001685
 80015dc:	080017cf 	.word	0x080017cf
 80015e0:	0800159f 	.word	0x0800159f
 80015e4:	080017bd 	.word	0x080017bd
 80015e8:	0800159f 	.word	0x0800159f
 80015ec:	0800159f 	.word	0x0800159f
 80015f0:	0800159f 	.word	0x0800159f
 80015f4:	0800177b 	.word	0x0800177b
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015f8:	4b87      	ldr	r3, [pc, #540]	; (8001818 <HAL_UART_Init+0x2ec>)
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001604:	f000 80d7 	beq.w	80017b6 <HAL_UART_Init+0x28a>
 8001608:	f240 80bf 	bls.w	800178a <HAL_UART_Init+0x25e>
 800160c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001610:	f000 80af 	beq.w	8001772 <HAL_UART_Init+0x246>
 8001614:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001618:	d1c1      	bne.n	800159e <HAL_UART_Init+0x72>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800161a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800161e:	f040 80d6 	bne.w	80017ce <HAL_UART_Init+0x2a2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001622:	6862      	ldr	r2, [r4, #4]
 8001624:	0853      	lsrs	r3, r2, #1
 8001626:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800162a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800162e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001632:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001634:	f1a3 0110 	sub.w	r1, r3, #16
 8001638:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800163c:	4291      	cmp	r1, r2
 800163e:	d8ae      	bhi.n	800159e <HAL_UART_Init+0x72>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001640:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001644:	f3c3 0242 	ubfx	r2, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001648:	6823      	ldr	r3, [r4, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	60da      	str	r2, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800164e:	6a62      	ldr	r2, [r4, #36]	; 0x24
  huart->RxISR = NULL;
 8001650:	2100      	movs	r1, #0
  huart->TxISR = NULL;
 8001652:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001656:	b362      	cbz	r2, 80016b2 <HAL_UART_Init+0x186>
    UART_AdvFeatureConfig(huart);
 8001658:	4620      	mov	r0, r4
 800165a:	f7ff ff0f 	bl	800147c <UART_AdvFeatureConfig>
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	e027      	b.n	80016b2 <HAL_UART_Init+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001662:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <HAL_UART_Init+0x2ec>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800166a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800166e:	f000 80a2 	beq.w	80017b6 <HAL_UART_Init+0x28a>
 8001672:	f240 808a 	bls.w	800178a <HAL_UART_Init+0x25e>
 8001676:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800167a:	d07a      	beq.n	8001772 <HAL_UART_Init+0x246>
 800167c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001680:	d0cb      	beq.n	800161a <HAL_UART_Init+0xee>
 8001682:	e78c      	b.n	800159e <HAL_UART_Init+0x72>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001684:	f7ff fd94 	bl	80011b0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001688:	6863      	ldr	r3, [r4, #4]
 800168a:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800168e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001692:	b292      	uxth	r2, r2
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001694:	f1a2 0110 	sub.w	r1, r2, #16
 8001698:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800169c:	4299      	cmp	r1, r3
 800169e:	f63f af7e 	bhi.w	800159e <HAL_UART_Init+0x72>
      huart->Instance->BRR = usartdiv;
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	60da      	str	r2, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80016a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
  huart->RxISR = NULL;
 80016a8:	2100      	movs	r1, #0
  huart->TxISR = NULL;
 80016aa:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	d1d2      	bne.n	8001658 <HAL_UART_Init+0x12c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016c0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80016c2:	681a      	ldr	r2, [r3, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016c4:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016cc:	67e1      	str	r1, [r4, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80016ce:	f7fe ffc3 	bl	8000658 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80016d8:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80016da:	d409      	bmi.n	80016f0 <HAL_UART_Init+0x1c4>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	0750      	lsls	r0, r2, #29
 80016e0:	d42a      	bmi.n	8001738 <HAL_UART_Init+0x20c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80016e2:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);
 80016e4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80016e6:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 80016e8:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80016ec:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80016ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016f0:	69dd      	ldr	r5, [r3, #28]
 80016f2:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 80016f6:	d1f1      	bne.n	80016dc <HAL_UART_Init+0x1b0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016f8:	f7fe ffae 	bl	8000658 <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80016fc:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016fe:	1b80      	subs	r0, r0, r6
 8001700:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001704:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001706:	d26c      	bcs.n	80017e2 <HAL_UART_Init+0x2b6>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001708:	0752      	lsls	r2, r2, #29
 800170a:	d5f1      	bpl.n	80016f0 <HAL_UART_Init+0x1c4>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800170c:	69da      	ldr	r2, [r3, #28]
 800170e:	0517      	lsls	r7, r2, #20
 8001710:	d5ee      	bpl.n	80016f0 <HAL_UART_Init+0x1c4>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001716:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800171e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001720:	6899      	ldr	r1, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001722:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001724:	f021 0101 	bic.w	r1, r1, #1
 8001728:	6099      	str	r1, [r3, #8]
      return HAL_TIMEOUT;
 800172a:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 800172c:	6762      	str	r2, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800172e:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 8001732:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001734:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 8001736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001738:	69dd      	ldr	r5, [r3, #28]
 800173a:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 800173e:	d1d0      	bne.n	80016e2 <HAL_UART_Init+0x1b6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001740:	f7fe ff8a 	bl	8000658 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001744:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001746:	1b80      	subs	r0, r0, r6
 8001748:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800174c:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800174e:	d248      	bcs.n	80017e2 <HAL_UART_Init+0x2b6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001750:	0751      	lsls	r1, r2, #29
 8001752:	d5f1      	bpl.n	8001738 <HAL_UART_Init+0x20c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001754:	69da      	ldr	r2, [r3, #28]
 8001756:	0512      	lsls	r2, r2, #20
 8001758:	d5ee      	bpl.n	8001738 <HAL_UART_Init+0x20c>
 800175a:	e7da      	b.n	8001712 <HAL_UART_Init+0x1e6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800175c:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <HAL_UART_Init+0x2ec>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001764:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001768:	d025      	beq.n	80017b6 <HAL_UART_Init+0x28a>
 800176a:	d90e      	bls.n	800178a <HAL_UART_Init+0x25e>
 800176c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001770:	d177      	bne.n	8001862 <HAL_UART_Init+0x336>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001772:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001776:	f000 8086 	beq.w	8001886 <HAL_UART_Init+0x35a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800177a:	6863      	ldr	r3, [r4, #4]
 800177c:	085a      	lsrs	r2, r3, #1
 800177e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8001782:	fbb2 f2f3 	udiv	r2, r2, r3
 8001786:	b292      	uxth	r2, r2
 8001788:	e784      	b.n	8001694 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800178a:	2b00      	cmp	r3, #0
 800178c:	f47f af07 	bne.w	800159e <HAL_UART_Init+0x72>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001790:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001794:	d07f      	beq.n	8001896 <HAL_UART_Init+0x36a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001796:	f7ff fcf3 	bl	8001180 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800179a:	6863      	ldr	r3, [r4, #4]
 800179c:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80017a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80017a4:	b292      	uxth	r2, r2
 80017a6:	e775      	b.n	8001694 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_UART_Init+0x2ec>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80017b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017b4:	d14c      	bne.n	8001850 <HAL_UART_Init+0x324>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80017b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80017ba:	d057      	beq.n	800186c <HAL_UART_Init+0x340>
        pclk = HAL_RCC_GetSysClockFreq();
 80017bc:	f7ff fcb2 	bl	8001124 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80017c0:	6863      	ldr	r3, [r4, #4]
 80017c2:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80017c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80017ca:	b292      	uxth	r2, r2
 80017cc:	e762      	b.n	8001694 <HAL_UART_Init+0x168>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80017ce:	6863      	ldr	r3, [r4, #4]
 80017d0:	085a      	lsrs	r2, r3, #1
 80017d2:	f502 02f4 	add.w	r2, r2, #7995392	; 0x7a0000
 80017d6:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
 80017da:	fbb2 f2f3 	udiv	r2, r2, r3
 80017de:	b292      	uxth	r2, r2
 80017e0:	e758      	b.n	8001694 <HAL_UART_Init+0x168>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017e2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80017e6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017e8:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80017ea:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 80017f2:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80017f4:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 80017f6:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80017fa:	67a1      	str	r1, [r4, #120]	; 0x78
}
 80017fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017fe:	bf00      	nop
 8001800:	efff69f3 	.word	0xefff69f3
 8001804:	40013800 	.word	0x40013800
 8001808:	40004400 	.word	0x40004400
 800180c:	40004800 	.word	0x40004800
 8001810:	40004c00 	.word	0x40004c00
 8001814:	40005000 	.word	0x40005000
 8001818:	40021000 	.word	0x40021000
 800181c:	08004838 	.word	0x08004838
    switch (clocksource)
 8001820:	2b08      	cmp	r3, #8
 8001822:	f63f aebc 	bhi.w	800159e <HAL_UART_Init+0x72>
 8001826:	a201      	add	r2, pc, #4	; (adr r2, 800182c <HAL_UART_Init+0x300>)
 8001828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182c:	08001897 	.word	0x08001897
 8001830:	08001881 	.word	0x08001881
 8001834:	08001623 	.word	0x08001623
 8001838:	0800159f 	.word	0x0800159f
 800183c:	0800186d 	.word	0x0800186d
 8001840:	0800159f 	.word	0x0800159f
 8001844:	0800159f 	.word	0x0800159f
 8001848:	0800159f 	.word	0x0800159f
 800184c:	08001887 	.word	0x08001887
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001850:	d99b      	bls.n	800178a <HAL_UART_Init+0x25e>
 8001852:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001856:	d08c      	beq.n	8001772 <HAL_UART_Init+0x246>
 8001858:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800185c:	f43f aedd 	beq.w	800161a <HAL_UART_Init+0xee>
 8001860:	e69d      	b.n	800159e <HAL_UART_Init+0x72>
 8001862:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001866:	f43f aed8 	beq.w	800161a <HAL_UART_Init+0xee>
 800186a:	e698      	b.n	800159e <HAL_UART_Init+0x72>
        pclk = HAL_RCC_GetSysClockFreq();
 800186c:	f7ff fc5a 	bl	8001124 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001870:	6862      	ldr	r2, [r4, #4]
 8001872:	0853      	lsrs	r3, r2, #1
 8001874:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001878:	fbb3 f3f2 	udiv	r3, r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	e6d9      	b.n	8001634 <HAL_UART_Init+0x108>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001880:	f7ff fc96 	bl	80011b0 <HAL_RCC_GetPCLK2Freq>
 8001884:	e7f4      	b.n	8001870 <HAL_UART_Init+0x344>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001886:	6862      	ldr	r2, [r4, #4]
 8001888:	0853      	lsrs	r3, r2, #1
 800188a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800188e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001892:	b29b      	uxth	r3, r3
 8001894:	e6ce      	b.n	8001634 <HAL_UART_Init+0x108>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001896:	f7ff fc73 	bl	8001180 <HAL_RCC_GetPCLK1Freq>
 800189a:	e7e9      	b.n	8001870 <HAL_UART_Init+0x344>

0800189c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800189c:	b430      	push	{r4, r5}
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800189e:	7a04      	ldrb	r4, [r0, #8]
 80018a0:	e9d0 3500 	ldrd	r3, r5, [r0]
 80018a4:	2c00      	cmp	r4, #0
 80018a6:	d033      	beq.n	8001910 <LL_EXTI_Init+0x74>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80018a8:	b1c3      	cbz	r3, 80018dc <LL_EXTI_Init+0x40>
    {
      switch (EXTI_InitStruct->Mode)
 80018aa:	7a42      	ldrb	r2, [r0, #9]
 80018ac:	2a01      	cmp	r2, #1
 80018ae:	d04b      	beq.n	8001948 <LL_EXTI_Init+0xac>
 80018b0:	d367      	bcc.n	8001982 <LL_EXTI_Init+0xe6>
 80018b2:	2a02      	cmp	r2, #2
 80018b4:	d163      	bne.n	800197e <LL_EXTI_Init+0xe2>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR, ExtiLine);
 80018b6:	4a4d      	ldr	r2, [pc, #308]	; (80019ec <LL_EXTI_Init+0x150>)
 80018b8:	6811      	ldr	r1, [r2, #0]
 80018ba:	4319      	orrs	r1, r3
 80018bc:	6011      	str	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->EMR, ExtiLine);
 80018be:	6851      	ldr	r1, [r2, #4]
 80018c0:	4319      	orrs	r1, r3
 80018c2:	6051      	str	r1, [r2, #4]
 80018c4:	2100      	movs	r1, #0
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80018c6:	7a82      	ldrb	r2, [r0, #10]
 80018c8:	2a00      	cmp	r2, #0
 80018ca:	d049      	beq.n	8001960 <LL_EXTI_Init+0xc4>
      {
        switch (EXTI_InitStruct->Trigger)
 80018cc:	2a02      	cmp	r2, #2
 80018ce:	f000 8088 	beq.w	80019e2 <LL_EXTI_Init+0x146>
 80018d2:	2a03      	cmp	r2, #3
 80018d4:	d03d      	beq.n	8001952 <LL_EXTI_Init+0xb6>
 80018d6:	2a01      	cmp	r2, #1
 80018d8:	d066      	beq.n	80019a8 <LL_EXTI_Init+0x10c>
 80018da:	2301      	movs	r3, #1
        }
      }
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80018dc:	b1ad      	cbz	r5, 800190a <LL_EXTI_Init+0x6e>
    {
      switch (EXTI_InitStruct->Mode)
 80018de:	7a42      	ldrb	r2, [r0, #9]
 80018e0:	2a01      	cmp	r2, #1
 80018e2:	d041      	beq.n	8001968 <LL_EXTI_Init+0xcc>
 80018e4:	d327      	bcc.n	8001936 <LL_EXTI_Init+0x9a>
 80018e6:	2a02      	cmp	r2, #2
 80018e8:	d147      	bne.n	800197a <LL_EXTI_Init+0xde>
  SET_BIT(EXTI->IMR2, ExtiLine);
 80018ea:	4a40      	ldr	r2, [pc, #256]	; (80019ec <LL_EXTI_Init+0x150>)
 80018ec:	6a11      	ldr	r1, [r2, #32]
 80018ee:	4329      	orrs	r1, r5
 80018f0:	6211      	str	r1, [r2, #32]
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->EMR2, ExtiLine);
 80018f2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80018f4:	4329      	orrs	r1, r5
 80018f6:	6251      	str	r1, [r2, #36]	; 0x24
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80018f8:	7a82      	ldrb	r2, [r0, #10]
 80018fa:	b132      	cbz	r2, 800190a <LL_EXTI_Init+0x6e>
      {
        switch (EXTI_InitStruct->Trigger)
 80018fc:	2a02      	cmp	r2, #2
 80018fe:	d067      	beq.n	80019d0 <LL_EXTI_Init+0x134>
 8001900:	2a03      	cmp	r2, #3
 8001902:	d05d      	beq.n	80019c0 <LL_EXTI_Init+0x124>
 8001904:	2a01      	cmp	r2, #1
 8001906:	d046      	beq.n	8001996 <LL_EXTI_Init+0xfa>
 8001908:	2301      	movs	r3, #1
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
#endif
  }
  return status;
}
 800190a:	4618      	mov	r0, r3
 800190c:	bc30      	pop	{r4, r5}
 800190e:	4770      	bx	lr
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001910:	4a36      	ldr	r2, [pc, #216]	; (80019ec <LL_EXTI_Init+0x150>)
 8001912:	6811      	ldr	r1, [r2, #0]
 8001914:	43db      	mvns	r3, r3
 8001916:	4019      	ands	r1, r3
 8001918:	6011      	str	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800191a:	6850      	ldr	r0, [r2, #4]
 800191c:	4018      	ands	r0, r3
 800191e:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001920:	6a11      	ldr	r1, [r2, #32]
 8001922:	43eb      	mvns	r3, r5
 8001924:	4019      	ands	r1, r3
 8001926:	6211      	str	r1, [r2, #32]
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001928:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800192a:	4019      	ands	r1, r3
 800192c:	4623      	mov	r3, r4
 800192e:	4618      	mov	r0, r3
 8001930:	6251      	str	r1, [r2, #36]	; 0x24
 8001932:	bc30      	pop	{r4, r5}
 8001934:	4770      	bx	lr
 8001936:	4a2d      	ldr	r2, [pc, #180]	; (80019ec <LL_EXTI_Init+0x150>)
 8001938:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800193a:	ea21 0105 	bic.w	r1, r1, r5
 800193e:	6251      	str	r1, [r2, #36]	; 0x24
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001940:	6a11      	ldr	r1, [r2, #32]
 8001942:	4329      	orrs	r1, r5
 8001944:	6211      	str	r1, [r2, #32]
 8001946:	e7d7      	b.n	80018f8 <LL_EXTI_Init+0x5c>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001948:	4a28      	ldr	r2, [pc, #160]	; (80019ec <LL_EXTI_Init+0x150>)
 800194a:	6811      	ldr	r1, [r2, #0]
 800194c:	ea21 0103 	bic.w	r1, r1, r3
 8001950:	e7b4      	b.n	80018bc <LL_EXTI_Init+0x20>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001952:	4a26      	ldr	r2, [pc, #152]	; (80019ec <LL_EXTI_Init+0x150>)
 8001954:	6894      	ldr	r4, [r2, #8]
 8001956:	431c      	orrs	r4, r3
 8001958:	6094      	str	r4, [r2, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR, ExtiLine);
 800195a:	68d4      	ldr	r4, [r2, #12]
 800195c:	4323      	orrs	r3, r4
 800195e:	60d3      	str	r3, [r2, #12]
 8001960:	460b      	mov	r3, r1
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001962:	2d00      	cmp	r5, #0
 8001964:	d1bb      	bne.n	80018de <LL_EXTI_Init+0x42>
 8001966:	e7d0      	b.n	800190a <LL_EXTI_Init+0x6e>
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001968:	4a20      	ldr	r2, [pc, #128]	; (80019ec <LL_EXTI_Init+0x150>)
 800196a:	6a11      	ldr	r1, [r2, #32]
 800196c:	ea21 0105 	bic.w	r1, r1, r5
 8001970:	6211      	str	r1, [r2, #32]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001972:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001974:	4329      	orrs	r1, r5
 8001976:	6251      	str	r1, [r2, #36]	; 0x24
 8001978:	e7be      	b.n	80018f8 <LL_EXTI_Init+0x5c>
      switch (EXTI_InitStruct->Mode)
 800197a:	2301      	movs	r3, #1
 800197c:	e7bc      	b.n	80018f8 <LL_EXTI_Init+0x5c>
      switch (EXTI_InitStruct->Mode)
 800197e:	2101      	movs	r1, #1
 8001980:	e7a1      	b.n	80018c6 <LL_EXTI_Init+0x2a>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001982:	4a1a      	ldr	r2, [pc, #104]	; (80019ec <LL_EXTI_Init+0x150>)
 8001984:	6851      	ldr	r1, [r2, #4]
 8001986:	ea21 0103 	bic.w	r1, r1, r3
 800198a:	6051      	str	r1, [r2, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800198c:	6811      	ldr	r1, [r2, #0]
 800198e:	4319      	orrs	r1, r3
 8001990:	6011      	str	r1, [r2, #0]
 8001992:	2100      	movs	r1, #0
 8001994:	e797      	b.n	80018c6 <LL_EXTI_Init+0x2a>
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001996:	4a15      	ldr	r2, [pc, #84]	; (80019ec <LL_EXTI_Init+0x150>)
 8001998:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800199a:	ea21 0105 	bic.w	r1, r1, r5
 800199e:	62d1      	str	r1, [r2, #44]	; 0x2c
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80019a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80019a2:	430d      	orrs	r5, r1
 80019a4:	6295      	str	r5, [r2, #40]	; 0x28
 80019a6:	e7b0      	b.n	800190a <LL_EXTI_Init+0x6e>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80019a8:	4a10      	ldr	r2, [pc, #64]	; (80019ec <LL_EXTI_Init+0x150>)
 80019aa:	68d4      	ldr	r4, [r2, #12]
 80019ac:	ea24 0403 	bic.w	r4, r4, r3
 80019b0:	60d4      	str	r4, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80019b2:	6894      	ldr	r4, [r2, #8]
 80019b4:	4323      	orrs	r3, r4
 80019b6:	6093      	str	r3, [r2, #8]
 80019b8:	460b      	mov	r3, r1
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80019ba:	2d00      	cmp	r5, #0
 80019bc:	d18f      	bne.n	80018de <LL_EXTI_Init+0x42>
 80019be:	e7a4      	b.n	800190a <LL_EXTI_Init+0x6e>
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <LL_EXTI_Init+0x150>)
 80019c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80019c4:	4329      	orrs	r1, r5
 80019c6:	6291      	str	r1, [r2, #40]	; 0x28
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80019c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019ca:	430d      	orrs	r5, r1
 80019cc:	62d5      	str	r5, [r2, #44]	; 0x2c
 80019ce:	e79c      	b.n	800190a <LL_EXTI_Init+0x6e>
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80019d0:	4a06      	ldr	r2, [pc, #24]	; (80019ec <LL_EXTI_Init+0x150>)
 80019d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80019d4:	ea21 0105 	bic.w	r1, r1, r5
 80019d8:	6291      	str	r1, [r2, #40]	; 0x28
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80019da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019dc:	430d      	orrs	r5, r1
 80019de:	62d5      	str	r5, [r2, #44]	; 0x2c
 80019e0:	e793      	b.n	800190a <LL_EXTI_Init+0x6e>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80019e2:	4a02      	ldr	r2, [pc, #8]	; (80019ec <LL_EXTI_Init+0x150>)
 80019e4:	6894      	ldr	r4, [r2, #8]
 80019e6:	ea24 0403 	bic.w	r4, r4, r3
 80019ea:	e7b5      	b.n	8001958 <LL_EXTI_Init+0xbc>
 80019ec:	40010400 	.word	0x40010400

080019f0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80019f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80019f4:	680c      	ldr	r4, [r1, #0]
 80019f6:	fa94 f2a4 	rbit	r2, r4
 80019fa:	684e      	ldr	r6, [r1, #4]
 80019fc:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001a00:	fa34 f302 	lsrs.w	r3, r4, r2
 8001a04:	f106 3eff 	add.w	lr, r6, #4294967295	; 0xffffffff
 8001a08:	d079      	beq.n	8001afe <LL_GPIO_Init+0x10e>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001a0a:	f04f 0c01 	mov.w	ip, #1
 8001a0e:	2703      	movs	r7, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001a10:	f04f 080f 	mov.w	r8, #15
 8001a14:	e003      	b.n	8001a1e <LL_GPIO_Init+0x2e>
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 8001a16:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001a18:	fa34 f302 	lsrs.w	r3, r4, r2
 8001a1c:	d06f      	beq.n	8001afe <LL_GPIO_Init+0x10e>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001a1e:	fa0c f302 	lsl.w	r3, ip, r2
    if (currentpin != 0x00u)
 8001a22:	4023      	ands	r3, r4
 8001a24:	d0f7      	beq.n	8001a16 <LL_GPIO_Init+0x26>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001a26:	f8d0 9000 	ldr.w	r9, [r0]
 8001a2a:	fa93 faa3 	rbit	sl, r3
 8001a2e:	faba fa8a 	clz	sl, sl
 8001a32:	fa93 f5a3 	rbit	r5, r3
 8001a36:	fab5 f585 	clz	r5, r5
 8001a3a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8001a3e:	006d      	lsls	r5, r5, #1
 8001a40:	fa07 fa0a 	lsl.w	sl, r7, sl
 8001a44:	fa06 f505 	lsl.w	r5, r6, r5
 8001a48:	ea29 090a 	bic.w	r9, r9, sl
 8001a4c:	ea49 0505 	orr.w	r5, r9, r5
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a50:	f1be 0f01 	cmp.w	lr, #1
 8001a54:	6005      	str	r5, [r0, #0]
 8001a56:	d816      	bhi.n	8001a86 <LL_GPIO_Init+0x96>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001a58:	6885      	ldr	r5, [r0, #8]
 8001a5a:	fa93 f9a3 	rbit	r9, r3
 8001a5e:	fab9 f989 	clz	r9, r9
 8001a62:	fa93 faa3 	rbit	sl, r3
 8001a66:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8001a6a:	fa07 f909 	lsl.w	r9, r7, r9
 8001a6e:	ea25 0909 	bic.w	r9, r5, r9
 8001a72:	faba fa8a 	clz	sl, sl
 8001a76:	688d      	ldr	r5, [r1, #8]
 8001a78:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8001a7c:	fa05 f50a 	lsl.w	r5, r5, sl
 8001a80:	ea49 0505 	orr.w	r5, r9, r5
 8001a84:	6085      	str	r5, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001a86:	68c5      	ldr	r5, [r0, #12]
 8001a88:	fa93 f9a3 	rbit	r9, r3
 8001a8c:	fab9 f989 	clz	r9, r9
 8001a90:	fa93 faa3 	rbit	sl, r3
 8001a94:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8001a98:	fa07 f909 	lsl.w	r9, r7, r9
 8001a9c:	ea25 0909 	bic.w	r9, r5, r9
 8001aa0:	faba fa8a 	clz	sl, sl
 8001aa4:	690d      	ldr	r5, [r1, #16]
 8001aa6:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8001aaa:	fa05 f50a 	lsl.w	r5, r5, sl
 8001aae:	ea49 0505 	orr.w	r5, r9, r5
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001ab2:	2e02      	cmp	r6, #2
 8001ab4:	60c5      	str	r5, [r0, #12]
 8001ab6:	d1ae      	bne.n	8001a16 <LL_GPIO_Init+0x26>
 8001ab8:	fa93 faa3 	rbit	sl, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001abc:	faba fa8a 	clz	sl, sl
 8001ac0:	f1ba 0f07 	cmp.w	sl, #7
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001ac4:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8001ac8:	f8d1 9014 	ldr.w	r9, [r1, #20]
 8001acc:	dc25      	bgt.n	8001b1a <LL_GPIO_Init+0x12a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001ace:	6a05      	ldr	r5, [r0, #32]
 8001ad0:	fa93 faa3 	rbit	sl, r3
 8001ad4:	faba fa8a 	clz	sl, sl
 8001ad8:	fa93 f3a3 	rbit	r3, r3
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	fa08 fa0a 	lsl.w	sl, r8, sl
 8001aea:	fa09 f303 	lsl.w	r3, r9, r3
 8001aee:	ea25 050a 	bic.w	r5, r5, sl
 8001af2:	432b      	orrs	r3, r5
    pinpos++;
 8001af4:	3201      	adds	r2, #1
 8001af6:	6203      	str	r3, [r0, #32]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001af8:	fa34 f302 	lsrs.w	r3, r4, r2
 8001afc:	d18f      	bne.n	8001a1e <LL_GPIO_Init+0x2e>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001afe:	f1be 0f01 	cmp.w	lr, #1
 8001b02:	d807      	bhi.n	8001b14 <LL_GPIO_Init+0x124>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001b04:	68ca      	ldr	r2, [r1, #12]
 8001b06:	6843      	ldr	r3, [r0, #4]
 8001b08:	fb02 f204 	mul.w	r2, r2, r4
 8001b0c:	ea23 0404 	bic.w	r4, r3, r4
 8001b10:	4314      	orrs	r4, r2
 8001b12:	6044      	str	r4, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8001b14:	2000      	movs	r0, #0
 8001b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001b1a:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8001b1e:	fa95 fba5 	rbit	fp, r5
 8001b22:	fabb fb8b 	clz	fp, fp
 8001b26:	fa95 f3a5 	rbit	r3, r5
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	fa08 fb0b 	lsl.w	fp, r8, fp
 8001b38:	fa09 f303 	lsl.w	r3, r9, r3
 8001b3c:	ea2a 0a0b 	bic.w	sl, sl, fp
 8001b40:	ea4a 0303 	orr.w	r3, sl, r3
 8001b44:	6243      	str	r3, [r0, #36]	; 0x24
 8001b46:	e766      	b.n	8001a16 <LL_GPIO_Init+0x26>

08001b48 <arm_fir_interpolate_init_f32>:
 8001b48:	b570      	push	{r4, r5, r6, lr}
 8001b4a:	fb92 f6f1 	sdiv	r6, r2, r1
 8001b4e:	fb01 2416 	mls	r4, r1, r6, r2
 8001b52:	b98c      	cbnz	r4, 8001b78 <arm_fir_interpolate_init_f32+0x30>
 8001b54:	9a05      	ldr	r2, [sp, #20]
 8001b56:	6043      	str	r3, [r0, #4]
 8001b58:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001b5c:	3a01      	subs	r2, #1
 8001b5e:	4432      	add	r2, r6
 8001b60:	4605      	mov	r5, r0
 8001b62:	7001      	strb	r1, [r0, #0]
 8001b64:	8046      	strh	r6, [r0, #2]
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	4621      	mov	r1, r4
 8001b6a:	9804      	ldr	r0, [sp, #16]
 8001b6c:	f000 fc2b 	bl	80023c6 <memset>
 8001b70:	9b04      	ldr	r3, [sp, #16]
 8001b72:	60ab      	str	r3, [r5, #8]
 8001b74:	4620      	mov	r0, r4
 8001b76:	bd70      	pop	{r4, r5, r6, pc}
 8001b78:	f06f 0001 	mvn.w	r0, #1
 8001b7c:	bd70      	pop	{r4, r5, r6, pc}
 8001b7e:	bf00      	nop

08001b80 <arm_fir_interpolate_f32>:
 8001b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b84:	b091      	sub	sp, #68	; 0x44
 8001b86:	8844      	ldrh	r4, [r0, #2]
 8001b88:	6885      	ldr	r5, [r0, #8]
 8001b8a:	9108      	str	r1, [sp, #32]
 8001b8c:	468e      	mov	lr, r1
 8001b8e:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 8001b92:	3901      	subs	r1, #1
 8001b94:	9205      	str	r2, [sp, #20]
 8001b96:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8001b9a:	4617      	mov	r7, r2
 8001b9c:	920c      	str	r2, [sp, #48]	; 0x30
 8001b9e:	f003 0203 	and.w	r2, r3, #3
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	940d      	str	r4, [sp, #52]	; 0x34
 8001ba6:	950b      	str	r5, [sp, #44]	; 0x2c
 8001ba8:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8001bac:	920e      	str	r2, [sp, #56]	; 0x38
 8001bae:	930f      	str	r3, [sp, #60]	; 0x3c
 8001bb0:	f000 8124 	beq.w	8001dfc <arm_fir_interpolate_f32+0x27c>
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	08a3      	lsrs	r3, r4, #2
 8001bb8:	1e5a      	subs	r2, r3, #1
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	f004 0303 	and.w	r3, r4, #3
 8001bc0:	9302      	str	r3, [sp, #8]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	b292      	uxth	r2, r2
 8001bcc:	3201      	adds	r2, #1
 8001bce:	9303      	str	r3, [sp, #12]
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	4614      	mov	r4, r2
 8001bd6:	9306      	str	r3, [sp, #24]
 8001bd8:	4673      	mov	r3, lr
 8001bda:	9204      	str	r2, [sp, #16]
 8001bdc:	3310      	adds	r3, #16
 8001bde:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8001be2:	f102 090c 	add.w	r9, r2, #12
 8001be6:	9307      	str	r3, [sp, #28]
 8001be8:	f105 080c 	add.w	r8, r5, #12
 8001bec:	910a      	str	r1, [sp, #40]	; 0x28
 8001bee:	f8cd b000 	str.w	fp, [sp]
 8001bf2:	9a07      	ldr	r2, [sp, #28]
 8001bf4:	9d06      	ldr	r5, [sp, #24]
 8001bf6:	f852 3c10 	ldr.w	r3, [r2, #-16]
 8001bfa:	f845 3c10 	str.w	r3, [r5, #-16]
 8001bfe:	f852 3c0c 	ldr.w	r3, [r2, #-12]
 8001c02:	f845 3c0c 	str.w	r3, [r5, #-12]
 8001c06:	4611      	mov	r1, r2
 8001c08:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8001c0c:	f845 3c08 	str.w	r3, [r5, #-8]
 8001c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c14:	f845 3c04 	str.w	r3, [r5, #-4]
 8001c18:	7803      	ldrb	r3, [r0, #0]
 8001c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8001c1c:	461d      	mov	r5, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 81c5 	beq.w	8001fae <arm_fir_interpolate_f32+0x42e>
 8001c24:	f8dd e014 	ldr.w	lr, [sp, #20]
 8001c28:	f103 0b01 	add.w	fp, r3, #1
 8001c2c:	f04f 0c01 	mov.w	ip, #1
 8001c30:	f108 0a10 	add.w	sl, r8, #16
 8001c34:	f109 0610 	add.w	r6, r9, #16
 8001c38:	9b00      	ldr	r3, [sp, #0]
 8001c3a:	ed18 3a03 	vldr	s6, [r8, #-12]
 8001c3e:	ed58 2a02 	vldr	s5, [r8, #-8]
 8001c42:	ed18 2a01 	vldr	s4, [r8, #-4]
 8001c46:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8001f04 <arm_fir_interpolate_f32+0x384>
 8001c4a:	ebcc 0405 	rsb	r4, ip, r5
 8001c4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001c52:	9b01      	ldr	r3, [sp, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80a3 	beq.w	8001da0 <arm_fir_interpolate_f32+0x220>
 8001c5a:	b22f      	sxth	r7, r5
 8001c5c:	00b9      	lsls	r1, r7, #2
 8001c5e:	eeb0 4a67 	vmov.f32	s8, s15
 8001c62:	eef0 1a67 	vmov.f32	s3, s15
 8001c66:	eeb0 5a67 	vmov.f32	s10, s15
 8001c6a:	013f      	lsls	r7, r7, #4
 8001c6c:	4652      	mov	r2, sl
 8001c6e:	4623      	mov	r3, r4
 8001c70:	ed52 5a04 	vldr	s11, [r2, #-16]
 8001c74:	ed93 6a00 	vldr	s12, [r3]
 8001c78:	440b      	add	r3, r1
 8001c7a:	edd3 6a00 	vldr	s13, [r3]
 8001c7e:	ee26 7a03 	vmul.f32	s14, s12, s6
 8001c82:	ee26 1a22 	vmul.f32	s2, s12, s5
 8001c86:	ed12 3a03 	vldr	s6, [r2, #-12]
 8001c8a:	ee66 3a02 	vmul.f32	s7, s12, s4
 8001c8e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8001c92:	440b      	add	r3, r1
 8001c94:	ee66 4aa2 	vmul.f32	s9, s13, s5
 8001c98:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c9c:	ed52 2a02 	vldr	s5, [r2, #-8]
 8001ca0:	ee37 5a05 	vadd.f32	s10, s14, s10
 8001ca4:	ee71 1a21 	vadd.f32	s3, s2, s3
 8001ca8:	ed93 7a00 	vldr	s14, [r3]
 8001cac:	ee26 1a82 	vmul.f32	s2, s13, s4
 8001cb0:	ee33 4a84 	vadd.f32	s8, s7, s8
 8001cb4:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8001cb8:	ee66 6a83 	vmul.f32	s13, s13, s6
 8001cbc:	440b      	add	r3, r1
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8001cc6:	ee34 5a85 	vadd.f32	s10, s9, s10
 8001cca:	ee71 1a21 	vadd.f32	s3, s2, s3
 8001cce:	ee67 4a02 	vmul.f32	s9, s14, s4
 8001cd2:	ee25 1a87 	vmul.f32	s2, s11, s14
 8001cd6:	ed12 2a01 	vldr	s4, [r2, #-4]
 8001cda:	ee23 6a07 	vmul.f32	s12, s6, s14
 8001cde:	ee33 4a84 	vadd.f32	s8, s7, s8
 8001ce2:	ee27 7a22 	vmul.f32	s14, s14, s5
 8001ce6:	ee34 5a85 	vadd.f32	s10, s9, s10
 8001cea:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001cee:	ee63 4a27 	vmul.f32	s9, s6, s15
 8001cf2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001cf6:	ee71 1a21 	vadd.f32	s3, s2, s3
 8001cfa:	ee62 6aa7 	vmul.f32	s13, s5, s15
 8001cfe:	ee36 4a04 	vadd.f32	s8, s12, s8
 8001d02:	ee67 7a82 	vmul.f32	s15, s15, s4
 8001d06:	3210      	adds	r2, #16
 8001d08:	42b2      	cmp	r2, r6
 8001d0a:	440b      	add	r3, r1
 8001d0c:	ee35 5a85 	vadd.f32	s10, s11, s10
 8001d10:	ee74 1aa1 	vadd.f32	s3, s9, s3
 8001d14:	ee36 4a84 	vadd.f32	s8, s13, s8
 8001d18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d1c:	d1a8      	bne.n	8001c70 <arm_fir_interpolate_f32+0xf0>
 8001d1e:	9b04      	ldr	r3, [sp, #16]
 8001d20:	fb07 4403 	mla	r4, r7, r3, r4
 8001d24:	464b      	mov	r3, r9
 8001d26:	9a02      	ldr	r2, [sp, #8]
 8001d28:	b1fa      	cbz	r2, 8001d6a <arm_fir_interpolate_f32+0x1ea>
 8001d2a:	9a03      	ldr	r2, [sp, #12]
 8001d2c:	00ad      	lsls	r5, r5, #2
 8001d2e:	189a      	adds	r2, r3, r2
 8001d30:	ed94 7a00 	vldr	s14, [r4]
 8001d34:	ecf3 6a01 	vldmia	r3!, {s13}
 8001d38:	ee27 3a03 	vmul.f32	s6, s14, s6
 8001d3c:	ee67 5a22 	vmul.f32	s11, s14, s5
 8001d40:	ee27 6a02 	vmul.f32	s12, s14, s4
 8001d44:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	ee35 5a03 	vadd.f32	s10, s10, s6
 8001d4e:	442c      	add	r4, r5
 8001d50:	eeb0 3a62 	vmov.f32	s6, s5
 8001d54:	ee71 1aa5 	vadd.f32	s3, s3, s11
 8001d58:	eef0 2a42 	vmov.f32	s5, s4
 8001d5c:	ee34 4a06 	vadd.f32	s8, s8, s12
 8001d60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d64:	eeb0 2a66 	vmov.f32	s4, s13
 8001d68:	d1e2      	bne.n	8001d30 <arm_fir_interpolate_f32+0x1b0>
 8001d6a:	ed8e 5a00 	vstr	s10, [lr]
 8001d6e:	7803      	ldrb	r3, [r0, #0]
 8001d70:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8001d74:	edc3 1a00 	vstr	s3, [r3]
 8001d78:	7803      	ldrb	r3, [r0, #0]
 8001d7a:	eb0e 03c3 	add.w	r3, lr, r3, lsl #3
 8001d7e:	ed83 4a00 	vstr	s8, [r3]
 8001d82:	7803      	ldrb	r3, [r0, #0]
 8001d84:	f10c 0c01 	add.w	ip, ip, #1
 8001d88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d8c:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8001d90:	45dc      	cmp	ip, fp
 8001d92:	edc3 7a00 	vstr	s15, [r3]
 8001d96:	f10e 0e04 	add.w	lr, lr, #4
 8001d9a:	d009      	beq.n	8001db0 <arm_fir_interpolate_f32+0x230>
 8001d9c:	7805      	ldrb	r5, [r0, #0]
 8001d9e:	e74b      	b.n	8001c38 <arm_fir_interpolate_f32+0xb8>
 8001da0:	eeb0 4a67 	vmov.f32	s8, s15
 8001da4:	eef0 1a67 	vmov.f32	s3, s15
 8001da8:	eeb0 5a67 	vmov.f32	s10, s15
 8001dac:	4643      	mov	r3, r8
 8001dae:	e7ba      	b.n	8001d26 <arm_fir_interpolate_f32+0x1a6>
 8001db0:	9b05      	ldr	r3, [sp, #20]
 8001db2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001db4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001db8:	9305      	str	r3, [sp, #20]
 8001dba:	7803      	ldrb	r3, [r0, #0]
 8001dbc:	9a05      	ldr	r2, [sp, #20]
 8001dbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001dc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001dc6:	9305      	str	r3, [sp, #20]
 8001dc8:	9b06      	ldr	r3, [sp, #24]
 8001dca:	3310      	adds	r3, #16
 8001dcc:	9306      	str	r3, [sp, #24]
 8001dce:	9b07      	ldr	r3, [sp, #28]
 8001dd0:	3310      	adds	r3, #16
 8001dd2:	9307      	str	r3, [sp, #28]
 8001dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	46b1      	mov	r9, r6
 8001dda:	46d0      	mov	r8, sl
 8001ddc:	930a      	str	r3, [sp, #40]	; 0x28
 8001dde:	f47f af08 	bne.w	8001bf2 <arm_fir_interpolate_f32+0x72>
 8001de2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001de4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001de6:	f8dd b000 	ldr.w	fp, [sp]
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	441a      	add	r2, r3
 8001dee:	920c      	str	r2, [sp, #48]	; 0x30
 8001df0:	9a08      	ldr	r2, [sp, #32]
 8001df2:	441a      	add	r2, r3
 8001df4:	9208      	str	r2, [sp, #32]
 8001df6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001df8:	441a      	add	r2, r3
 8001dfa:	920b      	str	r2, [sp, #44]	; 0x2c
 8001dfc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001dfe:	2900      	cmp	r1, #0
 8001e00:	f000 8095 	beq.w	8001f2e <arm_fir_interpolate_f32+0x3ae>
 8001e04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001e06:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001e08:	9104      	str	r1, [sp, #16]
 8001e0a:	0893      	lsrs	r3, r2, #2
 8001e0c:	f002 0203 	and.w	r2, r2, #3
 8001e10:	4614      	mov	r4, r2
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	1e63      	subs	r3, r4, #1
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	b292      	uxth	r2, r2
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f102 0a01 	add.w	sl, r2, #1
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001e26:	f8cd a008 	str.w	sl, [sp, #8]
 8001e2a:	eb05 180a 	add.w	r8, r5, sl, lsl #4
 8001e2e:	9203      	str	r2, [sp, #12]
 8001e30:	4682      	mov	sl, r0
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	46ac      	mov	ip, r5
 8001e36:	4620      	mov	r0, r4
 8001e38:	9a08      	ldr	r2, [sp, #32]
 8001e3a:	f852 3b04 	ldr.w	r3, [r2], #4
 8001e3e:	9208      	str	r2, [sp, #32]
 8001e40:	9a03      	ldr	r2, [sp, #12]
 8001e42:	f842 3b04 	str.w	r3, [r2], #4
 8001e46:	f89a 3000 	ldrb.w	r3, [sl]
 8001e4a:	9203      	str	r2, [sp, #12]
 8001e4c:	461d      	mov	r5, r3
 8001e4e:	9306      	str	r3, [sp, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d05e      	beq.n	8001f12 <arm_fir_interpolate_f32+0x392>
 8001e54:	f8dd e014 	ldr.w	lr, [sp, #20]
 8001e58:	f103 0901 	add.w	r9, r3, #1
 8001e5c:	2701      	movs	r7, #1
 8001e5e:	f108 0610 	add.w	r6, r8, #16
 8001e62:	9b00      	ldr	r3, [sp, #0]
 8001e64:	eddf 7a27 	vldr	s15, [pc, #156]	; 8001f04 <arm_fir_interpolate_f32+0x384>
 8001e68:	1bec      	subs	r4, r5, r7
 8001e6a:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 809b 	beq.w	8001faa <arm_fir_interpolate_f32+0x42a>
 8001e74:	00a9      	lsls	r1, r5, #2
 8001e76:	f10c 0210 	add.w	r2, ip, #16
 8001e7a:	4623      	mov	r3, r4
 8001e7c:	ed12 7a04 	vldr	s14, [r2, #-16]
 8001e80:	edd3 5a00 	vldr	s11, [r3]
 8001e84:	ed12 5a03 	vldr	s10, [r2, #-12]
 8001e88:	ed12 6a02 	vldr	s12, [r2, #-8]
 8001e8c:	ed52 6a01 	vldr	s13, [r2, #-4]
 8001e90:	440b      	add	r3, r1
 8001e92:	ee65 5a87 	vmul.f32	s11, s11, s14
 8001e96:	ed93 7a00 	vldr	s14, [r3]
 8001e9a:	440b      	add	r3, r1
 8001e9c:	ee27 7a05 	vmul.f32	s14, s14, s10
 8001ea0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001ea4:	ed93 5a00 	vldr	s10, [r3]
 8001ea8:	440b      	add	r3, r1
 8001eaa:	ee77 5a27 	vadd.f32	s11, s14, s15
 8001eae:	ee65 7a06 	vmul.f32	s15, s10, s12
 8001eb2:	ed93 6a00 	vldr	s12, [r3]
 8001eb6:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8001eba:	3210      	adds	r2, #16
 8001ebc:	ee66 7a26 	vmul.f32	s15, s12, s13
 8001ec0:	42b2      	cmp	r2, r6
 8001ec2:	440b      	add	r3, r1
 8001ec4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ec8:	d1d8      	bne.n	8001e7c <arm_fir_interpolate_f32+0x2fc>
 8001eca:	9b02      	ldr	r3, [sp, #8]
 8001ecc:	0089      	lsls	r1, r1, #2
 8001ece:	fb03 4401 	mla	r4, r3, r1, r4
 8001ed2:	4643      	mov	r3, r8
 8001ed4:	b168      	cbz	r0, 8001ef2 <arm_fir_interpolate_f32+0x372>
 8001ed6:	9a01      	ldr	r2, [sp, #4]
 8001ed8:	00ad      	lsls	r5, r5, #2
 8001eda:	189a      	adds	r2, r3, r2
 8001edc:	ecf3 6a01 	vldmia	r3!, {s13}
 8001ee0:	ed94 7a00 	vldr	s14, [r4]
 8001ee4:	ee26 7a87 	vmul.f32	s14, s13, s14
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	442c      	add	r4, r5
 8001eec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ef0:	d1f4      	bne.n	8001edc <arm_fir_interpolate_f32+0x35c>
 8001ef2:	3701      	adds	r7, #1
 8001ef4:	454f      	cmp	r7, r9
 8001ef6:	ecee 7a01 	vstmia	lr!, {s15}
 8001efa:	d005      	beq.n	8001f08 <arm_fir_interpolate_f32+0x388>
 8001efc:	f89a 5000 	ldrb.w	r5, [sl]
 8001f00:	e7af      	b.n	8001e62 <arm_fir_interpolate_f32+0x2e2>
 8001f02:	bf00      	nop
 8001f04:	00000000 	.word	0x00000000
 8001f08:	9b05      	ldr	r3, [sp, #20]
 8001f0a:	9a06      	ldr	r2, [sp, #24]
 8001f0c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001f10:	9305      	str	r3, [sp, #20]
 8001f12:	9b04      	ldr	r3, [sp, #16]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	f10c 0c04 	add.w	ip, ip, #4
 8001f1a:	f108 0804 	add.w	r8, r8, #4
 8001f1e:	9304      	str	r3, [sp, #16]
 8001f20:	d18a      	bne.n	8001e38 <arm_fir_interpolate_f32+0x2b8>
 8001f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001f24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001f26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001f2a:	4650      	mov	r0, sl
 8001f2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8001f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f30:	6881      	ldr	r1, [r0, #8]
 8001f32:	1e5c      	subs	r4, r3, #1
 8001f34:	f3c4 038f 	ubfx	r3, r4, #2, #16
 8001f38:	b31b      	cbz	r3, 8001f82 <arm_fir_interpolate_f32+0x402>
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29d      	uxth	r5, r3
 8001f3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001f40:	1cae      	adds	r6, r5, #2
 8001f42:	eb01 1606 	add.w	r6, r1, r6, lsl #4
 8001f46:	f101 0310 	add.w	r3, r1, #16
 8001f4a:	3210      	adds	r2, #16
 8001f4c:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8001f50:	f843 0c10 	str.w	r0, [r3, #-16]
 8001f54:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8001f58:	f843 0c0c 	str.w	r0, [r3, #-12]
 8001f5c:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8001f60:	f843 0c08 	str.w	r0, [r3, #-8]
 8001f64:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8001f68:	f843 0c04 	str.w	r0, [r3, #-4]
 8001f6c:	3310      	adds	r3, #16
 8001f6e:	42b3      	cmp	r3, r6
 8001f70:	f102 0210 	add.w	r2, r2, #16
 8001f74:	d1ea      	bne.n	8001f4c <arm_fir_interpolate_f32+0x3cc>
 8001f76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001f78:	1c6b      	adds	r3, r5, #1
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	441a      	add	r2, r3
 8001f7e:	4419      	add	r1, r3
 8001f80:	920b      	str	r2, [sp, #44]	; 0x2c
 8001f82:	f014 0203 	ands.w	r2, r4, #3
 8001f86:	d00d      	beq.n	8001fa4 <arm_fir_interpolate_f32+0x424>
 8001f88:	3a01      	subs	r2, #1
 8001f8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001f8c:	b292      	uxth	r2, r2
 8001f8e:	3201      	adds	r2, #1
 8001f90:	460b      	mov	r3, r1
 8001f92:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001f96:	4601      	mov	r1, r0
 8001f98:	f851 0b04 	ldr.w	r0, [r1], #4
 8001f9c:	f843 0b04 	str.w	r0, [r3], #4
 8001fa0:	4291      	cmp	r1, r2
 8001fa2:	d1f9      	bne.n	8001f98 <arm_fir_interpolate_f32+0x418>
 8001fa4:	b011      	add	sp, #68	; 0x44
 8001fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001faa:	4663      	mov	r3, ip
 8001fac:	e792      	b.n	8001ed4 <arm_fir_interpolate_f32+0x354>
 8001fae:	f108 0a10 	add.w	sl, r8, #16
 8001fb2:	f109 0610 	add.w	r6, r9, #16
 8001fb6:	e701      	b.n	8001dbc <arm_fir_interpolate_f32+0x23c>

08001fb8 <arm_fir_decimate_init_f32>:
 8001fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fba:	9f07      	ldr	r7, [sp, #28]
 8001fbc:	fbb7 f4f2 	udiv	r4, r7, r2
 8001fc0:	fb02 7414 	mls	r4, r2, r4, r7
 8001fc4:	b98c      	cbnz	r4, 8001fea <arm_fir_decimate_init_f32+0x32>
 8001fc6:	4616      	mov	r6, r2
 8001fc8:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 8001fcc:	3a01      	subs	r2, #1
 8001fce:	443a      	add	r2, r7
 8001fd0:	4605      	mov	r5, r0
 8001fd2:	8041      	strh	r1, [r0, #2]
 8001fd4:	6043      	str	r3, [r0, #4]
 8001fd6:	0092      	lsls	r2, r2, #2
 8001fd8:	4621      	mov	r1, r4
 8001fda:	9806      	ldr	r0, [sp, #24]
 8001fdc:	f000 f9f3 	bl	80023c6 <memset>
 8001fe0:	9b06      	ldr	r3, [sp, #24]
 8001fe2:	60ab      	str	r3, [r5, #8]
 8001fe4:	702e      	strb	r6, [r5, #0]
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fea:	f06f 0001 	mvn.w	r0, #1
 8001fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ff0 <arm_fir_decimate_f32>:
 8001ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ff4:	ed2d 8b08 	vpush	{d8-d11}
 8001ff8:	4683      	mov	fp, r0
 8001ffa:	b08d      	sub	sp, #52	; 0x34
 8001ffc:	8840      	ldrh	r0, [r0, #2]
 8001ffe:	9009      	str	r0, [sp, #36]	; 0x24
 8002000:	4605      	mov	r5, r0
 8002002:	f89b 0000 	ldrb.w	r0, [fp]
 8002006:	fbb3 f3f0 	udiv	r3, r3, r0
 800200a:	089c      	lsrs	r4, r3, #2
 800200c:	eba3 0384 	sub.w	r3, r3, r4, lsl #2
 8002010:	f8db 6008 	ldr.w	r6, [fp, #8]
 8002014:	930b      	str	r3, [sp, #44]	; 0x2c
 8002016:	f105 4980 	add.w	r9, r5, #1073741824	; 0x40000000
 800201a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800201e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002022:	940a      	str	r4, [sp, #40]	; 0x28
 8002024:	9208      	str	r2, [sp, #32]
 8002026:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 800202a:	9302      	str	r3, [sp, #8]
 800202c:	2c00      	cmp	r4, #0
 800202e:	f000 80fa 	beq.w	8002226 <arm_fir_decimate_f32+0x236>
 8002032:	4627      	mov	r7, r4
 8002034:	462c      	mov	r4, r5
 8002036:	08ad      	lsrs	r5, r5, #2
 8002038:	9505      	str	r5, [sp, #20]
 800203a:	012d      	lsls	r5, r5, #4
 800203c:	442b      	add	r3, r5
 800203e:	4696      	mov	lr, r2
 8002040:	9307      	str	r3, [sp, #28]
 8002042:	f004 0303 	and.w	r3, r4, #3
 8002046:	f8cd b010 	str.w	fp, [sp, #16]
 800204a:	4602      	mov	r2, r0
 800204c:	9306      	str	r3, [sp, #24]
 800204e:	f10e 0a10 	add.w	sl, lr, #16
 8002052:	9703      	str	r7, [sp, #12]
 8002054:	f8cd 9004 	str.w	r9, [sp, #4]
 8002058:	46ab      	mov	fp, r5
 800205a:	464c      	mov	r4, r9
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	4613      	mov	r3, r2
 8002060:	4608      	mov	r0, r1
 8002062:	f850 5b04 	ldr.w	r5, [r0], #4
 8002066:	f844 5b04 	str.w	r5, [r4], #4
 800206a:	3b01      	subs	r3, #1
 800206c:	d1f9      	bne.n	8002062 <arm_fir_decimate_f32+0x72>
 800206e:	9b04      	ldr	r3, [sp, #16]
 8002070:	eddf 5abc 	vldr	s11, [pc, #752]	; 8002364 <arm_fir_decimate_f32+0x374>
 8002074:	f893 8000 	ldrb.w	r8, [r3]
 8002078:	9b01      	ldr	r3, [sp, #4]
 800207a:	9f05      	ldr	r7, [sp, #20]
 800207c:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	eb06 0e08 	add.w	lr, r6, r8
 8002086:	eb0e 0c08 	add.w	ip, lr, r8
 800208a:	4413      	add	r3, r2
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	4411      	add	r1, r2
 8002090:	eb0c 0908 	add.w	r9, ip, r8
 8002094:	eeb0 3a65 	vmov.f32	s6, s11
 8002098:	eef0 2a65 	vmov.f32	s5, s11
 800209c:	eeb0 2a65 	vmov.f32	s4, s11
 80020a0:	2f00      	cmp	r7, #0
 80020a2:	f000 815b 	beq.w	800235c <arm_fir_decimate_f32+0x36c>
 80020a6:	9b02      	ldr	r3, [sp, #8]
 80020a8:	f106 0410 	add.w	r4, r6, #16
 80020ac:	f103 0510 	add.w	r5, r3, #16
 80020b0:	f10e 0010 	add.w	r0, lr, #16
 80020b4:	f10c 0210 	add.w	r2, ip, #16
 80020b8:	f109 0310 	add.w	r3, r9, #16
 80020bc:	ed15 6a04 	vldr	s12, [r5, #-16]
 80020c0:	ed53 3a04 	vldr	s7, [r3, #-16]
 80020c4:	ed54 ba04 	vldr	s23, [r4, #-16]
 80020c8:	ed10 aa04 	vldr	s20, [r0, #-16]
 80020cc:	ed12 0a04 	vldr	s0, [r2, #-16]
 80020d0:	ed55 6a03 	vldr	s13, [r5, #-12]
 80020d4:	ed52 0a03 	vldr	s1, [r2, #-12]
 80020d8:	ed13 4a03 	vldr	s8, [r3, #-12]
 80020dc:	ed14 ba03 	vldr	s22, [r4, #-12]
 80020e0:	ed50 9a03 	vldr	s19, [r0, #-12]
 80020e4:	ed15 7a02 	vldr	s14, [r5, #-8]
 80020e8:	ed53 4a02 	vldr	s9, [r3, #-8]
 80020ec:	ed54 aa02 	vldr	s21, [r4, #-8]
 80020f0:	ed50 8a02 	vldr	s17, [r0, #-8]
 80020f4:	ed12 1a02 	vldr	s2, [r2, #-8]
 80020f8:	ed55 7a01 	vldr	s15, [r5, #-4]
 80020fc:	ed14 9a01 	vldr	s18, [r4, #-4]
 8002100:	ed10 8a01 	vldr	s16, [r0, #-4]
 8002104:	ed52 1a01 	vldr	s3, [r2, #-4]
 8002108:	ed13 5a01 	vldr	s10, [r3, #-4]
 800210c:	ee66 ba2b 	vmul.f32	s23, s12, s23
 8002110:	ee26 aa0a 	vmul.f32	s20, s12, s20
 8002114:	ee26 0a00 	vmul.f32	s0, s12, s0
 8002118:	ee26 6a23 	vmul.f32	s12, s12, s7
 800211c:	ee3b 2a82 	vadd.f32	s4, s23, s4
 8002120:	ee66 3aa0 	vmul.f32	s7, s13, s1
 8002124:	ee76 5a25 	vadd.f32	s11, s12, s11
 8002128:	ee26 ba8b 	vmul.f32	s22, s13, s22
 800212c:	ee7a 2a22 	vadd.f32	s5, s20, s5
 8002130:	ee66 9aa9 	vmul.f32	s19, s13, s19
 8002134:	ee30 3a03 	vadd.f32	s6, s0, s6
 8002138:	ee66 6a84 	vmul.f32	s13, s13, s8
 800213c:	ee33 6a83 	vadd.f32	s12, s7, s6
 8002140:	ee3b 4a02 	vadd.f32	s8, s22, s4
 8002144:	ee27 3a01 	vmul.f32	s6, s14, s2
 8002148:	ee27 2a2a 	vmul.f32	s4, s14, s21
 800214c:	ee79 0aa2 	vadd.f32	s1, s19, s5
 8002150:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8002154:	ee67 2a28 	vmul.f32	s5, s14, s17
 8002158:	ee27 7a24 	vmul.f32	s14, s14, s9
 800215c:	ee72 3a04 	vadd.f32	s7, s4, s8
 8002160:	ee73 4a06 	vadd.f32	s9, s6, s12
 8002164:	ee27 2a89 	vmul.f32	s4, s15, s18
 8002168:	ee32 4aa0 	vadd.f32	s8, s5, s1
 800216c:	ee27 3aa1 	vmul.f32	s6, s15, s3
 8002170:	ee67 2a88 	vmul.f32	s5, s15, s16
 8002174:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002178:	ee67 7a85 	vmul.f32	s15, s15, s10
 800217c:	3f01      	subs	r7, #1
 800217e:	f105 0510 	add.w	r5, r5, #16
 8002182:	ee32 2a23 	vadd.f32	s4, s4, s7
 8002186:	f104 0410 	add.w	r4, r4, #16
 800218a:	ee72 2a84 	vadd.f32	s5, s5, s8
 800218e:	f100 0010 	add.w	r0, r0, #16
 8002192:	ee33 3a24 	vadd.f32	s6, s6, s9
 8002196:	f102 0210 	add.w	r2, r2, #16
 800219a:	ee77 5a87 	vadd.f32	s11, s15, s14
 800219e:	f103 0310 	add.w	r3, r3, #16
 80021a2:	d18b      	bne.n	80020bc <arm_fir_decimate_f32+0xcc>
 80021a4:	9a07      	ldr	r2, [sp, #28]
 80021a6:	445e      	add	r6, fp
 80021a8:	44de      	add	lr, fp
 80021aa:	44dc      	add	ip, fp
 80021ac:	eb09 000b 	add.w	r0, r9, fp
 80021b0:	9b06      	ldr	r3, [sp, #24]
 80021b2:	b1db      	cbz	r3, 80021ec <arm_fir_decimate_f32+0x1fc>
 80021b4:	ecf2 7a01 	vldmia	r2!, {s15}
 80021b8:	ecb6 5a01 	vldmia	r6!, {s10}
 80021bc:	ecbe 6a01 	vldmia	lr!, {s12}
 80021c0:	ecfc 6a01 	vldmia	ip!, {s13}
 80021c4:	ecb0 7a01 	vldmia	r0!, {s14}
 80021c8:	ee27 5a85 	vmul.f32	s10, s15, s10
 80021cc:	ee27 6a86 	vmul.f32	s12, s15, s12
 80021d0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80021d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d8:	3b01      	subs	r3, #1
 80021da:	ee32 2a05 	vadd.f32	s4, s4, s10
 80021de:	ee72 2a86 	vadd.f32	s5, s5, s12
 80021e2:	ee33 3a26 	vadd.f32	s6, s6, s13
 80021e6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80021ea:	d1e3      	bne.n	80021b4 <arm_fir_decimate_f32+0x1c4>
 80021ec:	9b03      	ldr	r3, [sp, #12]
 80021ee:	ed0a 2a04 	vstr	s4, [sl, #-16]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	ed4a 2a03 	vstr	s5, [sl, #-12]
 80021f8:	ed0a 3a02 	vstr	s6, [sl, #-8]
 80021fc:	ed4a 5a01 	vstr	s11, [sl, #-4]
 8002200:	eb09 0608 	add.w	r6, r9, r8
 8002204:	f10a 0a10 	add.w	sl, sl, #16
 8002208:	9303      	str	r3, [sp, #12]
 800220a:	d003      	beq.n	8002214 <arm_fir_decimate_f32+0x224>
 800220c:	9b04      	ldr	r3, [sp, #16]
 800220e:	9c01      	ldr	r4, [sp, #4]
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	e723      	b.n	800205c <arm_fir_decimate_f32+0x6c>
 8002214:	9b08      	ldr	r3, [sp, #32]
 8002216:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002218:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800221c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8002220:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002224:	9308      	str	r3, [sp, #32]
 8002226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002228:	2b00      	cmp	r3, #0
 800222a:	d061      	beq.n	80022f0 <arm_fir_decimate_f32+0x300>
 800222c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800222e:	9802      	ldr	r0, [sp, #8]
 8002230:	f8dd a020 	ldr.w	sl, [sp, #32]
 8002234:	0895      	lsrs	r5, r2, #2
 8002236:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 800223a:	eb00 0c0e 	add.w	ip, r0, lr
 800223e:	f002 0703 	and.w	r7, r2, #3
 8002242:	4698      	mov	r8, r3
 8002244:	f89b 4000 	ldrb.w	r4, [fp]
 8002248:	4648      	mov	r0, r9
 800224a:	4623      	mov	r3, r4
 800224c:	460a      	mov	r2, r1
 800224e:	ecf2 7a01 	vldmia	r2!, {s15}
 8002252:	3b01      	subs	r3, #1
 8002254:	ece0 7a01 	vstmia	r0!, {s15}
 8002258:	d1f9      	bne.n	800224e <arm_fir_decimate_f32+0x25e>
 800225a:	00a4      	lsls	r4, r4, #2
 800225c:	44a1      	add	r9, r4
 800225e:	4421      	add	r1, r4
 8002260:	eddf 7a40 	vldr	s15, [pc, #256]	; 8002364 <arm_fir_decimate_f32+0x374>
 8002264:	2d00      	cmp	r5, #0
 8002266:	d076      	beq.n	8002356 <arm_fir_decimate_f32+0x366>
 8002268:	9b02      	ldr	r3, [sp, #8]
 800226a:	4628      	mov	r0, r5
 800226c:	f103 0210 	add.w	r2, r3, #16
 8002270:	f106 0310 	add.w	r3, r6, #16
 8002274:	ed53 6a04 	vldr	s13, [r3, #-16]
 8002278:	ed12 4a04 	vldr	s8, [r2, #-16]
 800227c:	ed52 3a03 	vldr	s7, [r2, #-12]
 8002280:	ed13 5a03 	vldr	s10, [r3, #-12]
 8002284:	ed52 4a02 	vldr	s9, [r2, #-8]
 8002288:	ed13 6a02 	vldr	s12, [r3, #-8]
 800228c:	ed52 5a01 	vldr	s11, [r2, #-4]
 8002290:	ed13 7a01 	vldr	s14, [r3, #-4]
 8002294:	ee24 4a26 	vmul.f32	s8, s8, s13
 8002298:	ee23 5a85 	vmul.f32	s10, s7, s10
 800229c:	ee74 6a27 	vadd.f32	s13, s8, s15
 80022a0:	ee24 6a86 	vmul.f32	s12, s9, s12
 80022a4:	ee75 6a26 	vadd.f32	s13, s10, s13
 80022a8:	ee25 7a87 	vmul.f32	s14, s11, s14
 80022ac:	ee76 7a26 	vadd.f32	s15, s12, s13
 80022b0:	3801      	subs	r0, #1
 80022b2:	f102 0210 	add.w	r2, r2, #16
 80022b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ba:	f103 0310 	add.w	r3, r3, #16
 80022be:	d1d9      	bne.n	8002274 <arm_fir_decimate_f32+0x284>
 80022c0:	eb06 020e 	add.w	r2, r6, lr
 80022c4:	4660      	mov	r0, ip
 80022c6:	b157      	cbz	r7, 80022de <arm_fir_decimate_f32+0x2ee>
 80022c8:	463b      	mov	r3, r7
 80022ca:	ecf0 6a01 	vldmia	r0!, {s13}
 80022ce:	ecb2 7a01 	vldmia	r2!, {s14}
 80022d2:	ee26 7a87 	vmul.f32	s14, s13, s14
 80022d6:	3b01      	subs	r3, #1
 80022d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022dc:	d1f5      	bne.n	80022ca <arm_fir_decimate_f32+0x2da>
 80022de:	f89b 3000 	ldrb.w	r3, [fp]
 80022e2:	ecea 7a01 	vstmia	sl!, {s15}
 80022e6:	f1b8 0801 	subs.w	r8, r8, #1
 80022ea:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80022ee:	d1a9      	bne.n	8002244 <arm_fir_decimate_f32+0x254>
 80022f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022f2:	f8db 4008 	ldr.w	r4, [fp, #8]
 80022f6:	1e59      	subs	r1, r3, #1
 80022f8:	088f      	lsrs	r7, r1, #2
 80022fa:	d01d      	beq.n	8002338 <arm_fir_decimate_f32+0x348>
 80022fc:	f104 0210 	add.w	r2, r4, #16
 8002300:	f106 0310 	add.w	r3, r6, #16
 8002304:	4638      	mov	r0, r7
 8002306:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800230a:	f842 5c10 	str.w	r5, [r2, #-16]
 800230e:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8002312:	f842 5c0c 	str.w	r5, [r2, #-12]
 8002316:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800231a:	f842 5c08 	str.w	r5, [r2, #-8]
 800231e:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8002322:	f842 5c04 	str.w	r5, [r2, #-4]
 8002326:	3801      	subs	r0, #1
 8002328:	f103 0310 	add.w	r3, r3, #16
 800232c:	f102 0210 	add.w	r2, r2, #16
 8002330:	d1e9      	bne.n	8002306 <arm_fir_decimate_f32+0x316>
 8002332:	013b      	lsls	r3, r7, #4
 8002334:	441c      	add	r4, r3
 8002336:	441e      	add	r6, r3
 8002338:	f011 0303 	ands.w	r3, r1, #3
 800233c:	d006      	beq.n	800234c <arm_fir_decimate_f32+0x35c>
 800233e:	4622      	mov	r2, r4
 8002340:	f856 1b04 	ldr.w	r1, [r6], #4
 8002344:	f842 1b04 	str.w	r1, [r2], #4
 8002348:	3b01      	subs	r3, #1
 800234a:	d1f9      	bne.n	8002340 <arm_fir_decimate_f32+0x350>
 800234c:	b00d      	add	sp, #52	; 0x34
 800234e:	ecbd 8b08 	vpop	{d8-d11}
 8002352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002356:	9802      	ldr	r0, [sp, #8]
 8002358:	4632      	mov	r2, r6
 800235a:	e7b4      	b.n	80022c6 <arm_fir_decimate_f32+0x2d6>
 800235c:	4648      	mov	r0, r9
 800235e:	9a02      	ldr	r2, [sp, #8]
 8002360:	e726      	b.n	80021b0 <arm_fir_decimate_f32+0x1c0>
 8002362:	bf00      	nop
 8002364:	00000000 	.word	0x00000000

08002368 <__libc_init_array>:
 8002368:	b570      	push	{r4, r5, r6, lr}
 800236a:	4e0d      	ldr	r6, [pc, #52]	; (80023a0 <__libc_init_array+0x38>)
 800236c:	4c0d      	ldr	r4, [pc, #52]	; (80023a4 <__libc_init_array+0x3c>)
 800236e:	1ba4      	subs	r4, r4, r6
 8002370:	10a4      	asrs	r4, r4, #2
 8002372:	2500      	movs	r5, #0
 8002374:	42a5      	cmp	r5, r4
 8002376:	d109      	bne.n	800238c <__libc_init_array+0x24>
 8002378:	4e0b      	ldr	r6, [pc, #44]	; (80023a8 <__libc_init_array+0x40>)
 800237a:	4c0c      	ldr	r4, [pc, #48]	; (80023ac <__libc_init_array+0x44>)
 800237c:	f000 f82c 	bl	80023d8 <_init>
 8002380:	1ba4      	subs	r4, r4, r6
 8002382:	10a4      	asrs	r4, r4, #2
 8002384:	2500      	movs	r5, #0
 8002386:	42a5      	cmp	r5, r4
 8002388:	d105      	bne.n	8002396 <__libc_init_array+0x2e>
 800238a:	bd70      	pop	{r4, r5, r6, pc}
 800238c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002390:	4798      	blx	r3
 8002392:	3501      	adds	r5, #1
 8002394:	e7ee      	b.n	8002374 <__libc_init_array+0xc>
 8002396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800239a:	4798      	blx	r3
 800239c:	3501      	adds	r5, #1
 800239e:	e7f2      	b.n	8002386 <__libc_init_array+0x1e>
 80023a0:	0800483c 	.word	0x0800483c
 80023a4:	0800483c 	.word	0x0800483c
 80023a8:	0800483c 	.word	0x0800483c
 80023ac:	08004840 	.word	0x08004840

080023b0 <memcpy>:
 80023b0:	b510      	push	{r4, lr}
 80023b2:	1e43      	subs	r3, r0, #1
 80023b4:	440a      	add	r2, r1
 80023b6:	4291      	cmp	r1, r2
 80023b8:	d100      	bne.n	80023bc <memcpy+0xc>
 80023ba:	bd10      	pop	{r4, pc}
 80023bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023c4:	e7f7      	b.n	80023b6 <memcpy+0x6>

080023c6 <memset>:
 80023c6:	4402      	add	r2, r0
 80023c8:	4603      	mov	r3, r0
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d100      	bne.n	80023d0 <memset+0xa>
 80023ce:	4770      	bx	lr
 80023d0:	f803 1b01 	strb.w	r1, [r3], #1
 80023d4:	e7f9      	b.n	80023ca <memset+0x4>
	...

080023d8 <_init>:
 80023d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023da:	bf00      	nop
 80023dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023de:	bc08      	pop	{r3}
 80023e0:	469e      	mov	lr, r3
 80023e2:	4770      	bx	lr

080023e4 <_fini>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	bf00      	nop
 80023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ea:	bc08      	pop	{r3}
 80023ec:	469e      	mov	lr, r3
 80023ee:	4770      	bx	lr
