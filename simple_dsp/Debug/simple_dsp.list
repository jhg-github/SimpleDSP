
simple_dsp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001958  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001aec  08001aec  00011aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b28  08001b28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b28  08001b28  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b28  08001b28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b28  08001b28  00011b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b2c  08001b2c  00011b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08001b3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08001b3c  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b73e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020cc  00000000  00000000  0002b77a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005148  00000000  00000000  0002d846  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000006c0  00000000  00000000  00032990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001250  00000000  00000000  00033050  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001e327  00000000  00000000  000342a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00008c3b  00000000  00000000  000525c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000b2504  00000000  00000000  0005b202  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0010d706  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001378  00000000  00000000  0010d784  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001ad4 	.word	0x08001ad4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001ad4 	.word	0x08001ad4

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	2100      	movs	r1, #0
{
 80001d8:	b0a7      	sub	sp, #156	; 0x9c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001da:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001dc:	2224      	movs	r2, #36	; 0x24
 80001de:	a807      	add	r0, sp, #28
 80001e0:	f001 fc70 	bl	8001ac4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e4:	4621      	mov	r1, r4
 80001e6:	a810      	add	r0, sp, #64	; 0x40
 80001e8:	2258      	movs	r2, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ea:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80001ee:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80001f2:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f4:	f001 fc66 	bl	8001ac4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f8:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001fa:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fc:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80001fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000202:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000206:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800020a:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020e:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000210:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000212:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f000 fb60 	bl	80008d8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000218:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021e:	4629      	mov	r1, r5
 8000220:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000222:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000224:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000226:	e9cd 5402 	strd	r5, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022a:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022c:	f000 fe3a 	bl	8000ea4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000230:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000232:	9510      	str	r5, [sp, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000234:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000236:	f000 ff6d 	bl	8001114 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800023a:	b027      	add	sp, #156	; 0x9c
 800023c:	bd30      	pop	{r4, r5, pc}
 800023e:	bf00      	nop

08000240 <main>:
{
 8000240:	b580      	push	{r7, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000242:	2400      	movs	r4, #0
{
 8000244:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8000246:	f000 f995 	bl	8000574 <HAL_Init>
  SystemClock_Config();
 800024a:	f7ff ffc3 	bl	80001d4 <SystemClock_Config>
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800024e:	e9cd 4406 	strd	r4, r4, [sp, #24]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000252:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000256:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800025a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800025e:	4b48      	ldr	r3, [pc, #288]	; (8000380 <main+0x140>)
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000260:	4d48      	ldr	r5, [pc, #288]	; (8000384 <main+0x144>)
 8000262:	695a      	ldr	r2, [r3, #20]
 8000264:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000268:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800026a:	695a      	ldr	r2, [r3, #20]
 800026c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000270:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000272:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000274:	695a      	ldr	r2, [r3, #20]
 8000276:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800027a:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800027c:	695a      	ldr	r2, [r3, #20]
 800027e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000282:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000284:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHBENR, Periphs);
 8000286:	695a      	ldr	r2, [r3, #20]
 8000288:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800028c:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800028e:	695a      	ldr	r2, [r3, #20]
 8000290:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000294:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000296:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHBENR, Periphs);
 8000298:	695a      	ldr	r2, [r3, #20]
 800029a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800029e:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002a0:	695b      	ldr	r3, [r3, #20]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80002a2:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 80002a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80002aa:	9304      	str	r3, [sp, #16]
 80002ac:	2620      	movs	r6, #32
  (void)tmpreg;
 80002ae:	9b04      	ldr	r3, [sp, #16]
 80002b0:	62be      	str	r6, [r7, #40]	; 0x28
 80002b2:	696a      	ldr	r2, [r5, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002b4:	23f0      	movs	r3, #240	; 0xf0
 80002b6:	fa93 f3a3 	rbit	r3, r3
 80002ba:	2102      	movs	r1, #2
 80002bc:	fab3 f383 	clz	r3, r3
 80002c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80002c4:	fa01 f303 	lsl.w	r3, r1, r3
 80002c8:	4313      	orrs	r3, r2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002ca:	482f      	ldr	r0, [pc, #188]	; (8000388 <main+0x148>)
 80002cc:	616b      	str	r3, [r5, #20]
 80002ce:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80002d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002d6:	fa92 f3a2 	rbit	r3, r2
 80002da:	fab3 f383 	clz	r3, r3
 80002de:	2503      	movs	r5, #3
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	fa05 f303 	lsl.w	r3, r5, r3
 80002e6:	ea2c 0303 	bic.w	r3, ip, r3
 80002ea:	fa92 fca2 	rbit	ip, r2
 80002ee:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80002f0:	f8d0 c000 	ldr.w	ip, [r0]
 80002f4:	fa92 f3a2 	rbit	r3, r2
 80002f8:	fab3 f383 	clz	r3, r3
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	fa05 f303 	lsl.w	r3, r5, r3
 8000302:	ea2c 0303 	bic.w	r3, ip, r3
 8000306:	fa92 fca2 	rbit	ip, r2
  hdac1.Instance = DAC1;
 800030a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8000398 <main+0x158>
 800030e:	6003      	str	r3, [r0, #0]
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
  EXTI_InitStruct.LineCommand = ENABLE;
 8000310:	f04f 0901 	mov.w	r9, #1
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
  LL_EXTI_Init(&EXTI_InitStruct);
 8000314:	a805      	add	r0, sp, #20
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000316:	9205      	str	r2, [sp, #20]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000318:	f88d 101e 	strb.w	r1, [sp, #30]
  EXTI_InitStruct.LineCommand = ENABLE;
 800031c:	f88d 901c 	strb.w	r9, [sp, #28]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000320:	f001 fa56 	bl	80017d0 <LL_EXTI_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000324:	eb0d 0106 	add.w	r1, sp, r6
 8000328:	4638      	mov	r0, r7
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800032a:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800032e:	e9cd 6908 	strd	r6, r9, [sp, #32]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000332:	940c      	str	r4, [sp, #48]	; 0x30
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000334:	f001 faf6 	bl	8001924 <LL_GPIO_Init>
  hdac1.Instance = DAC1;
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <main+0x14c>)
 800033a:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800033e:	4640      	mov	r0, r8
  DAC_ChannelConfTypeDef sConfig = {0};
 8000340:	9408      	str	r4, [sp, #32]
 8000342:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000346:	f000 f99b 	bl	8000680 <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800034a:	eb0d 0106 	add.w	r1, sp, r6
 800034e:	4622      	mov	r2, r4
 8000350:	4640      	mov	r0, r8
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000352:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000356:	f000 f9a9 	bl	80006ac <HAL_DAC_ConfigChannel>
  huart2.Instance = USART2;
 800035a:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <main+0x150>)
 800035c:	4d0d      	ldr	r5, [pc, #52]	; (8000394 <main+0x154>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800035e:	609c      	str	r4, [r3, #8]
  huart2.Init.BaudRate = 38400;
 8000360:	f44f 4116 	mov.w	r1, #38400	; 0x9600
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000364:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000366:	4618      	mov	r0, r3
  huart2.Init.Parity = UART_PARITY_NONE;
 8000368:	e9c3 4403 	strd	r4, r4, [r3, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	e9c3 4406 	strd	r4, r4, [r3, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000370:	e9c3 4408 	strd	r4, r4, [r3, #32]
  huart2.Init.BaudRate = 38400;
 8000374:	e9c3 5100 	strd	r5, r1, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000378:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800037a:	f001 f871 	bl	8001460 <HAL_UART_Init>
 800037e:	e7fe      	b.n	800037e <main+0x13e>
 8000380:	40021000 	.word	0x40021000
 8000384:	40010000 	.word	0x40010000
 8000388:	48000800 	.word	0x48000800
 800038c:	40007400 	.word	0x40007400
 8000390:	2000003c 	.word	0x2000003c
 8000394:	40004400 	.word	0x40004400
 8000398:	20000028 	.word	0x20000028

0800039c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <HAL_MspInit+0x2c>)
 800039e:	699a      	ldr	r2, [r3, #24]
 80003a0:	f042 0201 	orr.w	r2, r2, #1
 80003a4:	619a      	str	r2, [r3, #24]
 80003a6:	699a      	ldr	r2, [r3, #24]
{
 80003a8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003aa:	f002 0201 	and.w	r2, r2, #1
 80003ae:	9200      	str	r2, [sp, #0]
 80003b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b2:	69da      	ldr	r2, [r3, #28]
 80003b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003b8:	61da      	str	r2, [r3, #28]
 80003ba:	69db      	ldr	r3, [r3, #28]
 80003bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c4:	b002      	add	sp, #8
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000

080003cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80003cc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 80003ce:	6801      	ldr	r1, [r0, #0]
 80003d0:	4a16      	ldr	r2, [pc, #88]	; (800042c <HAL_DAC_MspInit+0x60>)
{
 80003d2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 80003d6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80003dc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80003e0:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC1)
 80003e2:	d001      	beq.n	80003e8 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80003e4:	b008      	add	sp, #32
 80003e6:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 80003e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80003ec:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f0:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 80003f2:	69da      	ldr	r2, [r3, #28]
 80003f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80003f8:	61da      	str	r2, [r3, #28]
 80003fa:	69da      	ldr	r2, [r3, #28]
 80003fc:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000400:	9201      	str	r2, [sp, #4]
 8000402:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	695a      	ldr	r2, [r3, #20]
 8000406:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800040a:	615a      	str	r2, [r3, #20]
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000412:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000414:	2210      	movs	r2, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000416:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800041c:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800041e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	f000 f967 	bl	80006f4 <HAL_GPIO_Init>
}
 8000426:	b008      	add	sp, #32
 8000428:	bd10      	pop	{r4, pc}
 800042a:	bf00      	nop
 800042c:	40007400 	.word	0x40007400

08000430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000430:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8000432:	6801      	ldr	r1, [r0, #0]
 8000434:	4a17      	ldr	r2, [pc, #92]	; (8000494 <HAL_UART_MspInit+0x64>)
{
 8000436:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000438:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 800043a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000440:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000444:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8000446:	d001      	beq.n	800044c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000448:	b009      	add	sp, #36	; 0x24
 800044a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800044c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000450:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000454:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8000456:	69da      	ldr	r2, [r3, #28]
 8000458:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800045c:	61da      	str	r2, [r3, #28]
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000464:	9201      	str	r2, [sp, #4]
 8000466:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000476:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000478:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800047a:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800047c:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000484:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000486:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048a:	f000 f933 	bl	80006f4 <HAL_GPIO_Init>
}
 800048e:	b009      	add	sp, #36	; 0x24
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop
 8000494:	40004400 	.word	0x40004400

08000498 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop

0800049c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049c:	e7fe      	b.n	800049c <HardFault_Handler>
 800049e:	bf00      	nop

080004a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a0:	e7fe      	b.n	80004a0 <MemManage_Handler>
 80004a2:	bf00      	nop

080004a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a4:	e7fe      	b.n	80004a4 <BusFault_Handler>
 80004a6:	bf00      	nop

080004a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a8:	e7fe      	b.n	80004a8 <UsageFault_Handler>
 80004aa:	bf00      	nop

080004ac <SVC_Handler>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <DebugMon_Handler>:
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop

080004b4 <PendSV_Handler>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b8:	f000 b86e 	b.w	8000598 <HAL_IncTick>

080004bc <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <SystemInit+0x18>)
 80004be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80004ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004ce:	6099      	str	r1, [r3, #8]
#endif
}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000510 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004de:	e003      	b.n	80004e8 <LoopCopyDataInit>

080004e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004e6:	3104      	adds	r1, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <LoopForever+0xa>)
	ldr	r3, =_edata
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <LoopForever+0xe>)
	adds	r2, r0, r1
 80004ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80004ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80004f0:	d3f6      	bcc.n	80004e0 <CopyDataInit>
	ldr	r2, =_sbss
 80004f2:	4a0b      	ldr	r2, [pc, #44]	; (8000520 <LoopForever+0x12>)
	b	LoopFillZerobss
 80004f4:	e002      	b.n	80004fc <LoopFillZerobss>

080004f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80004f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80004f8:	f842 3b04 	str.w	r3, [r2], #4

080004fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <LoopForever+0x16>)
	cmp	r2, r3
 80004fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000500:	d3f9      	bcc.n	80004f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000502:	f7ff ffdb 	bl	80004bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000506:	f001 fab9 	bl	8001a7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800050a:	f7ff fe99 	bl	8000240 <main>

0800050e <LoopForever>:

LoopForever:
    b LoopForever
 800050e:	e7fe      	b.n	800050e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000510:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000514:	08001b30 	.word	0x08001b30
	ldr	r0, =_sdata
 8000518:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800051c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000520:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000524:	200000c0 	.word	0x200000c0

08000528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC1_2_IRQHandler>
	...

0800052c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800052c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <HAL_InitTick+0x3c>)
 8000530:	4b0e      	ldr	r3, [pc, #56]	; (800056c <HAL_InitTick+0x40>)
 8000532:	7812      	ldrb	r2, [r2, #0]
 8000534:	681b      	ldr	r3, [r3, #0]
{
 8000536:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053c:	fbb0 f0f2 	udiv	r0, r0, r2
 8000540:	fbb3 f0f0 	udiv	r0, r3, r0
 8000544:	f000 f882 	bl	800064c <HAL_SYSTICK_Config>
 8000548:	b908      	cbnz	r0, 800054e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	2d0f      	cmp	r5, #15
 800054c:	d901      	bls.n	8000552 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800054e:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000550:	bd38      	pop	{r3, r4, r5, pc}
 8000552:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000554:	4602      	mov	r2, r0
 8000556:	4629      	mov	r1, r5
 8000558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800055c:	f000 f840 	bl	80005e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_InitTick+0x44>)
 8000562:	4620      	mov	r0, r4
 8000564:	601d      	str	r5, [r3, #0]
}
 8000566:	bd38      	pop	{r3, r4, r5, pc}
 8000568:	20000004 	.word	0x20000004
 800056c:	20000000 	.word	0x20000000
 8000570:	20000008 	.word	0x20000008

08000574 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000574:	4a07      	ldr	r2, [pc, #28]	; (8000594 <HAL_Init+0x20>)
{
 8000576:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000578:	6813      	ldr	r3, [r2, #0]
 800057a:	f043 0310 	orr.w	r3, r3, #16
 800057e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000580:	2003      	movs	r0, #3
 8000582:	f000 f81b 	bl	80005bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff ffd0 	bl	800052c <HAL_InitTick>
  HAL_MspInit();
 800058c:	f7ff ff06 	bl	800039c <HAL_MspInit>
}
 8000590:	2000      	movs	r0, #0
 8000592:	bd08      	pop	{r3, pc}
 8000594:	40022000 	.word	0x40022000

08000598 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000598:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <HAL_IncTick+0x10>)
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <HAL_IncTick+0x14>)
 800059c:	6811      	ldr	r1, [r2, #0]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	440b      	add	r3, r1
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	200000bc 	.word	0x200000bc
 80005ac:	20000004 	.word	0x20000004

080005b0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80005b0:	4b01      	ldr	r3, [pc, #4]	; (80005b8 <HAL_GetTick+0x8>)
 80005b2:	6818      	ldr	r0, [r3, #0]
}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200000bc 	.word	0x200000bc

080005bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005be:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80005c4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c6:	0200      	lsls	r0, r0, #8
 80005c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005cc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80005d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80005d4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005d6:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <HAL_NVIC_SetPriority+0x64>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005e8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ea:	f1c3 0507 	rsb	r5, r3, #7
 80005ee:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f4:	bf28      	it	cs
 80005f6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f8:	2c06      	cmp	r4, #6
 80005fa:	d919      	bls.n	8000630 <HAL_NVIC_SetPriority+0x50>
 80005fc:	3b03      	subs	r3, #3
 80005fe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000602:	409c      	lsls	r4, r3
 8000604:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800060c:	40aa      	lsls	r2, r5
 800060e:	ea21 0102 	bic.w	r1, r1, r2
 8000612:	fa01 f203 	lsl.w	r2, r1, r3
 8000616:	4322      	orrs	r2, r4
 8000618:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800061a:	2800      	cmp	r0, #0
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	db0a      	blt.n	8000636 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000624:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000628:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800062c:	bc30      	pop	{r4, r5}
 800062e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000630:	2400      	movs	r4, #0
 8000632:	4623      	mov	r3, r4
 8000634:	e7e8      	b.n	8000608 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <HAL_NVIC_SetPriority+0x68>)
 8000638:	f000 000f 	and.w	r0, r0, #15
 800063c:	4403      	add	r3, r0
 800063e:	761a      	strb	r2, [r3, #24]
 8000640:	bc30      	pop	{r4, r5}
 8000642:	4770      	bx	lr
 8000644:	e000ed00 	.word	0xe000ed00
 8000648:	e000ecfc 	.word	0xe000ecfc

0800064c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800064c:	3801      	subs	r0, #1
 800064e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000652:	d20e      	bcs.n	8000672 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000656:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	4c08      	ldr	r4, [pc, #32]	; (800067c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800065a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	20f0      	movs	r0, #240	; 0xf0
 800065e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000662:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000664:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000666:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800066c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000670:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000672:	2001      	movs	r0, #1
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e010 	.word	0xe000e010
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8000680:	b188      	cbz	r0, 80006a6 <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000682:	7903      	ldrb	r3, [r0, #4]
{ 
 8000684:	b510      	push	{r4, lr}
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000686:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800068a:	4604      	mov	r4, r0
 800068c:	b13b      	cbz	r3, 800069e <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800068e:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8000690:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000692:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8000694:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8000696:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000698:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800069a:	7122      	strb	r2, [r4, #4]
}
 800069c:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800069e:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80006a0:	f7ff fe94 	bl	80003cc <HAL_DAC_MspInit>
 80006a4:	e7f3      	b.n	800068e <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 80006a6:	2001      	movs	r0, #1
}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80006ac:	7943      	ldrb	r3, [r0, #5]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d01d      	beq.n	80006ee <HAL_DAC_ConfigChannel+0x42>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80006b2:	2302      	movs	r3, #2
{
 80006b4:	b470      	push	{r4, r5, r6}
  hdac->State = HAL_DAC_STATE_BUSY;
 80006b6:	7103      	strb	r3, [r0, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80006b8:	6804      	ldr	r4, [r0, #0]
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80006ba:	e9d1 3600 	ldrd	r3, r6, [r1]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80006be:	f640 75fe 	movw	r5, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 80006c2:	6821      	ldr	r1, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80006c4:	4095      	lsls	r5, r2
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80006c6:	4333      	orrs	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80006c8:	ea21 0105 	bic.w	r1, r1, r5
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80006cc:	4093      	lsls	r3, r2
 80006ce:	430b      	orrs	r3, r1
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80006d0:	6023      	str	r3, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80006d2:	6823      	ldr	r3, [r4, #0]
 80006d4:	21c0      	movs	r1, #192	; 0xc0
 80006d6:	fa01 f202 	lsl.w	r2, r1, r2
 80006da:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80006de:	2101      	movs	r1, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80006e0:	2300      	movs	r3, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80006e2:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80006e4:	7101      	strb	r1, [r0, #4]
  __HAL_UNLOCK(hdac);
 80006e6:	7143      	strb	r3, [r0, #5]
  
  /* Return function status */
  return HAL_OK;
}
 80006e8:	bc70      	pop	{r4, r5, r6}
 80006ea:	4618      	mov	r0, r3
 80006ec:	4770      	bx	lr
  __HAL_LOCK(hdac);
 80006ee:	2202      	movs	r2, #2
}
 80006f0:	4610      	mov	r0, r2
 80006f2:	4770      	bx	lr

080006f4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006f4:	f8d1 c000 	ldr.w	ip, [r1]
 80006f8:	f1bc 0f00 	cmp.w	ip, #0
 80006fc:	f000 80d0 	beq.w	80008a0 <HAL_GPIO_Init+0x1ac>
{
 8000700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000704:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 80008d4 <HAL_GPIO_Init+0x1e0>
{
 8000708:	b083      	sub	sp, #12
 800070a:	4688      	mov	r8, r1
  uint32_t position = 0x00u;
 800070c:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800070e:	f04f 0901 	mov.w	r9, #1
 8000712:	fa09 f205 	lsl.w	r2, r9, r5
    if (iocurrent != 0x00u)
 8000716:	ea12 060c 	ands.w	r6, r2, ip
 800071a:	d077      	beq.n	800080c <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800071c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8000720:	f021 0a10 	bic.w	sl, r1, #16
 8000724:	f1ba 0f02 	cmp.w	sl, #2
 8000728:	d078      	beq.n	800081c <HAL_GPIO_Init+0x128>
 800072a:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800072c:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 800072e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000732:	40bb      	lsls	r3, r7
 8000734:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000736:	f001 0403 	and.w	r4, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800073a:	ea03 0b0b 	and.w	fp, r3, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800073e:	40bc      	lsls	r4, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000740:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000744:	ea44 040b 	orr.w	r4, r4, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000748:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 800074c:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800074e:	f240 8086 	bls.w	800085e <HAL_GPIO_Init+0x16a>
      temp = GPIOx->PUPDR;
 8000752:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000754:	f8d8 2008 	ldr.w	r2, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000758:	4023      	ands	r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800075a:	40ba      	lsls	r2, r7
 800075c:	431a      	orrs	r2, r3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800075e:	00cf      	lsls	r7, r1, #3
      GPIOx->PUPDR = temp;
 8000760:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000762:	d553      	bpl.n	800080c <HAL_GPIO_Init+0x118>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000764:	4a54      	ldr	r2, [pc, #336]	; (80008b8 <HAL_GPIO_Init+0x1c4>)
 8000766:	6993      	ldr	r3, [r2, #24]
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6193      	str	r3, [r2, #24]
 800076e:	6993      	ldr	r3, [r2, #24]
 8000770:	f025 0403 	bic.w	r4, r5, #3
 8000774:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8000780:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000782:	f005 0203 	and.w	r2, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000788:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800078a:	0092      	lsls	r2, r2, #2
 800078c:	230f      	movs	r3, #15
 800078e:	4093      	lsls	r3, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000790:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000794:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000798:	d016      	beq.n	80007c8 <HAL_GPIO_Init+0xd4>
 800079a:	4f48      	ldr	r7, [pc, #288]	; (80008bc <HAL_GPIO_Init+0x1c8>)
 800079c:	42b8      	cmp	r0, r7
 800079e:	d076      	beq.n	800088e <HAL_GPIO_Init+0x19a>
 80007a0:	4f47      	ldr	r7, [pc, #284]	; (80008c0 <HAL_GPIO_Init+0x1cc>)
 80007a2:	42b8      	cmp	r0, r7
 80007a4:	d06e      	beq.n	8000884 <HAL_GPIO_Init+0x190>
 80007a6:	4f47      	ldr	r7, [pc, #284]	; (80008c4 <HAL_GPIO_Init+0x1d0>)
 80007a8:	42b8      	cmp	r0, r7
 80007aa:	d07a      	beq.n	80008a2 <HAL_GPIO_Init+0x1ae>
 80007ac:	4f46      	ldr	r7, [pc, #280]	; (80008c8 <HAL_GPIO_Init+0x1d4>)
 80007ae:	42b8      	cmp	r0, r7
 80007b0:	d07c      	beq.n	80008ac <HAL_GPIO_Init+0x1b8>
 80007b2:	4f46      	ldr	r7, [pc, #280]	; (80008cc <HAL_GPIO_Init+0x1d8>)
 80007b4:	42b8      	cmp	r0, r7
 80007b6:	d06e      	beq.n	8000896 <HAL_GPIO_Init+0x1a2>
 80007b8:	4f45      	ldr	r7, [pc, #276]	; (80008d0 <HAL_GPIO_Init+0x1dc>)
 80007ba:	42b8      	cmp	r0, r7
 80007bc:	bf0c      	ite	eq
 80007be:	2706      	moveq	r7, #6
 80007c0:	2707      	movne	r7, #7
 80007c2:	fa07 f202 	lsl.w	r2, r7, r2
 80007c6:	4313      	orrs	r3, r2
        SYSCFG->EXTICR[position >> 2u] = temp;
 80007c8:	60a3      	str	r3, [r4, #8]
        temp = EXTI->IMR;
 80007ca:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~(iocurrent);
 80007ce:	43f2      	mvns	r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007d0:	03cc      	lsls	r4, r1, #15
        temp &= ~(iocurrent);
 80007d2:	bf54      	ite	pl
 80007d4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80007d6:	4333      	orrmi	r3, r6
        }
        EXTI->IMR = temp;
 80007d8:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80007dc:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007e0:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 80007e2:	bf54      	ite	pl
 80007e4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80007e6:	4333      	orrmi	r3, r6
        }
        EXTI->EMR = temp;
 80007e8:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007ec:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007f0:	02cc      	lsls	r4, r1, #11
        temp &= ~(iocurrent);
 80007f2:	bf54      	ite	pl
 80007f4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 80007f6:	4333      	orrmi	r3, r6
        }
        EXTI->RTSR = temp;
 80007f8:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80007fc:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000800:	0289      	lsls	r1, r1, #10
        temp &= ~(iocurrent);
 8000802:	bf54      	ite	pl
 8000804:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8000806:	4333      	orrmi	r3, r6
        }
        EXTI->FTSR = temp;
 8000808:	f8ce 300c 	str.w	r3, [lr, #12]
      }
    }

    position++;
 800080c:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080e:	fa3c f305 	lsrs.w	r3, ip, r5
 8000812:	f47f af7e 	bne.w	8000712 <HAL_GPIO_Init+0x1e>
  }
}
 8000816:	b003      	add	sp, #12
 8000818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3u];
 800081c:	08ef      	lsrs	r7, r5, #3
 800081e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000822:	f005 0407 	and.w	r4, r5, #7
        temp = GPIOx->AFR[position >> 3u];
 8000826:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000828:	00a4      	lsls	r4, r4, #2
 800082a:	f04f 0b0f 	mov.w	fp, #15
 800082e:	fa0b fb04 	lsl.w	fp, fp, r4
 8000832:	ea23 0a0b 	bic.w	sl, r3, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000836:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800083a:	40a3      	lsls	r3, r4
 800083c:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 8000840:	623b      	str	r3, [r7, #32]
 8000842:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000844:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
 8000846:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800084a:	40bb      	lsls	r3, r7
 800084c:	43db      	mvns	r3, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800084e:	f001 0403 	and.w	r4, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000852:	ea03 0a0a 	and.w	sl, r3, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000856:	40bc      	lsls	r4, r7
 8000858:	ea44 040a 	orr.w	r4, r4, sl
      GPIOx->MODER = temp;
 800085c:	6004      	str	r4, [r0, #0]
        temp = GPIOx->OSPEEDR;
 800085e:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000860:	ea03 0a04 	and.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000864:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8000868:	40bc      	lsls	r4, r7
 800086a:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->OSPEEDR = temp;
 800086e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000870:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000874:	f3c1 1400 	ubfx	r4, r1, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000878:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800087c:	40ac      	lsls	r4, r5
 800087e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8000880:	6044      	str	r4, [r0, #4]
 8000882:	e766      	b.n	8000752 <HAL_GPIO_Init+0x5e>
 8000884:	2702      	movs	r7, #2
 8000886:	fa07 f202 	lsl.w	r2, r7, r2
 800088a:	4313      	orrs	r3, r2
 800088c:	e79c      	b.n	80007c8 <HAL_GPIO_Init+0xd4>
 800088e:	fa09 f202 	lsl.w	r2, r9, r2
 8000892:	4313      	orrs	r3, r2
 8000894:	e798      	b.n	80007c8 <HAL_GPIO_Init+0xd4>
 8000896:	2705      	movs	r7, #5
 8000898:	fa07 f202 	lsl.w	r2, r7, r2
 800089c:	4313      	orrs	r3, r2
 800089e:	e793      	b.n	80007c8 <HAL_GPIO_Init+0xd4>
 80008a0:	4770      	bx	lr
 80008a2:	2703      	movs	r7, #3
 80008a4:	fa07 f202 	lsl.w	r2, r7, r2
 80008a8:	4313      	orrs	r3, r2
 80008aa:	e78d      	b.n	80007c8 <HAL_GPIO_Init+0xd4>
 80008ac:	2704      	movs	r7, #4
 80008ae:	fa07 f202 	lsl.w	r2, r7, r2
 80008b2:	4313      	orrs	r3, r2
 80008b4:	e788      	b.n	80007c8 <HAL_GPIO_Init+0xd4>
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000
 80008bc:	48000400 	.word	0x48000400
 80008c0:	48000800 	.word	0x48000800
 80008c4:	48000c00 	.word	0x48000c00
 80008c8:	48001000 	.word	0x48001000
 80008cc:	48001400 	.word	0x48001400
 80008d0:	48001800 	.word	0x48001800
 80008d4:	40010400 	.word	0x40010400

080008d8 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008d8:	2800      	cmp	r0, #0
 80008da:	f000 81d6 	beq.w	8000c8a <HAL_RCC_OscConfig+0x3b2>
{
 80008de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008e2:	6803      	ldr	r3, [r0, #0]
 80008e4:	07df      	lsls	r7, r3, #31
{
 80008e6:	b083      	sub	sp, #12
 80008e8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008ea:	d542      	bpl.n	8000972 <HAL_RCC_OscConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008ec:	49c1      	ldr	r1, [pc, #772]	; (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 80008ee:	684a      	ldr	r2, [r1, #4]
 80008f0:	f002 020c 	and.w	r2, r2, #12
 80008f4:	2a04      	cmp	r2, #4
 80008f6:	f000 8166 	beq.w	8000bc6 <HAL_RCC_OscConfig+0x2ee>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008fa:	684a      	ldr	r2, [r1, #4]
 80008fc:	f002 020c 	and.w	r2, r2, #12
 8000900:	2a08      	cmp	r2, #8
 8000902:	f000 8159 	beq.w	8000bb8 <HAL_RCC_OscConfig+0x2e0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000906:	6863      	ldr	r3, [r4, #4]
 8000908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800090c:	d010      	beq.n	8000930 <HAL_RCC_OscConfig+0x58>
 800090e:	2b00      	cmp	r3, #0
 8000910:	f000 8198 	beq.w	8000c44 <HAL_RCC_OscConfig+0x36c>
 8000914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000918:	f000 823a 	beq.w	8000d90 <HAL_RCC_OscConfig+0x4b8>
 800091c:	4bb5      	ldr	r3, [pc, #724]	; (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	e004      	b.n	800093a <HAL_RCC_OscConfig+0x62>
 8000930:	4ab0      	ldr	r2, [pc, #704]	; (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000932:	6813      	ldr	r3, [r2, #0]
 8000934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000938:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800093a:	f7ff fe39 	bl	80005b0 <HAL_GetTick>
 800093e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8000942:	4607      	mov	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000944:	4eab      	ldr	r6, [pc, #684]	; (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000946:	2501      	movs	r5, #1
 8000948:	e005      	b.n	8000956 <HAL_RCC_OscConfig+0x7e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800094a:	f7ff fe31 	bl	80005b0 <HAL_GetTick>
 800094e:	1bc0      	subs	r0, r0, r7
 8000950:	2864      	cmp	r0, #100	; 0x64
 8000952:	f200 8165 	bhi.w	8000c20 <HAL_RCC_OscConfig+0x348>
 8000956:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800095a:	6832      	ldr	r2, [r6, #0]
 800095c:	fa98 f3a8 	rbit	r3, r8
 8000960:	fab3 f383 	clz	r3, r3
 8000964:	f003 031f 	and.w	r3, r3, #31
 8000968:	fa05 f303 	lsl.w	r3, r5, r3
 800096c:	4213      	tst	r3, r2
 800096e:	d0ec      	beq.n	800094a <HAL_RCC_OscConfig+0x72>
 8000970:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000972:	079e      	lsls	r6, r3, #30
 8000974:	d459      	bmi.n	8000a2a <HAL_RCC_OscConfig+0x152>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000976:	071d      	lsls	r5, r3, #28
 8000978:	d52c      	bpl.n	80009d4 <HAL_RCC_OscConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800097a:	6962      	ldr	r2, [r4, #20]
 800097c:	2a00      	cmp	r2, #0
 800097e:	f000 80f4 	beq.w	8000b6a <HAL_RCC_OscConfig+0x292>
 8000982:	2201      	movs	r2, #1
 8000984:	fa92 f1a2 	rbit	r1, r2
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000988:	4b9b      	ldr	r3, [pc, #620]	; (8000bf8 <HAL_RCC_OscConfig+0x320>)
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800098a:	4e9a      	ldr	r6, [pc, #616]	; (8000bf4 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_ENABLE();
 800098c:	fab1 f181 	clz	r1, r1
 8000990:	440b      	add	r3, r1
 8000992:	009b      	lsls	r3, r3, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000994:	4615      	mov	r5, r2
      __HAL_RCC_LSI_ENABLE();
 8000996:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000998:	f7ff fe0a 	bl	80005b0 <HAL_GetTick>
 800099c:	f04f 0802 	mov.w	r8, #2
 80009a0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009a2:	e005      	b.n	80009b0 <HAL_RCC_OscConfig+0xd8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009a4:	f7ff fe04 	bl	80005b0 <HAL_GetTick>
 80009a8:	1bc0      	subs	r0, r0, r7
 80009aa:	2802      	cmp	r0, #2
 80009ac:	f200 8138 	bhi.w	8000c20 <HAL_RCC_OscConfig+0x348>
 80009b0:	fa98 f3a8 	rbit	r3, r8
 80009b4:	fa98 f3a8 	rbit	r3, r8
 80009b8:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009bc:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80009be:	fa98 f3a8 	rbit	r3, r8
 80009c2:	fab3 f383 	clz	r3, r3
 80009c6:	f003 031f 	and.w	r3, r3, #31
 80009ca:	fa05 f303 	lsl.w	r3, r5, r3
 80009ce:	4213      	tst	r3, r2
 80009d0:	d0e8      	beq.n	80009a4 <HAL_RCC_OscConfig+0xcc>
 80009d2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009d4:	0758      	lsls	r0, r3, #29
 80009d6:	d573      	bpl.n	8000ac0 <HAL_RCC_OscConfig+0x1e8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009d8:	4b86      	ldr	r3, [pc, #536]	; (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 80009da:	69da      	ldr	r2, [r3, #28]
 80009dc:	00d1      	lsls	r1, r2, #3
 80009de:	f100 8156 	bmi.w	8000c8e <HAL_RCC_OscConfig+0x3b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	69da      	ldr	r2, [r3, #28]
 80009e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009e8:	61da      	str	r2, [r3, #28]
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009f4:	f04f 0801 	mov.w	r8, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f8:	4d80      	ldr	r5, [pc, #512]	; (8000bfc <HAL_RCC_OscConfig+0x324>)
 80009fa:	682a      	ldr	r2, [r5, #0]
 80009fc:	05d2      	lsls	r2, r2, #23
 80009fe:	f140 80ff 	bpl.w	8000c00 <HAL_RCC_OscConfig+0x328>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a02:	68a3      	ldr	r3, [r4, #8]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	f000 8198 	beq.w	8000d3a <HAL_RCC_OscConfig+0x462>
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f000 8142 	beq.w	8000c94 <HAL_RCC_OscConfig+0x3bc>
 8000a10:	2b05      	cmp	r3, #5
 8000a12:	4b78      	ldr	r3, [pc, #480]	; (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000a14:	6a1a      	ldr	r2, [r3, #32]
 8000a16:	f000 81c8 	beq.w	8000daa <HAL_RCC_OscConfig+0x4d2>
 8000a1a:	f022 0201 	bic.w	r2, r2, #1
 8000a1e:	621a      	str	r2, [r3, #32]
 8000a20:	6a1a      	ldr	r2, [r3, #32]
 8000a22:	f022 0204 	bic.w	r2, r2, #4
 8000a26:	621a      	str	r2, [r3, #32]
 8000a28:	e18c      	b.n	8000d44 <HAL_RCC_OscConfig+0x46c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a2a:	4a72      	ldr	r2, [pc, #456]	; (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000a2c:	6851      	ldr	r1, [r2, #4]
 8000a2e:	f011 0f0c 	tst.w	r1, #12
 8000a32:	f000 8083 	beq.w	8000b3c <HAL_RCC_OscConfig+0x264>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a36:	6851      	ldr	r1, [r2, #4]
 8000a38:	f001 010c 	and.w	r1, r1, #12
 8000a3c:	2908      	cmp	r1, #8
 8000a3e:	d077      	beq.n	8000b30 <HAL_RCC_OscConfig+0x258>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a40:	68e2      	ldr	r2, [r4, #12]
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	f000 8153 	beq.w	8000cee <HAL_RCC_OscConfig+0x416>
 8000a48:	2201      	movs	r2, #1
 8000a4a:	fa92 f3a2 	rbit	r3, r2
        __HAL_RCC_HSI_ENABLE();
 8000a4e:	fab3 f383 	clz	r3, r3
 8000a52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a5a:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a5c:	4616      	mov	r6, r2
        __HAL_RCC_HSI_ENABLE();
 8000a5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a60:	f7ff fda6 	bl	80005b0 <HAL_GetTick>
 8000a64:	f04f 0802 	mov.w	r8, #2
 8000a68:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a6a:	4d62      	ldr	r5, [pc, #392]	; (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000a6c:	e005      	b.n	8000a7a <HAL_RCC_OscConfig+0x1a2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a6e:	f7ff fd9f 	bl	80005b0 <HAL_GetTick>
 8000a72:	1bc0      	subs	r0, r0, r7
 8000a74:	2802      	cmp	r0, #2
 8000a76:	f200 80d3 	bhi.w	8000c20 <HAL_RCC_OscConfig+0x348>
 8000a7a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a7e:	682a      	ldr	r2, [r5, #0]
 8000a80:	fa98 f3a8 	rbit	r3, r8
 8000a84:	fab3 f383 	clz	r3, r3
 8000a88:	f003 031f 	and.w	r3, r3, #31
 8000a8c:	fa06 f303 	lsl.w	r3, r6, r3
 8000a90:	4213      	tst	r3, r2
 8000a92:	d0ec      	beq.n	8000a6e <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a94:	6829      	ldr	r1, [r5, #0]
 8000a96:	22f8      	movs	r2, #248	; 0xf8
 8000a98:	fa92 f2a2 	rbit	r2, r2
 8000a9c:	6923      	ldr	r3, [r4, #16]
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8000aa6:	4093      	lsls	r3, r2
 8000aa8:	430b      	orrs	r3, r1
 8000aaa:	602b      	str	r3, [r5, #0]
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	e762      	b.n	8000976 <HAL_RCC_OscConfig+0x9e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ab0:	f1b8 0f00 	cmp.w	r8, #0
 8000ab4:	d004      	beq.n	8000ac0 <HAL_RCC_OscConfig+0x1e8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ab6:	4a4f      	ldr	r2, [pc, #316]	; (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000ab8:	69d3      	ldr	r3, [r2, #28]
 8000aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000abe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ac0:	69a0      	ldr	r0, [r4, #24]
 8000ac2:	b388      	cbz	r0, 8000b28 <HAL_RCC_OscConfig+0x250>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ac4:	4d4b      	ldr	r5, [pc, #300]	; (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000ac6:	686b      	ldr	r3, [r5, #4]
 8000ac8:	f003 030c 	and.w	r3, r3, #12
 8000acc:	2b08      	cmp	r3, #8
 8000ace:	f000 8174 	beq.w	8000dba <HAL_RCC_OscConfig+0x4e2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ad2:	2802      	cmp	r0, #2
 8000ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ad8:	f000 8187 	beq.w	8000dea <HAL_RCC_OscConfig+0x512>
 8000adc:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ae0:	fab3 f383 	clz	r3, r3
 8000ae4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ae8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af2:	f7ff fd5d 	bl	80005b0 <HAL_GetTick>
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000af6:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8000af8:	4607      	mov	r7, r0
 8000afa:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000afe:	2601      	movs	r6, #1
 8000b00:	e005      	b.n	8000b0e <HAL_RCC_OscConfig+0x236>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b02:	f7ff fd55 	bl	80005b0 <HAL_GetTick>
 8000b06:	1bc0      	subs	r0, r0, r7
 8000b08:	2802      	cmp	r0, #2
 8000b0a:	f200 8089 	bhi.w	8000c20 <HAL_RCC_OscConfig+0x348>
 8000b0e:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b12:	6822      	ldr	r2, [r4, #0]
 8000b14:	fa95 f3a5 	rbit	r3, r5
 8000b18:	fab3 f383 	clz	r3, r3
 8000b1c:	f003 031f 	and.w	r3, r3, #31
 8000b20:	fa06 f303 	lsl.w	r3, r6, r3
 8000b24:	4213      	tst	r3, r2
 8000b26:	d1ec      	bne.n	8000b02 <HAL_RCC_OscConfig+0x22a>
        }
      }
    }
  }

  return HAL_OK;
 8000b28:	2000      	movs	r0, #0
}
 8000b2a:	b003      	add	sp, #12
 8000b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b30:	6852      	ldr	r2, [r2, #4]
 8000b32:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8000b36:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000b3a:	d181      	bne.n	8000a40 <HAL_RCC_OscConfig+0x168>
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b42:	492c      	ldr	r1, [pc, #176]	; (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000b44:	6808      	ldr	r0, [r1, #0]
 8000b46:	fa92 f2a2 	rbit	r2, r2
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	f002 021f 	and.w	r2, r2, #31
 8000b52:	2101      	movs	r1, #1
 8000b54:	fa01 f202 	lsl.w	r2, r1, r2
 8000b58:	4202      	tst	r2, r0
 8000b5a:	d065      	beq.n	8000c28 <HAL_RCC_OscConfig+0x350>
 8000b5c:	68e2      	ldr	r2, [r4, #12]
 8000b5e:	428a      	cmp	r2, r1
 8000b60:	d062      	beq.n	8000c28 <HAL_RCC_OscConfig+0x350>
        return HAL_ERROR;
 8000b62:	2001      	movs	r0, #1
}
 8000b64:	b003      	add	sp, #12
 8000b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b6a:	2501      	movs	r5, #1
 8000b6c:	fa95 f1a5 	rbit	r1, r5
      __HAL_RCC_LSI_DISABLE();
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <HAL_RCC_OscConfig+0x320>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b72:	4e20      	ldr	r6, [pc, #128]	; (8000bf4 <HAL_RCC_OscConfig+0x31c>)
      __HAL_RCC_LSI_DISABLE();
 8000b74:	fab1 f181 	clz	r1, r1
 8000b78:	440b      	add	r3, r1
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	f04f 0802 	mov.w	r8, #2
 8000b80:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b82:	f7ff fd15 	bl	80005b0 <HAL_GetTick>
 8000b86:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b88:	e004      	b.n	8000b94 <HAL_RCC_OscConfig+0x2bc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b8a:	f7ff fd11 	bl	80005b0 <HAL_GetTick>
 8000b8e:	1bc0      	subs	r0, r0, r7
 8000b90:	2802      	cmp	r0, #2
 8000b92:	d845      	bhi.n	8000c20 <HAL_RCC_OscConfig+0x348>
 8000b94:	fa98 f3a8 	rbit	r3, r8
 8000b98:	fa98 f3a8 	rbit	r3, r8
 8000b9c:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ba0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000ba2:	fa98 f3a8 	rbit	r3, r8
 8000ba6:	fab3 f383 	clz	r3, r3
 8000baa:	f003 031f 	and.w	r3, r3, #31
 8000bae:	fa05 f303 	lsl.w	r3, r5, r3
 8000bb2:	4213      	tst	r3, r2
 8000bb4:	d1e9      	bne.n	8000b8a <HAL_RCC_OscConfig+0x2b2>
 8000bb6:	e70c      	b.n	80009d2 <HAL_RCC_OscConfig+0xfa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bb8:	684a      	ldr	r2, [r1, #4]
 8000bba:	f402 32c0 	and.w	r2, r2, #98304	; 0x18000
 8000bbe:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000bc2:	f47f aea0 	bne.w	8000906 <HAL_RCC_OscConfig+0x2e>
 8000bc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bca:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bce:	4909      	ldr	r1, [pc, #36]	; (8000bf4 <HAL_RCC_OscConfig+0x31c>)
 8000bd0:	6808      	ldr	r0, [r1, #0]
 8000bd2:	fa92 f2a2 	rbit	r2, r2
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	f002 021f 	and.w	r2, r2, #31
 8000bde:	2101      	movs	r1, #1
 8000be0:	fa01 f202 	lsl.w	r2, r1, r2
 8000be4:	4202      	tst	r2, r0
 8000be6:	f43f aec4 	beq.w	8000972 <HAL_RCC_OscConfig+0x9a>
 8000bea:	6862      	ldr	r2, [r4, #4]
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f47f aec0 	bne.w	8000972 <HAL_RCC_OscConfig+0x9a>
 8000bf2:	e7b6      	b.n	8000b62 <HAL_RCC_OscConfig+0x28a>
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	10908120 	.word	0x10908120
 8000bfc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c00:	682a      	ldr	r2, [r5, #0]
 8000c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c06:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8000c08:	f7ff fcd2 	bl	80005b0 <HAL_GetTick>
 8000c0c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c0e:	682b      	ldr	r3, [r5, #0]
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	f53f aef6 	bmi.w	8000a02 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c16:	f7ff fccb 	bl	80005b0 <HAL_GetTick>
 8000c1a:	1b80      	subs	r0, r0, r6
 8000c1c:	2864      	cmp	r0, #100	; 0x64
 8000c1e:	d9f6      	bls.n	8000c0e <HAL_RCC_OscConfig+0x336>
            return HAL_TIMEOUT;
 8000c20:	2003      	movs	r0, #3
}
 8000c22:	b003      	add	sp, #12
 8000c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c28:	4d9d      	ldr	r5, [pc, #628]	; (8000ea0 <HAL_RCC_OscConfig+0x5c8>)
 8000c2a:	21f8      	movs	r1, #248	; 0xf8
 8000c2c:	6828      	ldr	r0, [r5, #0]
 8000c2e:	fa91 f1a1 	rbit	r1, r1
 8000c32:	6922      	ldr	r2, [r4, #16]
 8000c34:	fab1 f181 	clz	r1, r1
 8000c38:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8000c3c:	408a      	lsls	r2, r1
 8000c3e:	4302      	orrs	r2, r0
 8000c40:	602a      	str	r2, [r5, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c42:	e698      	b.n	8000976 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c44:	4d96      	ldr	r5, [pc, #600]	; (8000ea0 <HAL_RCC_OscConfig+0x5c8>)
 8000c46:	682b      	ldr	r3, [r5, #0]
 8000c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4c:	602b      	str	r3, [r5, #0]
 8000c4e:	682b      	ldr	r3, [r5, #0]
 8000c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c54:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000c56:	f7ff fcab 	bl	80005b0 <HAL_GetTick>
 8000c5a:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8000c5e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c60:	2601      	movs	r6, #1
 8000c62:	e004      	b.n	8000c6e <HAL_RCC_OscConfig+0x396>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c64:	f7ff fca4 	bl	80005b0 <HAL_GetTick>
 8000c68:	1bc0      	subs	r0, r0, r7
 8000c6a:	2864      	cmp	r0, #100	; 0x64
 8000c6c:	d8d8      	bhi.n	8000c20 <HAL_RCC_OscConfig+0x348>
 8000c6e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c72:	682a      	ldr	r2, [r5, #0]
 8000c74:	fa98 f3a8 	rbit	r3, r8
 8000c78:	fab3 f383 	clz	r3, r3
 8000c7c:	f003 031f 	and.w	r3, r3, #31
 8000c80:	fa06 f303 	lsl.w	r3, r6, r3
 8000c84:	4213      	tst	r3, r2
 8000c86:	d1ed      	bne.n	8000c64 <HAL_RCC_OscConfig+0x38c>
 8000c88:	e672      	b.n	8000970 <HAL_RCC_OscConfig+0x98>
    return HAL_ERROR;
 8000c8a:	2001      	movs	r0, #1
}
 8000c8c:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8000c8e:	f04f 0800 	mov.w	r8, #0
 8000c92:	e6b1      	b.n	80009f8 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c94:	4d82      	ldr	r5, [pc, #520]	; (8000ea0 <HAL_RCC_OscConfig+0x5c8>)
 8000c96:	6a2b      	ldr	r3, [r5, #32]
 8000c98:	f023 0301 	bic.w	r3, r3, #1
 8000c9c:	622b      	str	r3, [r5, #32]
 8000c9e:	6a2b      	ldr	r3, [r5, #32]
 8000ca0:	f023 0304 	bic.w	r3, r3, #4
 8000ca4:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8000ca6:	f7ff fc83 	bl	80005b0 <HAL_GetTick>
 8000caa:	f04f 0902 	mov.w	r9, #2
 8000cae:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cb0:	2601      	movs	r6, #1
 8000cb2:	e014      	b.n	8000cde <HAL_RCC_OscConfig+0x406>
 8000cb4:	fa99 f3a9 	rbit	r3, r9
 8000cb8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000cba:	fa99 f3a9 	rbit	r3, r9
 8000cbe:	fab3 f383 	clz	r3, r3
 8000cc2:	f003 031f 	and.w	r3, r3, #31
 8000cc6:	fa06 f303 	lsl.w	r3, r6, r3
 8000cca:	4213      	tst	r3, r2
 8000ccc:	f43f aef0 	beq.w	8000ab0 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cd0:	f7ff fc6e 	bl	80005b0 <HAL_GetTick>
 8000cd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cd8:	1bc0      	subs	r0, r0, r7
 8000cda:	4298      	cmp	r0, r3
 8000cdc:	d8a0      	bhi.n	8000c20 <HAL_RCC_OscConfig+0x348>
 8000cde:	fa99 f3a9 	rbit	r3, r9
 8000ce2:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0e4      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x3dc>
 8000cea:	6a2a      	ldr	r2, [r5, #32]
 8000cec:	e7e5      	b.n	8000cba <HAL_RCC_OscConfig+0x3e2>
 8000cee:	2501      	movs	r5, #1
 8000cf0:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000cf4:	fab3 f383 	clz	r3, r3
 8000cf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000cfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	f04f 0802 	mov.w	r8, #2
 8000d06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d08:	f7ff fc52 	bl	80005b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0c:	4e64      	ldr	r6, [pc, #400]	; (8000ea0 <HAL_RCC_OscConfig+0x5c8>)
        tickstart = HAL_GetTick();
 8000d0e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d10:	e004      	b.n	8000d1c <HAL_RCC_OscConfig+0x444>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d12:	f7ff fc4d 	bl	80005b0 <HAL_GetTick>
 8000d16:	1bc0      	subs	r0, r0, r7
 8000d18:	2802      	cmp	r0, #2
 8000d1a:	d881      	bhi.n	8000c20 <HAL_RCC_OscConfig+0x348>
 8000d1c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d20:	6832      	ldr	r2, [r6, #0]
 8000d22:	fa98 f3a8 	rbit	r3, r8
 8000d26:	fab3 f383 	clz	r3, r3
 8000d2a:	f003 031f 	and.w	r3, r3, #31
 8000d2e:	fa05 f303 	lsl.w	r3, r5, r3
 8000d32:	4213      	tst	r3, r2
 8000d34:	d1ed      	bne.n	8000d12 <HAL_RCC_OscConfig+0x43a>
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	e61d      	b.n	8000976 <HAL_RCC_OscConfig+0x9e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d3a:	4a59      	ldr	r2, [pc, #356]	; (8000ea0 <HAL_RCC_OscConfig+0x5c8>)
 8000d3c:	6a13      	ldr	r3, [r2, #32]
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8000d44:	f7ff fc34 	bl	80005b0 <HAL_GetTick>
 8000d48:	f04f 0902 	mov.w	r9, #2
 8000d4c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d4e:	4e54      	ldr	r6, [pc, #336]	; (8000ea0 <HAL_RCC_OscConfig+0x5c8>)
 8000d50:	2501      	movs	r5, #1
 8000d52:	e015      	b.n	8000d80 <HAL_RCC_OscConfig+0x4a8>
 8000d54:	fa99 f3a9 	rbit	r3, r9
 8000d58:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000d5a:	fa99 f3a9 	rbit	r3, r9
 8000d5e:	fab3 f383 	clz	r3, r3
 8000d62:	f003 031f 	and.w	r3, r3, #31
 8000d66:	fa05 f303 	lsl.w	r3, r5, r3
 8000d6a:	4213      	tst	r3, r2
 8000d6c:	f47f aea0 	bne.w	8000ab0 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d70:	f7ff fc1e 	bl	80005b0 <HAL_GetTick>
 8000d74:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d78:	1bc0      	subs	r0, r0, r7
 8000d7a:	4298      	cmp	r0, r3
 8000d7c:	f63f af50 	bhi.w	8000c20 <HAL_RCC_OscConfig+0x348>
 8000d80:	fa99 f3a9 	rbit	r3, r9
 8000d84:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0e3      	beq.n	8000d54 <HAL_RCC_OscConfig+0x47c>
 8000d8c:	6a32      	ldr	r2, [r6, #32]
 8000d8e:	e7e4      	b.n	8000d5a <HAL_RCC_OscConfig+0x482>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d94:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	e5c7      	b.n	800093a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000daa:	f042 0204 	orr.w	r2, r2, #4
 8000dae:	621a      	str	r2, [r3, #32]
 8000db0:	6a1a      	ldr	r2, [r3, #32]
 8000db2:	f042 0201 	orr.w	r2, r2, #1
 8000db6:	621a      	str	r2, [r3, #32]
 8000db8:	e7c4      	b.n	8000d44 <HAL_RCC_OscConfig+0x46c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dba:	2801      	cmp	r0, #1
 8000dbc:	f43f aed2 	beq.w	8000b64 <HAL_RCC_OscConfig+0x28c>
        pll_config = RCC->CFGR;
 8000dc0:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000dc2:	69e1      	ldr	r1, [r4, #28]
        pll_config2 = RCC->CFGR2;
 8000dc4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000dc6:	f402 30c0 	and.w	r0, r2, #98304	; 0x18000
 8000dca:	4288      	cmp	r0, r1
 8000dcc:	f47f aec9 	bne.w	8000b62 <HAL_RCC_OscConfig+0x28a>
 8000dd0:	6a21      	ldr	r1, [r4, #32]
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8000dd2:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000dd6:	428a      	cmp	r2, r1
 8000dd8:	f47f aec3 	bne.w	8000b62 <HAL_RCC_OscConfig+0x28a>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8000ddc:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8000dde:	f003 030f 	and.w	r3, r3, #15
    return HAL_ERROR;
 8000de2:	1a18      	subs	r0, r3, r0
 8000de4:	bf18      	it	ne
 8000de6:	2001      	movne	r0, #1
 8000de8:	e6bc      	b.n	8000b64 <HAL_RCC_OscConfig+0x28c>
 8000dea:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000dee:	fab3 f383 	clz	r3, r3
 8000df2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000df6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e00:	f7ff fbd6 	bl	80005b0 <HAL_GetTick>
 8000e04:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8000e08:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e0a:	2601      	movs	r6, #1
 8000e0c:	e005      	b.n	8000e1a <HAL_RCC_OscConfig+0x542>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e0e:	f7ff fbcf 	bl	80005b0 <HAL_GetTick>
 8000e12:	1bc0      	subs	r0, r0, r7
 8000e14:	2802      	cmp	r0, #2
 8000e16:	f63f af03 	bhi.w	8000c20 <HAL_RCC_OscConfig+0x348>
 8000e1a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e1e:	682a      	ldr	r2, [r5, #0]
 8000e20:	fa98 f3a8 	rbit	r3, r8
 8000e24:	fab3 f383 	clz	r3, r3
 8000e28:	f003 031f 	and.w	r3, r3, #31
 8000e2c:	fa06 f303 	lsl.w	r3, r6, r3
 8000e30:	4213      	tst	r3, r2
 8000e32:	d1ec      	bne.n	8000e0e <HAL_RCC_OscConfig+0x536>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000e36:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e38:	f023 030f 	bic.w	r3, r3, #15
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000e40:	e9d4 1307 	ldrd	r1, r3, [r4, #28]
 8000e44:	686a      	ldr	r2, [r5, #4]
 8000e46:	430b      	orrs	r3, r1
 8000e48:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	606b      	str	r3, [r5, #4]
 8000e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e54:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000e58:	fab3 f383 	clz	r3, r3
 8000e5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000e6a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000e6c:	f7ff fba0 	bl	80005b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e70:	4e0b      	ldr	r6, [pc, #44]	; (8000ea0 <HAL_RCC_OscConfig+0x5c8>)
        tickstart = HAL_GetTick();
 8000e72:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e74:	2501      	movs	r5, #1
 8000e76:	e005      	b.n	8000e84 <HAL_RCC_OscConfig+0x5ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e78:	f7ff fb9a 	bl	80005b0 <HAL_GetTick>
 8000e7c:	1bc0      	subs	r0, r0, r7
 8000e7e:	2802      	cmp	r0, #2
 8000e80:	f63f aece 	bhi.w	8000c20 <HAL_RCC_OscConfig+0x348>
 8000e84:	fa94 f3a4 	rbit	r3, r4
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e88:	6832      	ldr	r2, [r6, #0]
 8000e8a:	fa94 f3a4 	rbit	r3, r4
 8000e8e:	fab3 f383 	clz	r3, r3
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	fa05 f303 	lsl.w	r3, r5, r3
 8000e9a:	4213      	tst	r3, r2
 8000e9c:	d0ec      	beq.n	8000e78 <HAL_RCC_OscConfig+0x5a0>
 8000e9e:	e643      	b.n	8000b28 <HAL_RCC_OscConfig+0x250>
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ea4:	b178      	cbz	r0, 8000ec6 <HAL_RCC_ClockConfig+0x22>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ea6:	4a64      	ldr	r2, [pc, #400]	; (8001038 <HAL_RCC_ClockConfig+0x194>)
 8000ea8:	6813      	ldr	r3, [r2, #0]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d20b      	bcs.n	8000eca <HAL_RCC_ClockConfig+0x26>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eb2:	6813      	ldr	r3, [r2, #0]
 8000eb4:	f023 0307 	bic.w	r3, r3, #7
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ebc:	6813      	ldr	r3, [r2, #0]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d001      	beq.n	8000eca <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8000ec6:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8000ec8:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000eca:	6803      	ldr	r3, [r0, #0]
{
 8000ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ed0:	079c      	lsls	r4, r3, #30
 8000ed2:	d506      	bpl.n	8000ee2 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ed4:	4c59      	ldr	r4, [pc, #356]	; (800103c <HAL_RCC_ClockConfig+0x198>)
 8000ed6:	6885      	ldr	r5, [r0, #8]
 8000ed8:	6862      	ldr	r2, [r4, #4]
 8000eda:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000ede:	432a      	orrs	r2, r5
 8000ee0:	6062      	str	r2, [r4, #4]
 8000ee2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ee4:	07d9      	lsls	r1, r3, #31
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	d530      	bpl.n	8000f4c <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000eea:	6842      	ldr	r2, [r0, #4]
 8000eec:	2a01      	cmp	r2, #1
 8000eee:	f000 808e 	beq.w	800100e <HAL_RCC_ClockConfig+0x16a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ef2:	2a02      	cmp	r2, #2
 8000ef4:	bf0c      	ite	eq
 8000ef6:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000efa:	2302      	movne	r3, #2
 8000efc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f00:	494e      	ldr	r1, [pc, #312]	; (800103c <HAL_RCC_ClockConfig+0x198>)
 8000f02:	6808      	ldr	r0, [r1, #0]
 8000f04:	fa93 f3a3 	rbit	r3, r3
 8000f08:	fab3 f383 	clz	r3, r3
 8000f0c:	f003 031f 	and.w	r3, r3, #31
 8000f10:	2101      	movs	r1, #1
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	4203      	tst	r3, r0
 8000f18:	d028      	beq.n	8000f6c <HAL_RCC_ClockConfig+0xc8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f1a:	4e48      	ldr	r6, [pc, #288]	; (800103c <HAL_RCC_ClockConfig+0x198>)
 8000f1c:	6873      	ldr	r3, [r6, #4]
 8000f1e:	f023 0303 	bic.w	r3, r3, #3
 8000f22:	431a      	orrs	r2, r3
 8000f24:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000f26:	f7ff fb43 	bl	80005b0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f2a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000f2e:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f30:	e005      	b.n	8000f3e <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f32:	f7ff fb3d 	bl	80005b0 <HAL_GetTick>
 8000f36:	eba0 0008 	sub.w	r0, r0, r8
 8000f3a:	42b8      	cmp	r0, r7
 8000f3c:	d879      	bhi.n	8001032 <HAL_RCC_ClockConfig+0x18e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f3e:	6873      	ldr	r3, [r6, #4]
 8000f40:	6862      	ldr	r2, [r4, #4]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f4a:	d1f2      	bne.n	8000f32 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f4c:	4a3a      	ldr	r2, [pc, #232]	; (8001038 <HAL_RCC_ClockConfig+0x194>)
 8000f4e:	6813      	ldr	r3, [r2, #0]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	42ab      	cmp	r3, r5
 8000f56:	d90c      	bls.n	8000f72 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f58:	6813      	ldr	r3, [r2, #0]
 8000f5a:	f023 0307 	bic.w	r3, r3, #7
 8000f5e:	432b      	orrs	r3, r5
 8000f60:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f62:	6813      	ldr	r3, [r2, #0]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	42ab      	cmp	r3, r5
 8000f6a:	d002      	beq.n	8000f72 <HAL_RCC_ClockConfig+0xce>
    return HAL_ERROR;
 8000f6c:	2001      	movs	r0, #1
}
 8000f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	075a      	lsls	r2, r3, #29
 8000f76:	d506      	bpl.n	8000f86 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f78:	4930      	ldr	r1, [pc, #192]	; (800103c <HAL_RCC_ClockConfig+0x198>)
 8000f7a:	68e0      	ldr	r0, [r4, #12]
 8000f7c:	684a      	ldr	r2, [r1, #4]
 8000f7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000f82:	4302      	orrs	r2, r0
 8000f84:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f86:	071b      	lsls	r3, r3, #28
 8000f88:	d507      	bpl.n	8000f9a <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f8a:	4a2c      	ldr	r2, [pc, #176]	; (800103c <HAL_RCC_ClockConfig+0x198>)
 8000f8c:	6921      	ldr	r1, [r4, #16]
 8000f8e:	6853      	ldr	r3, [r2, #4]
 8000f90:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f94:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000f98:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000f9a:	4a28      	ldr	r2, [pc, #160]	; (800103c <HAL_RCC_ClockConfig+0x198>)
 8000f9c:	6853      	ldr	r3, [r2, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f9e:	f003 010c 	and.w	r1, r3, #12
 8000fa2:	2908      	cmp	r1, #8
 8000fa4:	d131      	bne.n	800100a <HAL_RCC_ClockConfig+0x166>
 8000fa6:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8000faa:	fa91 f1a1 	rbit	r1, r1
 8000fae:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000fb0:	fab1 f181 	clz	r1, r1
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000fb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000fb6:	fa90 f0a0 	rbit	r0, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000fba:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000fbe:	40cb      	lsrs	r3, r1
 8000fc0:	491f      	ldr	r1, [pc, #124]	; (8001040 <HAL_RCC_ClockConfig+0x19c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000fc2:	4c20      	ldr	r4, [pc, #128]	; (8001044 <HAL_RCC_ClockConfig+0x1a0>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000fc4:	5ccb      	ldrb	r3, [r1, r3]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000fc6:	4920      	ldr	r1, [pc, #128]	; (8001048 <HAL_RCC_ClockConfig+0x1a4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000fc8:	fab0 f080 	clz	r0, r0
 8000fcc:	f002 020f 	and.w	r2, r2, #15
 8000fd0:	40c2      	lsrs	r2, r0
 8000fd2:	5ca2      	ldrb	r2, [r4, r2]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000fd4:	fbb1 f1f2 	udiv	r1, r1, r2
 8000fd8:	fb03 f101 	mul.w	r1, r3, r1
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000fdc:	4b17      	ldr	r3, [pc, #92]	; (800103c <HAL_RCC_ClockConfig+0x198>)
 8000fde:	22f0      	movs	r2, #240	; 0xf0
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	fa92 f2a2 	rbit	r2, r2
 8000fe6:	fab2 f282 	clz	r2, r2
 8000fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fee:	40d3      	lsrs	r3, r2
 8000ff0:	4a16      	ldr	r2, [pc, #88]	; (800104c <HAL_RCC_ClockConfig+0x1a8>)
  HAL_InitTick (uwTickPrio);
 8000ff2:	4817      	ldr	r0, [pc, #92]	; (8001050 <HAL_RCC_ClockConfig+0x1ac>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ff4:	5cd3      	ldrb	r3, [r2, r3]
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <HAL_RCC_ClockConfig+0x1b0>)
  HAL_InitTick (uwTickPrio);
 8000ff8:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ffa:	fa21 f303 	lsr.w	r3, r1, r3
 8000ffe:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8001000:	f7ff fa94 	bl	800052c <HAL_InitTick>
  return HAL_OK;
 8001004:	2000      	movs	r0, #0
}
 8001006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSE_VALUE;
 800100a:	490f      	ldr	r1, [pc, #60]	; (8001048 <HAL_RCC_ClockConfig+0x1a4>)
 800100c:	e7e6      	b.n	8000fdc <HAL_RCC_ClockConfig+0x138>
 800100e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001012:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	4909      	ldr	r1, [pc, #36]	; (800103c <HAL_RCC_ClockConfig+0x198>)
 8001018:	6809      	ldr	r1, [r1, #0]
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	fab3 f383 	clz	r3, r3
 8001022:	f003 031f 	and.w	r3, r3, #31
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	420b      	tst	r3, r1
 800102c:	f47f af75 	bne.w	8000f1a <HAL_RCC_ClockConfig+0x76>
 8001030:	e79c      	b.n	8000f6c <HAL_RCC_ClockConfig+0xc8>
        return HAL_TIMEOUT;
 8001032:	2003      	movs	r0, #3
 8001034:	e79b      	b.n	8000f6e <HAL_RCC_ClockConfig+0xca>
 8001036:	bf00      	nop
 8001038:	40022000 	.word	0x40022000
 800103c:	40021000 	.word	0x40021000
 8001040:	08001b04 	.word	0x08001b04
 8001044:	08001b14 	.word	0x08001b14
 8001048:	007a1200 	.word	0x007a1200
 800104c:	08001aec 	.word	0x08001aec
 8001050:	20000008 	.word	0x20000008
 8001054:	20000000 	.word	0x20000000

08001058 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <HAL_RCC_GetSysClockFreq+0x4c>)
 800105a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800105c:	f003 010c 	and.w	r1, r3, #12
 8001060:	2908      	cmp	r1, #8
 8001062:	d001      	beq.n	8001068 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8001064:	4810      	ldr	r0, [pc, #64]	; (80010a8 <HAL_RCC_GetSysClockFreq+0x50>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001066:	4770      	bx	lr
{
 8001068:	b430      	push	{r4, r5}
 800106a:	f44f 1070 	mov.w	r0, #3932160	; 0x3c0000
 800106e:	fa90 f0a0 	rbit	r0, r0
 8001072:	210f      	movs	r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001074:	fab0 f080 	clz	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001078:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800107a:	fa91 f1a1 	rbit	r1, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800107e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001082:	40c3      	lsrs	r3, r0
 8001084:	4809      	ldr	r0, [pc, #36]	; (80010ac <HAL_RCC_GetSysClockFreq+0x54>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001086:	4d0a      	ldr	r5, [pc, #40]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x58>)
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001088:	5cc0      	ldrb	r0, [r0, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800108a:	4c07      	ldr	r4, [pc, #28]	; (80010a8 <HAL_RCC_GetSysClockFreq+0x50>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800108c:	fab1 f181 	clz	r1, r1
 8001090:	f002 030f 	and.w	r3, r2, #15
 8001094:	40cb      	lsrs	r3, r1
 8001096:	5ceb      	ldrb	r3, [r5, r3]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001098:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800109c:	bc30      	pop	{r4, r5}
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800109e:	fb00 f003 	mul.w	r0, r0, r3
}
 80010a2:	4770      	bx	lr
 80010a4:	40021000 	.word	0x40021000
 80010a8:	007a1200 	.word	0x007a1200
 80010ac:	08001b04 	.word	0x08001b04
 80010b0:	08001b14 	.word	0x08001b14

080010b4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	fa92 f2a2 	rbit	r2, r2
 80010c0:	fab2 f282 	clz	r2, r2
 80010c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80010c8:	40d3      	lsrs	r3, r2
 80010ca:	4904      	ldr	r1, [pc, #16]	; (80010dc <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80010ce:	5ccb      	ldrb	r3, [r1, r3]
 80010d0:	6810      	ldr	r0, [r2, #0]
}    
 80010d2:	40d8      	lsrs	r0, r3
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000
 80010dc:	08001afc 	.word	0x08001afc
 80010e0:	20000000 	.word	0x20000000

080010e4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80010e6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	fa92 f2a2 	rbit	r2, r2
 80010f0:	fab2 f282 	clz	r2, r2
 80010f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80010f8:	40d3      	lsrs	r3, r2
 80010fa:	4904      	ldr	r1, [pc, #16]	; (800110c <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 80010fc:	4a04      	ldr	r2, [pc, #16]	; (8001110 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80010fe:	5ccb      	ldrb	r3, [r1, r3]
 8001100:	6810      	ldr	r0, [r2, #0]
} 
 8001102:	40d8      	lsrs	r0, r3
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000
 800110c:	08001afc 	.word	0x08001afc
 8001110:	20000000 	.word	0x20000000

08001114 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001118:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800111a:	6800      	ldr	r0, [r0, #0]
 800111c:	03c6      	lsls	r6, r0, #15
{
 800111e:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001120:	d53e      	bpl.n	80011a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001122:	4ba0      	ldr	r3, [pc, #640]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001124:	69da      	ldr	r2, [r3, #28]
 8001126:	00d5      	lsls	r5, r2, #3
 8001128:	f140 80f3 	bpl.w	8001312 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112c:	4d9e      	ldr	r5, [pc, #632]	; (80013a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800112e:	682a      	ldr	r2, [r5, #0]
 8001130:	05d0      	lsls	r0, r2, #23
    FlagStatus       pwrclkchanged = RESET;
 8001132:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001136:	f140 80fc 	bpl.w	8001332 <HAL_RCCEx_PeriphCLKConfig+0x21e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800113a:	4d9a      	ldr	r5, [pc, #616]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800113c:	6861      	ldr	r1, [r4, #4]
 800113e:	6a2a      	ldr	r2, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001140:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8001144:	d020      	beq.n	8001188 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8001146:	f401 7340 	and.w	r3, r1, #768	; 0x300
 800114a:	4293      	cmp	r3, r2
 800114c:	d01c      	beq.n	8001188 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800114e:	6a29      	ldr	r1, [r5, #32]
 8001150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001154:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001158:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800115c:	4f93      	ldr	r7, [pc, #588]	; (80013ac <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800115e:	fab2 f282 	clz	r2, r2
 8001162:	443a      	add	r2, r7
 8001164:	0092      	lsls	r2, r2, #2
 8001166:	f04f 0c01 	mov.w	ip, #1
 800116a:	f8c2 c000 	str.w	ip, [r2]
 800116e:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001172:	fab3 f383 	clz	r3, r3
 8001176:	443b      	add	r3, r7
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800117e:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8001180:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001182:	f100 80ea 	bmi.w	800135a <HAL_RCCEx_PeriphCLKConfig+0x246>
 8001186:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001188:	4a86      	ldr	r2, [pc, #536]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800118a:	6a13      	ldr	r3, [r2, #32]
 800118c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001190:	430b      	orrs	r3, r1
 8001192:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001194:	b11e      	cbz	r6, 800119e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001196:	69d3      	ldr	r3, [r2, #28]
 8001198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800119c:	61d3      	str	r3, [r2, #28]
 800119e:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80011a0:	07c3      	lsls	r3, r0, #31
 80011a2:	d506      	bpl.n	80011b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80011a4:	4a7f      	ldr	r2, [pc, #508]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80011a6:	68a1      	ldr	r1, [r4, #8]
 80011a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011aa:	f023 0303 	bic.w	r3, r3, #3
 80011ae:	430b      	orrs	r3, r1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80011b2:	0787      	lsls	r7, r0, #30
 80011b4:	d506      	bpl.n	80011c4 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80011b6:	4a7b      	ldr	r2, [pc, #492]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80011b8:	68e1      	ldr	r1, [r4, #12]
 80011ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011bc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80011c0:	430b      	orrs	r3, r1
 80011c2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80011c4:	0746      	lsls	r6, r0, #29
 80011c6:	d506      	bpl.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80011c8:	4a76      	ldr	r2, [pc, #472]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80011ca:	6921      	ldr	r1, [r4, #16]
 80011cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011ce:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80011d2:	430b      	orrs	r3, r1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80011d6:	0685      	lsls	r5, r0, #26
 80011d8:	d506      	bpl.n	80011e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80011da:	4a72      	ldr	r2, [pc, #456]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80011dc:	69e1      	ldr	r1, [r4, #28]
 80011de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011e0:	f023 0310 	bic.w	r3, r3, #16
 80011e4:	430b      	orrs	r3, r1
 80011e6:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80011e8:	0381      	lsls	r1, r0, #14
 80011ea:	d506      	bpl.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80011ec:	4a6d      	ldr	r2, [pc, #436]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80011ee:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80011f0:	6853      	ldr	r3, [r2, #4]
 80011f2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80011f6:	430b      	orrs	r3, r1
 80011f8:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80011fa:	0642      	lsls	r2, r0, #25
 80011fc:	d506      	bpl.n	800120c <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80011fe:	4a69      	ldr	r2, [pc, #420]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001200:	6a21      	ldr	r1, [r4, #32]
 8001202:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001204:	f023 0320 	bic.w	r3, r3, #32
 8001208:	430b      	orrs	r3, r1
 800120a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800120c:	0343      	lsls	r3, r0, #13
 800120e:	d506      	bpl.n	800121e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001210:	4a64      	ldr	r2, [pc, #400]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001212:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001214:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800121a:	430b      	orrs	r3, r1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800121e:	0707      	lsls	r7, r0, #28
 8001220:	d506      	bpl.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001222:	4a60      	ldr	r2, [pc, #384]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001224:	6961      	ldr	r1, [r4, #20]
 8001226:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001228:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800122c:	430b      	orrs	r3, r1
 800122e:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001230:	06c6      	lsls	r6, r0, #27
 8001232:	d506      	bpl.n	8001242 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001234:	4a5b      	ldr	r2, [pc, #364]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001236:	69a1      	ldr	r1, [r4, #24]
 8001238:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800123a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800123e:	430b      	orrs	r3, r1
 8001240:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001242:	0585      	lsls	r5, r0, #22
 8001244:	d506      	bpl.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001246:	4a57      	ldr	r2, [pc, #348]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001248:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800124a:	6853      	ldr	r3, [r2, #4]
 800124c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001250:	430b      	orrs	r3, r1
 8001252:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001254:	0601      	lsls	r1, r0, #24
 8001256:	d506      	bpl.n	8001266 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001258:	4a52      	ldr	r2, [pc, #328]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800125a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800125c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800125e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001262:	430b      	orrs	r3, r1
 8001264:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001266:	05c2      	lsls	r2, r0, #23
 8001268:	d506      	bpl.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800126a:	4a4e      	ldr	r2, [pc, #312]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800126c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800126e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001270:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8001274:	430b      	orrs	r3, r1
 8001276:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001278:	04c3      	lsls	r3, r0, #19
 800127a:	d506      	bpl.n	800128a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800127c:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800127e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001280:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001282:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001286:	430b      	orrs	r3, r1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800128a:	0487      	lsls	r7, r0, #18
 800128c:	d506      	bpl.n	800129c <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800128e:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001290:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001292:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001298:	430b      	orrs	r3, r1
 800129a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800129c:	02c6      	lsls	r6, r0, #11
 800129e:	d506      	bpl.n	80012ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80012a0:	4a40      	ldr	r2, [pc, #256]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80012a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80012a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012aa:	430b      	orrs	r3, r1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80012ae:	0285      	lsls	r5, r0, #10
 80012b0:	d506      	bpl.n	80012c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80012b2:	4a3c      	ldr	r2, [pc, #240]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80012b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80012b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012b8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80012bc:	430b      	orrs	r3, r1
 80012be:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80012c0:	0241      	lsls	r1, r0, #9
 80012c2:	d506      	bpl.n	80012d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80012c4:	4a37      	ldr	r2, [pc, #220]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80012c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80012c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012ce:	430b      	orrs	r3, r1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80012d2:	0202      	lsls	r2, r0, #8
 80012d4:	d506      	bpl.n	80012e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80012d6:	4a33      	ldr	r2, [pc, #204]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80012d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80012da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012e0:	430b      	orrs	r3, r1
 80012e2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80012e4:	01c3      	lsls	r3, r0, #7
 80012e6:	d506      	bpl.n	80012f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80012e8:	4a2e      	ldr	r2, [pc, #184]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80012ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80012ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012f2:	430b      	orrs	r3, r1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80012f6:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80012fa:	d007      	beq.n	800130c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80012fc:	4a29      	ldr	r2, [pc, #164]	; (80013a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80012fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001300:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001302:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001306:	430b      	orrs	r3, r1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800130a:	2000      	movs	r0, #0
}
 800130c:	b003      	add	sp, #12
 800130e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001314:	4d24      	ldr	r5, [pc, #144]	; (80013a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800131a:	61da      	str	r2, [r3, #28]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001326:	682a      	ldr	r2, [r5, #0]
 8001328:	05d0      	lsls	r0, r2, #23
      pwrclkchanged = SET;
 800132a:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132e:	f53f af04 	bmi.w	800113a <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001332:	682a      	ldr	r2, [r5, #0]
 8001334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001338:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 800133a:	f7ff f939 	bl	80005b0 <HAL_GetTick>
 800133e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	05d9      	lsls	r1, r3, #23
 8001344:	f53f aef9 	bmi.w	800113a <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001348:	f7ff f932 	bl	80005b0 <HAL_GetTick>
 800134c:	1bc0      	subs	r0, r0, r7
 800134e:	2864      	cmp	r0, #100	; 0x64
 8001350:	d9f6      	bls.n	8001340 <HAL_RCCEx_PeriphCLKConfig+0x22c>
          return HAL_TIMEOUT;
 8001352:	2003      	movs	r0, #3
}
 8001354:	b003      	add	sp, #12
 8001356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800135a:	4667      	mov	r7, ip
        tickstart = HAL_GetTick();
 800135c:	f7ff f928 	bl	80005b0 <HAL_GetTick>
 8001360:	f04f 0902 	mov.w	r9, #2
 8001364:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001366:	e015      	b.n	8001394 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8001368:	fa99 f3a9 	rbit	r3, r9
 800136c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800136e:	fa99 f3a9 	rbit	r3, r9
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	f003 031f 	and.w	r3, r3, #31
 800137a:	fa07 f303 	lsl.w	r3, r7, r3
 800137e:	4213      	tst	r3, r2
 8001380:	f47f af01 	bne.w	8001186 <HAL_RCCEx_PeriphCLKConfig+0x72>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001384:	f7ff f914 	bl	80005b0 <HAL_GetTick>
 8001388:	f241 3388 	movw	r3, #5000	; 0x1388
 800138c:	eba0 0008 	sub.w	r0, r0, r8
 8001390:	4298      	cmp	r0, r3
 8001392:	d8de      	bhi.n	8001352 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8001394:	fa99 f3a9 	rbit	r3, r9
 8001398:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0e3      	beq.n	8001368 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80013a0:	6a2a      	ldr	r2, [r5, #32]
 80013a2:	e7e4      	b.n	800136e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40007000 	.word	0x40007000
 80013ac:	10908100 	.word	0x10908100

080013b0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013b2:	07da      	lsls	r2, r3, #31
{
 80013b4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013b6:	d506      	bpl.n	80013c6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80013b8:	6801      	ldr	r1, [r0, #0]
 80013ba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80013bc:	684a      	ldr	r2, [r1, #4]
 80013be:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80013c2:	4322      	orrs	r2, r4
 80013c4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80013c6:	079c      	lsls	r4, r3, #30
 80013c8:	d506      	bpl.n	80013d8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80013ca:	6801      	ldr	r1, [r0, #0]
 80013cc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80013ce:	684a      	ldr	r2, [r1, #4]
 80013d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013d4:	4322      	orrs	r2, r4
 80013d6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80013d8:	0759      	lsls	r1, r3, #29
 80013da:	d506      	bpl.n	80013ea <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80013dc:	6801      	ldr	r1, [r0, #0]
 80013de:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80013e0:	684a      	ldr	r2, [r1, #4]
 80013e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013e6:	4322      	orrs	r2, r4
 80013e8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80013ea:	071a      	lsls	r2, r3, #28
 80013ec:	d506      	bpl.n	80013fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80013ee:	6801      	ldr	r1, [r0, #0]
 80013f0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80013f2:	684a      	ldr	r2, [r1, #4]
 80013f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f8:	4322      	orrs	r2, r4
 80013fa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80013fc:	06dc      	lsls	r4, r3, #27
 80013fe:	d506      	bpl.n	800140e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001400:	6801      	ldr	r1, [r0, #0]
 8001402:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001404:	688a      	ldr	r2, [r1, #8]
 8001406:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800140a:	4322      	orrs	r2, r4
 800140c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800140e:	0699      	lsls	r1, r3, #26
 8001410:	d506      	bpl.n	8001420 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001412:	6801      	ldr	r1, [r0, #0]
 8001414:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001416:	688a      	ldr	r2, [r1, #8]
 8001418:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800141c:	4322      	orrs	r2, r4
 800141e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001420:	065a      	lsls	r2, r3, #25
 8001422:	d509      	bpl.n	8001438 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001424:	6801      	ldr	r1, [r0, #0]
 8001426:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001428:	684a      	ldr	r2, [r1, #4]
 800142a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800142e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001430:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001434:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001436:	d00b      	beq.n	8001450 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001438:	061b      	lsls	r3, r3, #24
 800143a:	d506      	bpl.n	800144a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800143c:	6802      	ldr	r2, [r0, #0]
 800143e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001440:	6853      	ldr	r3, [r2, #4]
 8001442:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001446:	430b      	orrs	r3, r1
 8001448:	6053      	str	r3, [r2, #4]
  }
}
 800144a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800144e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001450:	684a      	ldr	r2, [r1, #4]
 8001452:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001454:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001458:	4322      	orrs	r2, r4
 800145a:	604a      	str	r2, [r1, #4]
 800145c:	e7ec      	b.n	8001438 <UART_AdvFeatureConfig+0x88>
 800145e:	bf00      	nop

08001460 <HAL_UART_Init>:
  if (huart == NULL)
 8001460:	2800      	cmp	r0, #0
 8001462:	d040      	beq.n	80014e6 <HAL_UART_Init+0x86>
{
 8001464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001466:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001468:	4604      	mov	r4, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d036      	beq.n	80014dc <HAL_UART_Init+0x7c>
  __HAL_UART_DISABLE(huart);
 800146e:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001470:	6927      	ldr	r7, [r4, #16]
 8001472:	6966      	ldr	r6, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001474:	49af      	ldr	r1, [pc, #700]	; (8001734 <HAL_UART_Init+0x2d4>)
  huart->gState = HAL_UART_STATE_BUSY;
 8001476:	2224      	movs	r2, #36	; 0x24
 8001478:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800147a:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800147c:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800147e:	f020 0001 	bic.w	r0, r0, #1
 8001482:	6018      	str	r0, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001484:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001486:	69e0      	ldr	r0, [r4, #28]
 8001488:	433a      	orrs	r2, r7
 800148a:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800148c:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800148e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001490:	430a      	orrs	r2, r1
 8001492:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001494:	6859      	ldr	r1, [r3, #4]
 8001496:	68e5      	ldr	r5, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001498:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 800149a:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800149c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80014a0:	4329      	orrs	r1, r5
 80014a2:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80014a4:	6899      	ldr	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014a6:	4da4      	ldr	r5, [pc, #656]	; (8001738 <HAL_UART_Init+0x2d8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80014a8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80014ac:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80014ae:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014b0:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80014b2:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014b4:	d019      	beq.n	80014ea <HAL_UART_Init+0x8a>
 80014b6:	4aa1      	ldr	r2, [pc, #644]	; (800173c <HAL_UART_Init+0x2dc>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d037      	beq.n	800152c <HAL_UART_Init+0xcc>
 80014bc:	4aa0      	ldr	r2, [pc, #640]	; (8001740 <HAL_UART_Init+0x2e0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	f000 80e6 	beq.w	8001690 <HAL_UART_Init+0x230>
 80014c4:	4a9f      	ldr	r2, [pc, #636]	; (8001744 <HAL_UART_Init+0x2e4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d065      	beq.n	8001596 <HAL_UART_Init+0x136>
 80014ca:	4a9f      	ldr	r2, [pc, #636]	; (8001748 <HAL_UART_Init+0x2e8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	f000 8105 	beq.w	80016dc <HAL_UART_Init+0x27c>
  huart->RxISR = NULL;
 80014d2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80014d4:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
    return HAL_ERROR;
 80014d8:	2001      	movs	r0, #1
}
 80014da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 80014dc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80014e0:	f7fe ffa6 	bl	8000430 <HAL_UART_MspInit>
 80014e4:	e7c3      	b.n	800146e <HAL_UART_Init+0xe>
    return HAL_ERROR;
 80014e6:	2001      	movs	r0, #1
}
 80014e8:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80014ea:	4b98      	ldr	r3, [pc, #608]	; (800174c <HAL_UART_Init+0x2ec>)
 80014ec:	4a98      	ldr	r2, [pc, #608]	; (8001750 <HAL_UART_Init+0x2f0>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	f000 812b 	beq.w	8001754 <HAL_UART_Init+0x2f4>
    switch (clocksource)
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d8e7      	bhi.n	80014d2 <HAL_UART_Init+0x72>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <HAL_UART_Init+0xa8>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	080016cb 	.word	0x080016cb
 800150c:	080015b9 	.word	0x080015b9
 8001510:	08001703 	.word	0x08001703
 8001514:	080014d3 	.word	0x080014d3
 8001518:	080016f1 	.word	0x080016f1
 800151c:	080014d3 	.word	0x080014d3
 8001520:	080014d3 	.word	0x080014d3
 8001524:	080014d3 	.word	0x080014d3
 8001528:	080016af 	.word	0x080016af
  UART_GETCLOCKSOURCE(huart, clocksource);
 800152c:	4b87      	ldr	r3, [pc, #540]	; (800174c <HAL_UART_Init+0x2ec>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001538:	f000 80d7 	beq.w	80016ea <HAL_UART_Init+0x28a>
 800153c:	f240 80bf 	bls.w	80016be <HAL_UART_Init+0x25e>
 8001540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001544:	f000 80af 	beq.w	80016a6 <HAL_UART_Init+0x246>
 8001548:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800154c:	d1c1      	bne.n	80014d2 <HAL_UART_Init+0x72>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800154e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001552:	f040 80d6 	bne.w	8001702 <HAL_UART_Init+0x2a2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001556:	6862      	ldr	r2, [r4, #4]
 8001558:	0853      	lsrs	r3, r2, #1
 800155a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800155e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001562:	fbb3 f3f2 	udiv	r3, r3, r2
 8001566:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001568:	f1a3 0110 	sub.w	r1, r3, #16
 800156c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001570:	4291      	cmp	r1, r2
 8001572:	d8ae      	bhi.n	80014d2 <HAL_UART_Init+0x72>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001574:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001578:	f3c3 0242 	ubfx	r2, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	60da      	str	r2, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001582:	6a62      	ldr	r2, [r4, #36]	; 0x24
  huart->RxISR = NULL;
 8001584:	2100      	movs	r1, #0
  huart->TxISR = NULL;
 8001586:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800158a:	b362      	cbz	r2, 80015e6 <HAL_UART_Init+0x186>
    UART_AdvFeatureConfig(huart);
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff ff0f 	bl	80013b0 <UART_AdvFeatureConfig>
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	e027      	b.n	80015e6 <HAL_UART_Init+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001596:	4b6d      	ldr	r3, [pc, #436]	; (800174c <HAL_UART_Init+0x2ec>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800159e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015a2:	f000 80a2 	beq.w	80016ea <HAL_UART_Init+0x28a>
 80015a6:	f240 808a 	bls.w	80016be <HAL_UART_Init+0x25e>
 80015aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80015ae:	d07a      	beq.n	80016a6 <HAL_UART_Init+0x246>
 80015b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80015b4:	d0cb      	beq.n	800154e <HAL_UART_Init+0xee>
 80015b6:	e78c      	b.n	80014d2 <HAL_UART_Init+0x72>
        pclk = HAL_RCC_GetPCLK2Freq();
 80015b8:	f7ff fd94 	bl	80010e4 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80015bc:	6863      	ldr	r3, [r4, #4]
 80015be:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80015c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80015c6:	b292      	uxth	r2, r2
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80015c8:	f1a2 0110 	sub.w	r1, r2, #16
 80015cc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80015d0:	4299      	cmp	r1, r3
 80015d2:	f63f af7e 	bhi.w	80014d2 <HAL_UART_Init+0x72>
      huart->Instance->BRR = usartdiv;
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	60da      	str	r2, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80015da:	6a62      	ldr	r2, [r4, #36]	; 0x24
  huart->RxISR = NULL;
 80015dc:	2100      	movs	r1, #0
  huart->TxISR = NULL;
 80015de:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80015e2:	2a00      	cmp	r2, #0
 80015e4:	d1d2      	bne.n	800158c <HAL_UART_Init+0x12c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015f4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80015f6:	681a      	ldr	r2, [r3, #0]
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015f8:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001600:	67e1      	str	r1, [r4, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001602:	f7fe ffd5 	bl	80005b0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800160c:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800160e:	d409      	bmi.n	8001624 <HAL_UART_Init+0x1c4>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	0750      	lsls	r0, r2, #29
 8001614:	d42a      	bmi.n	800166c <HAL_UART_Init+0x20c>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001616:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);
 8001618:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800161a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800161c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8001620:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8001622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001624:	69dd      	ldr	r5, [r3, #28]
 8001626:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 800162a:	d1f1      	bne.n	8001610 <HAL_UART_Init+0x1b0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800162c:	f7fe ffc0 	bl	80005b0 <HAL_GetTick>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001630:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001632:	1b80      	subs	r0, r0, r6
 8001634:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001638:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800163a:	d26c      	bcs.n	8001716 <HAL_UART_Init+0x2b6>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800163c:	0752      	lsls	r2, r2, #29
 800163e:	d5f1      	bpl.n	8001624 <HAL_UART_Init+0x1c4>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	0517      	lsls	r7, r2, #20
 8001644:	d5ee      	bpl.n	8001624 <HAL_UART_Init+0x1c4>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001646:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800164a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001652:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001654:	6899      	ldr	r1, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001656:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001658:	f021 0101 	bic.w	r1, r1, #1
 800165c:	6099      	str	r1, [r3, #8]
      return HAL_TIMEOUT;
 800165e:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8001660:	6762      	str	r2, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001662:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 8001666:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001668:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 800166a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800166c:	69dd      	ldr	r5, [r3, #28]
 800166e:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8001672:	d1d0      	bne.n	8001616 <HAL_UART_Init+0x1b6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001674:	f7fe ff9c 	bl	80005b0 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001678:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800167a:	1b80      	subs	r0, r0, r6
 800167c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001680:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001682:	d248      	bcs.n	8001716 <HAL_UART_Init+0x2b6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001684:	0751      	lsls	r1, r2, #29
 8001686:	d5f1      	bpl.n	800166c <HAL_UART_Init+0x20c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	0512      	lsls	r2, r2, #20
 800168c:	d5ee      	bpl.n	800166c <HAL_UART_Init+0x20c>
 800168e:	e7da      	b.n	8001646 <HAL_UART_Init+0x1e6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <HAL_UART_Init+0x2ec>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001694:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001698:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800169c:	d025      	beq.n	80016ea <HAL_UART_Init+0x28a>
 800169e:	d90e      	bls.n	80016be <HAL_UART_Init+0x25e>
 80016a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80016a4:	d177      	bne.n	8001796 <HAL_UART_Init+0x336>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016a6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80016aa:	f000 8086 	beq.w	80017ba <HAL_UART_Init+0x35a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80016ae:	6863      	ldr	r3, [r4, #4]
 80016b0:	085a      	lsrs	r2, r3, #1
 80016b2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80016b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80016ba:	b292      	uxth	r2, r2
 80016bc:	e784      	b.n	80015c8 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f47f af07 	bne.w	80014d2 <HAL_UART_Init+0x72>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80016c8:	d07f      	beq.n	80017ca <HAL_UART_Init+0x36a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80016ca:	f7ff fcf3 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80016ce:	6863      	ldr	r3, [r4, #4]
 80016d0:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80016d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80016d8:	b292      	uxth	r2, r2
 80016da:	e775      	b.n	80015c8 <HAL_UART_Init+0x168>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_UART_Init+0x2ec>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80016e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016e8:	d14c      	bne.n	8001784 <HAL_UART_Init+0x324>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016ea:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80016ee:	d057      	beq.n	80017a0 <HAL_UART_Init+0x340>
        pclk = HAL_RCC_GetSysClockFreq();
 80016f0:	f7ff fcb2 	bl	8001058 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80016f4:	6863      	ldr	r3, [r4, #4]
 80016f6:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80016fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80016fe:	b292      	uxth	r2, r2
 8001700:	e762      	b.n	80015c8 <HAL_UART_Init+0x168>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001702:	6863      	ldr	r3, [r4, #4]
 8001704:	085a      	lsrs	r2, r3, #1
 8001706:	f502 02f4 	add.w	r2, r2, #7995392	; 0x7a0000
 800170a:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
 800170e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001712:	b292      	uxth	r2, r2
 8001714:	e758      	b.n	80015c8 <HAL_UART_Init+0x168>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001716:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800171a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800171c:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800171e:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001720:	f022 0201 	bic.w	r2, r2, #1
 8001724:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 8001726:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8001728:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 800172a:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800172e:	67a1      	str	r1, [r4, #120]	; 0x78
}
 8001730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001732:	bf00      	nop
 8001734:	efff69f3 	.word	0xefff69f3
 8001738:	40013800 	.word	0x40013800
 800173c:	40004400 	.word	0x40004400
 8001740:	40004800 	.word	0x40004800
 8001744:	40004c00 	.word	0x40004c00
 8001748:	40005000 	.word	0x40005000
 800174c:	40021000 	.word	0x40021000
 8001750:	08001b24 	.word	0x08001b24
    switch (clocksource)
 8001754:	2b08      	cmp	r3, #8
 8001756:	f63f aebc 	bhi.w	80014d2 <HAL_UART_Init+0x72>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <HAL_UART_Init+0x300>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080017cb 	.word	0x080017cb
 8001764:	080017b5 	.word	0x080017b5
 8001768:	08001557 	.word	0x08001557
 800176c:	080014d3 	.word	0x080014d3
 8001770:	080017a1 	.word	0x080017a1
 8001774:	080014d3 	.word	0x080014d3
 8001778:	080014d3 	.word	0x080014d3
 800177c:	080014d3 	.word	0x080014d3
 8001780:	080017bb 	.word	0x080017bb
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001784:	d99b      	bls.n	80016be <HAL_UART_Init+0x25e>
 8001786:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800178a:	d08c      	beq.n	80016a6 <HAL_UART_Init+0x246>
 800178c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001790:	f43f aedd 	beq.w	800154e <HAL_UART_Init+0xee>
 8001794:	e69d      	b.n	80014d2 <HAL_UART_Init+0x72>
 8001796:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800179a:	f43f aed8 	beq.w	800154e <HAL_UART_Init+0xee>
 800179e:	e698      	b.n	80014d2 <HAL_UART_Init+0x72>
        pclk = HAL_RCC_GetSysClockFreq();
 80017a0:	f7ff fc5a 	bl	8001058 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80017a4:	6862      	ldr	r2, [r4, #4]
 80017a6:	0853      	lsrs	r3, r2, #1
 80017a8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80017ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	e6d9      	b.n	8001568 <HAL_UART_Init+0x108>
        pclk = HAL_RCC_GetPCLK2Freq();
 80017b4:	f7ff fc96 	bl	80010e4 <HAL_RCC_GetPCLK2Freq>
 80017b8:	e7f4      	b.n	80017a4 <HAL_UART_Init+0x344>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80017ba:	6862      	ldr	r2, [r4, #4]
 80017bc:	0853      	lsrs	r3, r2, #1
 80017be:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80017c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	e6ce      	b.n	8001568 <HAL_UART_Init+0x108>
        pclk = HAL_RCC_GetPCLK1Freq();
 80017ca:	f7ff fc73 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 80017ce:	e7e9      	b.n	80017a4 <HAL_UART_Init+0x344>

080017d0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80017d0:	b430      	push	{r4, r5}
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80017d2:	7a04      	ldrb	r4, [r0, #8]
 80017d4:	e9d0 3500 	ldrd	r3, r5, [r0]
 80017d8:	2c00      	cmp	r4, #0
 80017da:	d033      	beq.n	8001844 <LL_EXTI_Init+0x74>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80017dc:	b1c3      	cbz	r3, 8001810 <LL_EXTI_Init+0x40>
    {
      switch (EXTI_InitStruct->Mode)
 80017de:	7a42      	ldrb	r2, [r0, #9]
 80017e0:	2a01      	cmp	r2, #1
 80017e2:	d04b      	beq.n	800187c <LL_EXTI_Init+0xac>
 80017e4:	d367      	bcc.n	80018b6 <LL_EXTI_Init+0xe6>
 80017e6:	2a02      	cmp	r2, #2
 80017e8:	d163      	bne.n	80018b2 <LL_EXTI_Init+0xe2>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR, ExtiLine);
 80017ea:	4a4d      	ldr	r2, [pc, #308]	; (8001920 <LL_EXTI_Init+0x150>)
 80017ec:	6811      	ldr	r1, [r2, #0]
 80017ee:	4319      	orrs	r1, r3
 80017f0:	6011      	str	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->EMR, ExtiLine);
 80017f2:	6851      	ldr	r1, [r2, #4]
 80017f4:	4319      	orrs	r1, r3
 80017f6:	6051      	str	r1, [r2, #4]
 80017f8:	2100      	movs	r1, #0
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80017fa:	7a82      	ldrb	r2, [r0, #10]
 80017fc:	2a00      	cmp	r2, #0
 80017fe:	d049      	beq.n	8001894 <LL_EXTI_Init+0xc4>
      {
        switch (EXTI_InitStruct->Trigger)
 8001800:	2a02      	cmp	r2, #2
 8001802:	f000 8088 	beq.w	8001916 <LL_EXTI_Init+0x146>
 8001806:	2a03      	cmp	r2, #3
 8001808:	d03d      	beq.n	8001886 <LL_EXTI_Init+0xb6>
 800180a:	2a01      	cmp	r2, #1
 800180c:	d066      	beq.n	80018dc <LL_EXTI_Init+0x10c>
 800180e:	2301      	movs	r3, #1
        }
      }
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001810:	b1ad      	cbz	r5, 800183e <LL_EXTI_Init+0x6e>
    {
      switch (EXTI_InitStruct->Mode)
 8001812:	7a42      	ldrb	r2, [r0, #9]
 8001814:	2a01      	cmp	r2, #1
 8001816:	d041      	beq.n	800189c <LL_EXTI_Init+0xcc>
 8001818:	d327      	bcc.n	800186a <LL_EXTI_Init+0x9a>
 800181a:	2a02      	cmp	r2, #2
 800181c:	d147      	bne.n	80018ae <LL_EXTI_Init+0xde>
  SET_BIT(EXTI->IMR2, ExtiLine);
 800181e:	4a40      	ldr	r2, [pc, #256]	; (8001920 <LL_EXTI_Init+0x150>)
 8001820:	6a11      	ldr	r1, [r2, #32]
 8001822:	4329      	orrs	r1, r5
 8001824:	6211      	str	r1, [r2, #32]
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001826:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001828:	4329      	orrs	r1, r5
 800182a:	6251      	str	r1, [r2, #36]	; 0x24
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800182c:	7a82      	ldrb	r2, [r0, #10]
 800182e:	b132      	cbz	r2, 800183e <LL_EXTI_Init+0x6e>
      {
        switch (EXTI_InitStruct->Trigger)
 8001830:	2a02      	cmp	r2, #2
 8001832:	d067      	beq.n	8001904 <LL_EXTI_Init+0x134>
 8001834:	2a03      	cmp	r2, #3
 8001836:	d05d      	beq.n	80018f4 <LL_EXTI_Init+0x124>
 8001838:	2a01      	cmp	r2, #1
 800183a:	d046      	beq.n	80018ca <LL_EXTI_Init+0xfa>
 800183c:	2301      	movs	r3, #1
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
#endif
  }
  return status;
}
 800183e:	4618      	mov	r0, r3
 8001840:	bc30      	pop	{r4, r5}
 8001842:	4770      	bx	lr
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001844:	4a36      	ldr	r2, [pc, #216]	; (8001920 <LL_EXTI_Init+0x150>)
 8001846:	6811      	ldr	r1, [r2, #0]
 8001848:	43db      	mvns	r3, r3
 800184a:	4019      	ands	r1, r3
 800184c:	6011      	str	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800184e:	6850      	ldr	r0, [r2, #4]
 8001850:	4018      	ands	r0, r3
 8001852:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001854:	6a11      	ldr	r1, [r2, #32]
 8001856:	43eb      	mvns	r3, r5
 8001858:	4019      	ands	r1, r3
 800185a:	6211      	str	r1, [r2, #32]
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800185c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800185e:	4019      	ands	r1, r3
 8001860:	4623      	mov	r3, r4
 8001862:	4618      	mov	r0, r3
 8001864:	6251      	str	r1, [r2, #36]	; 0x24
 8001866:	bc30      	pop	{r4, r5}
 8001868:	4770      	bx	lr
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <LL_EXTI_Init+0x150>)
 800186c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800186e:	ea21 0105 	bic.w	r1, r1, r5
 8001872:	6251      	str	r1, [r2, #36]	; 0x24
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001874:	6a11      	ldr	r1, [r2, #32]
 8001876:	4329      	orrs	r1, r5
 8001878:	6211      	str	r1, [r2, #32]
 800187a:	e7d7      	b.n	800182c <LL_EXTI_Init+0x5c>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800187c:	4a28      	ldr	r2, [pc, #160]	; (8001920 <LL_EXTI_Init+0x150>)
 800187e:	6811      	ldr	r1, [r2, #0]
 8001880:	ea21 0103 	bic.w	r1, r1, r3
 8001884:	e7b4      	b.n	80017f0 <LL_EXTI_Init+0x20>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001886:	4a26      	ldr	r2, [pc, #152]	; (8001920 <LL_EXTI_Init+0x150>)
 8001888:	6894      	ldr	r4, [r2, #8]
 800188a:	431c      	orrs	r4, r3
 800188c:	6094      	str	r4, [r2, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR, ExtiLine);
 800188e:	68d4      	ldr	r4, [r2, #12]
 8001890:	4323      	orrs	r3, r4
 8001892:	60d3      	str	r3, [r2, #12]
 8001894:	460b      	mov	r3, r1
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001896:	2d00      	cmp	r5, #0
 8001898:	d1bb      	bne.n	8001812 <LL_EXTI_Init+0x42>
 800189a:	e7d0      	b.n	800183e <LL_EXTI_Init+0x6e>
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800189c:	4a20      	ldr	r2, [pc, #128]	; (8001920 <LL_EXTI_Init+0x150>)
 800189e:	6a11      	ldr	r1, [r2, #32]
 80018a0:	ea21 0105 	bic.w	r1, r1, r5
 80018a4:	6211      	str	r1, [r2, #32]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80018a6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80018a8:	4329      	orrs	r1, r5
 80018aa:	6251      	str	r1, [r2, #36]	; 0x24
 80018ac:	e7be      	b.n	800182c <LL_EXTI_Init+0x5c>
      switch (EXTI_InitStruct->Mode)
 80018ae:	2301      	movs	r3, #1
 80018b0:	e7bc      	b.n	800182c <LL_EXTI_Init+0x5c>
      switch (EXTI_InitStruct->Mode)
 80018b2:	2101      	movs	r1, #1
 80018b4:	e7a1      	b.n	80017fa <LL_EXTI_Init+0x2a>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80018b6:	4a1a      	ldr	r2, [pc, #104]	; (8001920 <LL_EXTI_Init+0x150>)
 80018b8:	6851      	ldr	r1, [r2, #4]
 80018ba:	ea21 0103 	bic.w	r1, r1, r3
 80018be:	6051      	str	r1, [r2, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80018c0:	6811      	ldr	r1, [r2, #0]
 80018c2:	4319      	orrs	r1, r3
 80018c4:	6011      	str	r1, [r2, #0]
 80018c6:	2100      	movs	r1, #0
 80018c8:	e797      	b.n	80017fa <LL_EXTI_Init+0x2a>
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <LL_EXTI_Init+0x150>)
 80018cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018ce:	ea21 0105 	bic.w	r1, r1, r5
 80018d2:	62d1      	str	r1, [r2, #44]	; 0x2c
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80018d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80018d6:	430d      	orrs	r5, r1
 80018d8:	6295      	str	r5, [r2, #40]	; 0x28
 80018da:	e7b0      	b.n	800183e <LL_EXTI_Init+0x6e>
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80018dc:	4a10      	ldr	r2, [pc, #64]	; (8001920 <LL_EXTI_Init+0x150>)
 80018de:	68d4      	ldr	r4, [r2, #12]
 80018e0:	ea24 0403 	bic.w	r4, r4, r3
 80018e4:	60d4      	str	r4, [r2, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80018e6:	6894      	ldr	r4, [r2, #8]
 80018e8:	4323      	orrs	r3, r4
 80018ea:	6093      	str	r3, [r2, #8]
 80018ec:	460b      	mov	r3, r1
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80018ee:	2d00      	cmp	r5, #0
 80018f0:	d18f      	bne.n	8001812 <LL_EXTI_Init+0x42>
 80018f2:	e7a4      	b.n	800183e <LL_EXTI_Init+0x6e>
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80018f4:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <LL_EXTI_Init+0x150>)
 80018f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80018f8:	4329      	orrs	r1, r5
 80018fa:	6291      	str	r1, [r2, #40]	; 0x28
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80018fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018fe:	430d      	orrs	r5, r1
 8001900:	62d5      	str	r5, [r2, #44]	; 0x2c
 8001902:	e79c      	b.n	800183e <LL_EXTI_Init+0x6e>
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <LL_EXTI_Init+0x150>)
 8001906:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001908:	ea21 0105 	bic.w	r1, r1, r5
 800190c:	6291      	str	r1, [r2, #40]	; 0x28
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800190e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001910:	430d      	orrs	r5, r1
 8001912:	62d5      	str	r5, [r2, #44]	; 0x2c
 8001914:	e793      	b.n	800183e <LL_EXTI_Init+0x6e>
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001916:	4a02      	ldr	r2, [pc, #8]	; (8001920 <LL_EXTI_Init+0x150>)
 8001918:	6894      	ldr	r4, [r2, #8]
 800191a:	ea24 0403 	bic.w	r4, r4, r3
 800191e:	e7b5      	b.n	800188c <LL_EXTI_Init+0xbc>
 8001920:	40010400 	.word	0x40010400

08001924 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001928:	680c      	ldr	r4, [r1, #0]
 800192a:	fa94 f2a4 	rbit	r2, r4
 800192e:	684e      	ldr	r6, [r1, #4]
 8001930:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001934:	fa34 f302 	lsrs.w	r3, r4, r2
 8001938:	f106 3eff 	add.w	lr, r6, #4294967295	; 0xffffffff
 800193c:	d079      	beq.n	8001a32 <LL_GPIO_Init+0x10e>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800193e:	f04f 0c01 	mov.w	ip, #1
 8001942:	2703      	movs	r7, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001944:	f04f 080f 	mov.w	r8, #15
 8001948:	e003      	b.n	8001952 <LL_GPIO_Init+0x2e>
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 800194a:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800194c:	fa34 f302 	lsrs.w	r3, r4, r2
 8001950:	d06f      	beq.n	8001a32 <LL_GPIO_Init+0x10e>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001952:	fa0c f302 	lsl.w	r3, ip, r2
    if (currentpin != 0x00u)
 8001956:	4023      	ands	r3, r4
 8001958:	d0f7      	beq.n	800194a <LL_GPIO_Init+0x26>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800195a:	f8d0 9000 	ldr.w	r9, [r0]
 800195e:	fa93 faa3 	rbit	sl, r3
 8001962:	faba fa8a 	clz	sl, sl
 8001966:	fa93 f5a3 	rbit	r5, r3
 800196a:	fab5 f585 	clz	r5, r5
 800196e:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8001972:	006d      	lsls	r5, r5, #1
 8001974:	fa07 fa0a 	lsl.w	sl, r7, sl
 8001978:	fa06 f505 	lsl.w	r5, r6, r5
 800197c:	ea29 090a 	bic.w	r9, r9, sl
 8001980:	ea49 0505 	orr.w	r5, r9, r5
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001984:	f1be 0f01 	cmp.w	lr, #1
 8001988:	6005      	str	r5, [r0, #0]
 800198a:	d816      	bhi.n	80019ba <LL_GPIO_Init+0x96>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800198c:	6885      	ldr	r5, [r0, #8]
 800198e:	fa93 f9a3 	rbit	r9, r3
 8001992:	fab9 f989 	clz	r9, r9
 8001996:	fa93 faa3 	rbit	sl, r3
 800199a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800199e:	fa07 f909 	lsl.w	r9, r7, r9
 80019a2:	ea25 0909 	bic.w	r9, r5, r9
 80019a6:	faba fa8a 	clz	sl, sl
 80019aa:	688d      	ldr	r5, [r1, #8]
 80019ac:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80019b0:	fa05 f50a 	lsl.w	r5, r5, sl
 80019b4:	ea49 0505 	orr.w	r5, r9, r5
 80019b8:	6085      	str	r5, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80019ba:	68c5      	ldr	r5, [r0, #12]
 80019bc:	fa93 f9a3 	rbit	r9, r3
 80019c0:	fab9 f989 	clz	r9, r9
 80019c4:	fa93 faa3 	rbit	sl, r3
 80019c8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80019cc:	fa07 f909 	lsl.w	r9, r7, r9
 80019d0:	ea25 0909 	bic.w	r9, r5, r9
 80019d4:	faba fa8a 	clz	sl, sl
 80019d8:	690d      	ldr	r5, [r1, #16]
 80019da:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80019de:	fa05 f50a 	lsl.w	r5, r5, sl
 80019e2:	ea49 0505 	orr.w	r5, r9, r5
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80019e6:	2e02      	cmp	r6, #2
 80019e8:	60c5      	str	r5, [r0, #12]
 80019ea:	d1ae      	bne.n	800194a <LL_GPIO_Init+0x26>
 80019ec:	fa93 faa3 	rbit	sl, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80019f0:	faba fa8a 	clz	sl, sl
 80019f4:	f1ba 0f07 	cmp.w	sl, #7
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80019f8:	ea4f 2513 	mov.w	r5, r3, lsr #8
 80019fc:	f8d1 9014 	ldr.w	r9, [r1, #20]
 8001a00:	dc25      	bgt.n	8001a4e <LL_GPIO_Init+0x12a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001a02:	6a05      	ldr	r5, [r0, #32]
 8001a04:	fa93 faa3 	rbit	sl, r3
 8001a08:	faba fa8a 	clz	sl, sl
 8001a0c:	fa93 f3a3 	rbit	r3, r3
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	fa08 fa0a 	lsl.w	sl, r8, sl
 8001a1e:	fa09 f303 	lsl.w	r3, r9, r3
 8001a22:	ea25 050a 	bic.w	r5, r5, sl
 8001a26:	432b      	orrs	r3, r5
    pinpos++;
 8001a28:	3201      	adds	r2, #1
 8001a2a:	6203      	str	r3, [r0, #32]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001a2c:	fa34 f302 	lsrs.w	r3, r4, r2
 8001a30:	d18f      	bne.n	8001952 <LL_GPIO_Init+0x2e>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a32:	f1be 0f01 	cmp.w	lr, #1
 8001a36:	d807      	bhi.n	8001a48 <LL_GPIO_Init+0x124>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001a38:	68ca      	ldr	r2, [r1, #12]
 8001a3a:	6843      	ldr	r3, [r0, #4]
 8001a3c:	fb02 f204 	mul.w	r2, r2, r4
 8001a40:	ea23 0404 	bic.w	r4, r3, r4
 8001a44:	4314      	orrs	r4, r2
 8001a46:	6044      	str	r4, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8001a48:	2000      	movs	r0, #0
 8001a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001a4e:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8001a52:	fa95 fba5 	rbit	fp, r5
 8001a56:	fabb fb8b 	clz	fp, fp
 8001a5a:	fa95 f3a5 	rbit	r3, r5
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	fa08 fb0b 	lsl.w	fp, r8, fp
 8001a6c:	fa09 f303 	lsl.w	r3, r9, r3
 8001a70:	ea2a 0a0b 	bic.w	sl, sl, fp
 8001a74:	ea4a 0303 	orr.w	r3, sl, r3
 8001a78:	6243      	str	r3, [r0, #36]	; 0x24
 8001a7a:	e766      	b.n	800194a <LL_GPIO_Init+0x26>

08001a7c <__libc_init_array>:
 8001a7c:	b570      	push	{r4, r5, r6, lr}
 8001a7e:	4e0d      	ldr	r6, [pc, #52]	; (8001ab4 <__libc_init_array+0x38>)
 8001a80:	4c0d      	ldr	r4, [pc, #52]	; (8001ab8 <__libc_init_array+0x3c>)
 8001a82:	1ba4      	subs	r4, r4, r6
 8001a84:	10a4      	asrs	r4, r4, #2
 8001a86:	2500      	movs	r5, #0
 8001a88:	42a5      	cmp	r5, r4
 8001a8a:	d109      	bne.n	8001aa0 <__libc_init_array+0x24>
 8001a8c:	4e0b      	ldr	r6, [pc, #44]	; (8001abc <__libc_init_array+0x40>)
 8001a8e:	4c0c      	ldr	r4, [pc, #48]	; (8001ac0 <__libc_init_array+0x44>)
 8001a90:	f000 f820 	bl	8001ad4 <_init>
 8001a94:	1ba4      	subs	r4, r4, r6
 8001a96:	10a4      	asrs	r4, r4, #2
 8001a98:	2500      	movs	r5, #0
 8001a9a:	42a5      	cmp	r5, r4
 8001a9c:	d105      	bne.n	8001aaa <__libc_init_array+0x2e>
 8001a9e:	bd70      	pop	{r4, r5, r6, pc}
 8001aa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001aa4:	4798      	blx	r3
 8001aa6:	3501      	adds	r5, #1
 8001aa8:	e7ee      	b.n	8001a88 <__libc_init_array+0xc>
 8001aaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001aae:	4798      	blx	r3
 8001ab0:	3501      	adds	r5, #1
 8001ab2:	e7f2      	b.n	8001a9a <__libc_init_array+0x1e>
 8001ab4:	08001b28 	.word	0x08001b28
 8001ab8:	08001b28 	.word	0x08001b28
 8001abc:	08001b28 	.word	0x08001b28
 8001ac0:	08001b2c 	.word	0x08001b2c

08001ac4 <memset>:
 8001ac4:	4402      	add	r2, r0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d100      	bne.n	8001ace <memset+0xa>
 8001acc:	4770      	bx	lr
 8001ace:	f803 1b01 	strb.w	r1, [r3], #1
 8001ad2:	e7f9      	b.n	8001ac8 <memset+0x4>

08001ad4 <_init>:
 8001ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ad6:	bf00      	nop
 8001ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ada:	bc08      	pop	{r3}
 8001adc:	469e      	mov	lr, r3
 8001ade:	4770      	bx	lr

08001ae0 <_fini>:
 8001ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ae2:	bf00      	nop
 8001ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ae6:	bc08      	pop	{r3}
 8001ae8:	469e      	mov	lr, r3
 8001aea:	4770      	bx	lr
